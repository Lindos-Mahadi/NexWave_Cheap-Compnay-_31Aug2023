

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "comdeeds\Web.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=.;Initial Catalog=comdeedtesting;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace comdeeds
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AsicTxnFile> AsicTxnFiles { get; set; } // ASIC_TXN_File
        System.Data.Entity.DbSet<AsicTxnStatus> AsicTxnStatus { get; set; } // ASIC_TXN_STATUS
        System.Data.Entity.DbSet<Companysearch> Companysearches { get; set; } // companysearch
        System.Data.Entity.DbSet<LbLmsg> LbLmsgs { get; set; } // LBLmsg
        System.Data.Entity.DbSet<Lodgement> Lodgements { get; set; } // lodgement
        System.Data.Entity.DbSet<Ra55> Ra55 { get; set; } // RA55
        System.Data.Entity.DbSet<Ra56> Ra56 { get; set; } // RA56
        System.Data.Entity.DbSet<Registration> Registrations { get; set; } // Registration
        System.Data.Entity.DbSet<ShareAllocate> ShareAllocates { get; set; } // Share_Allocate
        System.Data.Entity.DbSet<ShareDistributeGrid> ShareDistributeGrids { get; set; } // Share_distribute_grid
        System.Data.Entity.DbSet<Step1> Step1 { get; set; } // step1
        System.Data.Entity.DbSet<Step2> Step2 { get; set; } // step2
        System.Data.Entity.DbSet<Step3> Step3 { get; set; } // step3
        System.Data.Entity.DbSet<Step4Anothershareholder> Step4Anothershareholder { get; set; } // step4_anothershareholder
        System.Data.Entity.DbSet<TblCompany> TblCompanies { get; set; } // Tbl_Company
        System.Data.Entity.DbSet<TblCompanyAddress> TblCompanyAddresses { get; set; } // Tbl_CompanyAddress
        System.Data.Entity.DbSet<TblCompanyDirector> TblCompanyDirectors { get; set; } // Tbl_CompanyDirector
        System.Data.Entity.DbSet<TblCompanyShare> TblCompanyShares { get; set; } // Tbl_CompanyShare
        System.Data.Entity.DbSet<TblCompanyTrust> TblCompanyTrusts { get; set; } // Tbl_CompanyTrust
        System.Data.Entity.DbSet<TblContact> TblContacts { get; set; } // Tbl_Contact
        System.Data.Entity.DbSet<TblOption> TblOptions { get; set; } // Tbl_Options
        System.Data.Entity.DbSet<TblTransaction> TblTransactions { get; set; } // Tbl_Transaction
        System.Data.Entity.DbSet<TblTrust> TblTrusts { get; set; } // Tbl_Trust
        System.Data.Entity.DbSet<TblTrustAppointer> TblTrustAppointers { get; set; } // Tbl_TrustAppointer
        System.Data.Entity.DbSet<TblTrustOption> TblTrustOptions { get; set; } // Tbl_TrustOption
        System.Data.Entity.DbSet<TblUser> TblUsers { get; set; } // Tbl_User
        System.Data.Entity.DbSet<TblUserMeta> TblUserMetas { get; set; } // Tbl_UserMeta
        System.Data.Entity.DbSet<TempCsearch> TempCsearches { get; set; } // temp_csearch

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int UpdateRegistration(string companyid, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode);
        // UpdateRegistrationAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int Addcompany(string company, long? uid);
        // AddcompanyAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid);
        System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AddtrustReturnModel>> AddtrustAsync(long? id, string fName, string lName, string email, string phone, long? uid);

        System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno);
        System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AdminloginAfterReturnModel>> AdminloginAfterAsync(string email, string pass, string regno);

        System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml);
        System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DelcompanyReturnModel>> DelcompanyAsync(string xml);

        System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml);
        System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DelContactsReturnModel>> DelContactsAsync(string xml);

        int DeleteShareDistributeGrid(string companyid);
        // DeleteShareDistributeGridAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteShareDistributeGridStep4Add(string companyid);
        // DeleteShareDistributeGridStep4AddAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteShareDistributeGridStep4Ind(string companyid);
        // DeleteShareDistributeGridStep4IndAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteStep3ByDirId(int? id, string companyid);
        // DeleteStep3ByDirIdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteStep4Anothershareholder(string companyid);
        // DeleteStep4AnothershareholderAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteStep4AnothershareholderAdd(string companyid);
        // DeleteStep4AnothershareholderAddAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteStep4AnothershareholderInd(string companyid);
        // DeleteStep4AnothershareholderIndAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid);
        System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DeleteDirectorsReturnModel>> DeleteDirectorsAsync(string xml, long? cid);

        System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml);
        System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DeltrustReturnModel>> DeltrustAsync(string xml);

        System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid);
        System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DeluserReturnModel>> DeluserAsync(string xml, long? uid);

        System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname);
        System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetCompanysearchByNameReturnModel>> GetCompanysearchByNameAsync(string companyname);

        System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement();
        System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetLodgementReturnModel>> GetLodgementAsync();

        System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid);
        System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRegistrationReturnModel>> GetRegistrationAsync(string email, long? regid);

        System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid);
        System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel>> GetShareAllocationMainPdfAsync(string companyid);

        System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid);
        System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegridReturnModel>> GetShareDistributegridAsync(string companyid, string linkid);

        System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid);
        System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid1ReturnModel>> GetShareDistributegrid1Async(string companyid);

        System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company);
        System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid12ReturnModel>> GetShareDistributegrid12Async(string companyid, string company);

        System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid);
        System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1ReturnModel>> GetStep1Async(string companyid);

        System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid);
        System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ReturnModel>> GetStep3Async(string companyid);

        System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid);
        System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ByDirIdReturnModel>> GetStep3ByDirIdAsync(string companyid, string dirid);

        System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid);
        System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderReturnModel>> GetStep4AnothershareholderAsync(string companyid);

        System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid);
        System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel>> GetStep4Anothershareholder1Async(string companyid);

        System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid);
        System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel>> GetStep4AnothershareholderAllAsync(string companyid);

        System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid);
        System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetUserdetailsByuidReturnModel>> GetUserdetailsByuidAsync(string uid);

        System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount);
        System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult);
        // GetAdminCompanyListAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetAdminCompanyListReturnModel>)

        GetAdminTrustListReturnModel GetAdminTrustList(int? startLength, int? length, string orderBy, string search, out int? pageCount, string subuserid);
        // GetAdminTrustListAsync cannot be created due to having out parameters, or is relying on the procedure result (GetAdminTrustListReturnModel)

        System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount);
        System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult);
        // GetadminUsersListAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetadminUsersListReturnModel>)

        GetBeneficiaryDetailsReturnModel GetBeneficiaryDetails(long? tId);
        System.Threading.Tasks.Task<GetBeneficiaryDetailsReturnModel> GetBeneficiaryDetailsAsync(long? tId);

        System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid);
        System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetcompanysearchbyidReturnModel>> GetcompanysearchbyidAsync(string companyid);

        GetDashboardCountersReturnModel GetDashboardCounters(string subuserid, string esubuserid);
        System.Threading.Tasks.Task<GetDashboardCountersReturnModel> GetDashboardCountersAsync(string subuserid, string esubuserid);

        GetFullCompanyDetailReturnModel GetFullCompanyDetail(long? cid);
        System.Threading.Tasks.Task<GetFullCompanyDetailReturnModel> GetFullCompanyDetailAsync(long? cid);

        GetFullTrustDetailReturnModel GetFullTrustDetail(long? tid);
        System.Threading.Tasks.Task<GetFullTrustDetailReturnModel> GetFullTrustDetailAsync(long? tid);

        GetPaymentDetailReturnModel GetPaymentDetail(long? id, string type);
        System.Threading.Tasks.Task<GetPaymentDetailReturnModel> GetPaymentDetailAsync(long? id, string type);

        GetPaymentListReturnModel GetPaymentList(int? startLength, int? length, string orderBy, int? id, out int? pageCount);
        // GetPaymentListAsync cannot be created due to having out parameters, or is relying on the procedure result (GetPaymentListReturnModel)

        GetReportReturnModel GetReport(int? time, int? uid);
        System.Threading.Tasks.Task<GetReportReturnModel> GetReportAsync(int? time, int? uid);

        GetShortCompanyDetailReturnModel GetShortCompanyDetail(long? cid);
        System.Threading.Tasks.Task<GetShortCompanyDetailReturnModel> GetShortCompanyDetailAsync(long? cid);

        System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid);
        System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1BycidReturnModel>> GetStep1BycidAsync(string companyid);

        System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid);
        System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep2BycidReturnModel>> GetStep2BycidAsync(string companyid);

        System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid);
        System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustAppointerReturnModel>> GetTrustAppointerAsync(long? tid);

        System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id);
        System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustDetailReturnModel>> GetTrustDetailAsync(long? id);

        System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount);
        System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount, out int procResult);
        // GetUserCompanyListAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetUserCompanyListReturnModel>)

        System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount);
        System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult);
        // GetUserCompanyList1Async cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetUserCompanyList1ReturnModel>)

        System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount);
        System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult);
        // GetUsersListAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetUsersListReturnModel>)

        System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount);
        System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult);
        // GetUserTrustListAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetUserTrustListReturnModel>)

        int InsertRa55(string companyName, string acn, string companyType, string companyClass, string certificatePrintOption, string jurisdictionOfRegistration, string dateOfRegistration, string companySubclass, string accountNumber, string supplierName, string supplierAbn, string registeredAgentName, string registeredAgentAddress, string invoiceDescription, string invoiceAmmount, string documentNumber, string formCode, string taxInvoiceText, string taxCode, string taxAmmount);
        // InsertRa55Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertShareDistributeGrid(string companyid, string shareclass, int? totalshares, decimal? unitprice, decimal? totalprice, int? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid);
        // InsertShareDistributeGridAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertShareDistributeGrid1(string companyid, string shareclass, decimal? totalshares, decimal? unitprice, decimal? totalprice, decimal? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid, string individualOrCompany);
        // InsertShareDistributeGrid1Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor);
        // InsertStep1Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername);
        // InsertStep2Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertStep3(string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer);
        // InsertStep3Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg);
        System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel>> InsertStep4AnothershareholderAsync(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg);

        int InsertLbLmsg(string companyid, string sms);
        // InsertLbLmsgAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid);
        System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SaveOptionsReturnModel>> SaveOptionsAsync(string xml, long? uid);

        System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email);
        System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetProfileReturnModel>> SpGetProfileAsync(string email);

        SpInsertCompanysearchReturnModel SpInsertCompanysearch(string userid, string companyname, long? regid);
        System.Threading.Tasks.Task<SpInsertCompanysearchReturnModel> SpInsertCompanysearchAsync(string userid, string companyname, long? regid);

        System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact();
        System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UnreadContactReturnModel>> UnreadContactAsync();

        int UpdateStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor);
        // UpdateStep1Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername);
        // UpdateStep2Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateStep3(int? id, string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer);
        // UpdateStep3Async cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, int? id, string placeofbirth, string shareoption, string sharedetailsnotheldanotherorg);
        // UpdateStep4AnothershareholderAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        UpdateBeneficiariesReturnModel UpdateBeneficiaries(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid);
        System.Threading.Tasks.Task<UpdateBeneficiariesReturnModel> UpdateBeneficiariesAsync(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid);

        System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid);
        System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatecompanyOptionReturnModel>> UpdatecompanyOptionAsync(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid);

        System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id);
        System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateContactstatusReturnModel>> UpdateContactstatusAsync(long? id);

        System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber);
        System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatetrustReturnModel>> UpdatetrustAsync(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber);

        System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid);
        System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustAppointerReturnModel>> UpdateTrustAppointerAsync(string xml, long? tid, string unitcost, string totalmember, long? uid);

        System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid);
        System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustOptionReturnModel>> UpdateTrustOptionAsync(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid);

        System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno);
        System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginReturnModel>> UserloginAsync(string email, string pass, string regno);

        System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass);
        System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginNewReturnModel>> UserloginNewAsync(string email, string pass);

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<AsicTxnFile> AsicTxnFiles { get; set; } // ASIC_TXN_File
        public System.Data.Entity.DbSet<AsicTxnStatus> AsicTxnStatus { get; set; } // ASIC_TXN_STATUS
        public System.Data.Entity.DbSet<Companysearch> Companysearches { get; set; } // companysearch
        public System.Data.Entity.DbSet<LbLmsg> LbLmsgs { get; set; } // LBLmsg
        public System.Data.Entity.DbSet<Lodgement> Lodgements { get; set; } // lodgement
        public System.Data.Entity.DbSet<Ra55> Ra55 { get; set; } // RA55
        public System.Data.Entity.DbSet<Ra56> Ra56 { get; set; } // RA56
        public System.Data.Entity.DbSet<Registration> Registrations { get; set; } // Registration
        public System.Data.Entity.DbSet<ShareAllocate> ShareAllocates { get; set; } // Share_Allocate
        public System.Data.Entity.DbSet<ShareDistributeGrid> ShareDistributeGrids { get; set; } // Share_distribute_grid
        public System.Data.Entity.DbSet<Step1> Step1 { get; set; } // step1
        public System.Data.Entity.DbSet<Step2> Step2 { get; set; } // step2
        public System.Data.Entity.DbSet<Step3> Step3 { get; set; } // step3
        public System.Data.Entity.DbSet<Step4Anothershareholder> Step4Anothershareholder { get; set; } // step4_anothershareholder
        public System.Data.Entity.DbSet<TblCompany> TblCompanies { get; set; } // Tbl_Company
        public System.Data.Entity.DbSet<TblCompanyAddress> TblCompanyAddresses { get; set; } // Tbl_CompanyAddress
        public System.Data.Entity.DbSet<TblCompanyDirector> TblCompanyDirectors { get; set; } // Tbl_CompanyDirector
        public System.Data.Entity.DbSet<TblCompanyShare> TblCompanyShares { get; set; } // Tbl_CompanyShare
        public System.Data.Entity.DbSet<TblCompanyTrust> TblCompanyTrusts { get; set; } // Tbl_CompanyTrust
        public System.Data.Entity.DbSet<TblContact> TblContacts { get; set; } // Tbl_Contact
        public System.Data.Entity.DbSet<TblOption> TblOptions { get; set; } // Tbl_Options
        public System.Data.Entity.DbSet<TblTransaction> TblTransactions { get; set; } // Tbl_Transaction
        public System.Data.Entity.DbSet<TblTrust> TblTrusts { get; set; } // Tbl_Trust
        public System.Data.Entity.DbSet<TblTrustAppointer> TblTrustAppointers { get; set; } // Tbl_TrustAppointer
        public System.Data.Entity.DbSet<TblTrustOption> TblTrustOptions { get; set; } // Tbl_TrustOption
        public System.Data.Entity.DbSet<TblUser> TblUsers { get; set; } // Tbl_User
        public System.Data.Entity.DbSet<TblUserMeta> TblUserMetas { get; set; } // Tbl_UserMeta
        public System.Data.Entity.DbSet<TempCsearch> TempCsearches { get; set; } // temp_csearch

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AsicTxnFileConfiguration());
            modelBuilder.Configurations.Add(new AsicTxnStatusConfiguration());
            modelBuilder.Configurations.Add(new CompanysearchConfiguration());
            modelBuilder.Configurations.Add(new LbLmsgConfiguration());
            modelBuilder.Configurations.Add(new LodgementConfiguration());
            modelBuilder.Configurations.Add(new Ra55Configuration());
            modelBuilder.Configurations.Add(new Ra56Configuration());
            modelBuilder.Configurations.Add(new RegistrationConfiguration());
            modelBuilder.Configurations.Add(new ShareAllocateConfiguration());
            modelBuilder.Configurations.Add(new ShareDistributeGridConfiguration());
            modelBuilder.Configurations.Add(new Step1Configuration());
            modelBuilder.Configurations.Add(new Step2Configuration());
            modelBuilder.Configurations.Add(new Step3Configuration());
            modelBuilder.Configurations.Add(new Step4AnothershareholderConfiguration());
            modelBuilder.Configurations.Add(new TblCompanyConfiguration());
            modelBuilder.Configurations.Add(new TblCompanyAddressConfiguration());
            modelBuilder.Configurations.Add(new TblCompanyDirectorConfiguration());
            modelBuilder.Configurations.Add(new TblCompanyShareConfiguration());
            modelBuilder.Configurations.Add(new TblCompanyTrustConfiguration());
            modelBuilder.Configurations.Add(new TblContactConfiguration());
            modelBuilder.Configurations.Add(new TblOptionConfiguration());
            modelBuilder.Configurations.Add(new TblTransactionConfiguration());
            modelBuilder.Configurations.Add(new TblTrustConfiguration());
            modelBuilder.Configurations.Add(new TblTrustAppointerConfiguration());
            modelBuilder.Configurations.Add(new TblTrustOptionConfiguration());
            modelBuilder.Configurations.Add(new TblUserConfiguration());
            modelBuilder.Configurations.Add(new TblUserMetaConfiguration());
            modelBuilder.Configurations.Add(new TempCsearchConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AsicTxnFileConfiguration(schema));
            modelBuilder.Configurations.Add(new AsicTxnStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanysearchConfiguration(schema));
            modelBuilder.Configurations.Add(new LbLmsgConfiguration(schema));
            modelBuilder.Configurations.Add(new LodgementConfiguration(schema));
            modelBuilder.Configurations.Add(new Ra55Configuration(schema));
            modelBuilder.Configurations.Add(new Ra56Configuration(schema));
            modelBuilder.Configurations.Add(new RegistrationConfiguration(schema));
            modelBuilder.Configurations.Add(new ShareAllocateConfiguration(schema));
            modelBuilder.Configurations.Add(new ShareDistributeGridConfiguration(schema));
            modelBuilder.Configurations.Add(new Step1Configuration(schema));
            modelBuilder.Configurations.Add(new Step2Configuration(schema));
            modelBuilder.Configurations.Add(new Step3Configuration(schema));
            modelBuilder.Configurations.Add(new Step4AnothershareholderConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCompanyAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCompanyDirectorConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCompanyShareConfiguration(schema));
            modelBuilder.Configurations.Add(new TblCompanyTrustConfiguration(schema));
            modelBuilder.Configurations.Add(new TblContactConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOptionConfiguration(schema));
            modelBuilder.Configurations.Add(new TblTransactionConfiguration(schema));
            modelBuilder.Configurations.Add(new TblTrustConfiguration(schema));
            modelBuilder.Configurations.Add(new TblTrustAppointerConfiguration(schema));
            modelBuilder.Configurations.Add(new TblTrustOptionConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUserConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUserMetaConfiguration(schema));
            modelBuilder.Configurations.Add(new TempCsearchConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int UpdateRegistration(string companyid, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var unitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuite, Size = 100 };
            if (unitLevelSuiteParam.Value == null)
                unitLevelSuiteParam.Value = System.DBNull.Value;

            var streetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoName, Size = 100 };
            if (streetNoNameParam.Value == null)
                streetNoNameParam.Value = System.DBNull.Value;

            var suburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCity, Size = 50 };
            if (suburbTownCityParam.Value == null)
                suburbTownCityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 50 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var postcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcode, Size = 10 };
            if (postcodeParam.Value == null)
                postcodeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[_update_Registration] @companyid, @unit_level_suite, @streetNoName, @suburb_town_city, @state, @postcode", companyidParam, unitLevelSuiteParam, streetNoNameParam, suburbTownCityParam, stateParam, postcodeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int Addcompany(string company, long? uid)
        {
            var companyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@company", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = company, Size = -1 };
            if (companyParam.Value == null)
                companyParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[Addcompany] @company, @uid", companyParam, uidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid)
        {
            int procResult;
            return Addtrust(id, fName, lName, email, phone, uid, out procResult);
        }

        public System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var fNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@fName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fName, Size = 4000 };
            if (fNameParam.Value == null)
                fNameParam.Value = System.DBNull.Value;

            var lNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lName, Size = 4000 };
            if (lNameParam.Value == null)
                lNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 4000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@phone", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 4000 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AddtrustReturnModel>("EXEC @procResult = [dbo].[addtrust] @Id, @fName, @lName, @email, @phone, @uid", idParam, fNameParam, lNameParam, emailParam, phoneParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AddtrustReturnModel>> AddtrustAsync(long? id, string fName, string lName, string email, string phone, long? uid)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var fNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@fName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fName, Size = 4000 };
            if (fNameParam.Value == null)
                fNameParam.Value = System.DBNull.Value;

            var lNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lName, Size = 4000 };
            if (lNameParam.Value == null)
                lNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 4000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@phone", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 4000 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AddtrustReturnModel>("EXEC [dbo].[addtrust] @Id, @fName, @lName, @email, @phone, @uid", idParam, fNameParam, lNameParam, emailParam, phoneParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno)
        {
            int procResult;
            return AdminloginAfter(email, pass, regno, out procResult);
        }

        public System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var regnoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regno", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = regno, Size = 50 };
            if (regnoParam.Value == null)
                regnoParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AdminloginAfterReturnModel>("EXEC @procResult = [dbo].[adminlogin_after] @email, @pass, @regno", emailParam, passParam, regnoParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AdminloginAfterReturnModel>> AdminloginAfterAsync(string email, string pass, string regno)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var regnoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regno", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = regno, Size = 50 };
            if (regnoParam.Value == null)
                regnoParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AdminloginAfterReturnModel>("EXEC [dbo].[adminlogin_after] @email, @pass, @regno", emailParam, passParam, regnoParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml)
        {
            int procResult;
            return Delcompany(xml, out procResult);
        }

        public System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DelcompanyReturnModel>("EXEC @procResult = [dbo].[delcompany] @xml", xmlParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DelcompanyReturnModel>> DelcompanyAsync(string xml)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DelcompanyReturnModel>("EXEC [dbo].[delcompany] @xml", xmlParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml)
        {
            int procResult;
            return DelContacts(xml, out procResult);
        }

        public System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DelContactsReturnModel>("EXEC @procResult = [dbo].[delContacts] @xml", xmlParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DelContactsReturnModel>> DelContactsAsync(string xml)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DelContactsReturnModel>("EXEC [dbo].[delContacts] @xml", xmlParam).ToListAsync();

            return procResultData;
        }

        public int DeleteShareDistributeGrid(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_Share_distribute_grid] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteShareDistributeGridStep4Add(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_share_distribute_grid_step4_Add] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteShareDistributeGridStep4Ind(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_share_distribute_grid_step4_ind] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteStep3ByDirId(int? id, string companyid)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_step3By_dirId] @id, @companyid", idParam, companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteStep4Anothershareholder(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_step4_anothershareholder] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteStep4AnothershareholderAdd(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_step4_anothershareholder_Add] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int DeleteStep4AnothershareholderInd(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[delete_step4_anothershareholder_ind] @companyid", companyidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid)
        {
            int procResult;
            return DeleteDirectors(xml, cid, out procResult);
        }

        public System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DeleteDirectorsReturnModel>("EXEC @procResult = [dbo].[deleteDirectors] @xml, @cid", xmlParam, cidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DeleteDirectorsReturnModel>> DeleteDirectorsAsync(string xml, long? cid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DeleteDirectorsReturnModel>("EXEC [dbo].[deleteDirectors] @xml, @cid", xmlParam, cidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml)
        {
            int procResult;
            return Deltrust(xml, out procResult);
        }

        public System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DeltrustReturnModel>("EXEC @procResult = [dbo].[deltrust] @xml", xmlParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DeltrustReturnModel>> DeltrustAsync(string xml)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DeltrustReturnModel>("EXEC [dbo].[deltrust] @xml", xmlParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid)
        {
            int procResult;
            return Deluser(xml, uid, out procResult);
        }

        public System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DeluserReturnModel>("EXEC @procResult = [dbo].[deluser] @xml, @uid", xmlParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DeluserReturnModel>> DeluserAsync(string xml, long? uid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DeluserReturnModel>("EXEC [dbo].[deluser] @xml, @uid", xmlParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname)
        {
            int procResult;
            return GetCompanysearchByName(companyname, out procResult);
        }

        public System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname, out int procResult)
        {
            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 50 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetCompanysearchByNameReturnModel>("EXEC @procResult = [dbo].[get_companysearch_byName] @companyname", companynameParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetCompanysearchByNameReturnModel>> GetCompanysearchByNameAsync(string companyname)
        {
            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 50 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetCompanysearchByNameReturnModel>("EXEC [dbo].[get_companysearch_byName] @companyname", companynameParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement()
        {
            int procResult;
            return GetLodgement(out procResult);
        }

        public System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetLodgementReturnModel>("EXEC @procResult = [dbo].[get_lodgement] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetLodgementReturnModel>> GetLodgementAsync()
        {
            var procResultData = await Database.SqlQuery<GetLodgementReturnModel>("EXEC [dbo].[get_lodgement] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid)
        {
            int procResult;
            return GetRegistration(email, regid, out procResult);
        }

        public System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 100 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var regidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRegistrationReturnModel>("EXEC @procResult = [dbo].[get_registration] @email, @Regid", emailParam, regidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRegistrationReturnModel>> GetRegistrationAsync(string email, long? regid)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 100 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var regidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRegistrationReturnModel>("EXEC [dbo].[get_registration] @email, @Regid", emailParam, regidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid)
        {
            int procResult;
            return GetShareAllocationMainPdf(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetShareAllocationMainPdfReturnModel>("EXEC @procResult = [dbo].[get_share_allocation_MainPdf] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel>> GetShareAllocationMainPdfAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetShareAllocationMainPdfReturnModel>("EXEC [dbo].[get_share_allocation_MainPdf] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid)
        {
            int procResult;
            return GetShareDistributegrid(companyid, linkid, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var linkidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@linkid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = linkid, Size = 20 };
            if (linkidParam.Value == null)
                linkidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetShareDistributegridReturnModel>("EXEC @procResult = [dbo].[get_share_distributegrid] @companyid, @linkid", companyidParam, linkidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegridReturnModel>> GetShareDistributegridAsync(string companyid, string linkid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var linkidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@linkid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = linkid, Size = 20 };
            if (linkidParam.Value == null)
                linkidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetShareDistributegridReturnModel>("EXEC [dbo].[get_share_distributegrid] @companyid, @linkid", companyidParam, linkidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid)
        {
            int procResult;
            return GetShareDistributegrid1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetShareDistributegrid1ReturnModel>("EXEC @procResult = [dbo].[get_share_distributegrid1] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid1ReturnModel>> GetShareDistributegrid1Async(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetShareDistributegrid1ReturnModel>("EXEC [dbo].[get_share_distributegrid1] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company)
        {
            int procResult;
            return GetShareDistributegrid12(companyid, company, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var companyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = company, Size = 20 };
            if (companyParam.Value == null)
                companyParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetShareDistributegrid12ReturnModel>("EXEC @procResult = [dbo].[get_share_distributegrid12] @companyid, @company", companyidParam, companyParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid12ReturnModel>> GetShareDistributegrid12Async(string companyid, string company)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var companyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = company, Size = 20 };
            if (companyParam.Value == null)
                companyParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetShareDistributegrid12ReturnModel>("EXEC [dbo].[get_share_distributegrid12] @companyid, @company", companyidParam, companyParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid)
        {
            int procResult;
            return GetStep1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep1ReturnModel>("EXEC @procResult = [dbo].[get_step1] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1ReturnModel>> GetStep1Async(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep1ReturnModel>("EXEC [dbo].[get_step1] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid)
        {
            int procResult;
            return GetStep3(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep3ReturnModel>("EXEC @procResult = [dbo].[get_step3] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ReturnModel>> GetStep3Async(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep3ReturnModel>("EXEC [dbo].[get_step3] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid)
        {
            int procResult;
            return GetStep3ByDirId(companyid, dirid, out procResult);
        }

        public System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var diridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dirid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dirid, Size = 50 };
            if (diridParam.Value == null)
                diridParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep3ByDirIdReturnModel>("EXEC @procResult = [dbo].[get_step3By_dirId] @companyid, @dirid", companyidParam, diridParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ByDirIdReturnModel>> GetStep3ByDirIdAsync(string companyid, string dirid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var diridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dirid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dirid, Size = 50 };
            if (diridParam.Value == null)
                diridParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep3ByDirIdReturnModel>("EXEC [dbo].[get_step3By_dirId] @companyid, @dirid", companyidParam, diridParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid)
        {
            int procResult;
            return GetStep4Anothershareholder(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep4AnothershareholderReturnModel>("EXEC @procResult = [dbo].[get_step4_anothershareholder] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderReturnModel>> GetStep4AnothershareholderAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep4AnothershareholderReturnModel>("EXEC [dbo].[get_step4_anothershareholder] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid)
        {
            int procResult;
            return GetStep4Anothershareholder1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep4Anothershareholder1ReturnModel>("EXEC @procResult = [dbo].[get_step4_anothershareholder1] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel>> GetStep4Anothershareholder1Async(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep4Anothershareholder1ReturnModel>("EXEC [dbo].[get_step4_anothershareholder1] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid)
        {
            int procResult;
            return GetStep4AnothershareholderAll(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep4AnothershareholderAllReturnModel>("EXEC @procResult = [dbo].[get_step4_anothershareholderALL] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel>> GetStep4AnothershareholderAllAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep4AnothershareholderAllReturnModel>("EXEC [dbo].[get_step4_anothershareholderALL] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid)
        {
            int procResult;
            return GetUserdetailsByuid(uid, out procResult);
        }

        public System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid, out int procResult)
        {
            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = uid, Size = 50 };
            if (uidParam.Value == null)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUserdetailsByuidReturnModel>("EXEC @procResult = [dbo].[get_userdetails_byuid] @uid", uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetUserdetailsByuidReturnModel>> GetUserdetailsByuidAsync(string uid)
        {
            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = uid, Size = 50 };
            if (uidParam.Value == null)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetUserdetailsByuidReturnModel>("EXEC [dbo].[get_userdetails_byuid] @uid", uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetAdminCompanyList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAdminCompanyListReturnModel>("EXEC @procResult = [dbo].[getAdminCompanyList] @startLength, @length, @orderBy, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public GetAdminTrustListReturnModel GetAdminTrustList(int? startLength, int? length, string orderBy, string search, out int? pageCount, string subuserid)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var searchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@search", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = search, Size = 500 };
            if (searchParam.Value == null)
                searchParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var subuseridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@subuserid", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = subuserid, Size = 100 };
            if (subuseridParam.Value == null)
                subuseridParam.Value = System.DBNull.Value;

            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            var procResultData = new GetAdminTrustListReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getAdminTrustList]";
            cmd.Parameters.Add(startLengthParam);
            cmd.Parameters.Add(lengthParam);
            cmd.Parameters.Add(orderByParam);
            cmd.Parameters.Add(searchParam);
            cmd.Parameters.Add(pageCountParam);
            cmd.Parameters.Add(subuseridParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetAdminTrustListReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetAdminTrustListReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetadminUsersList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetadminUsersListReturnModel>("EXEC @procResult = [dbo].[getadminUsersList] @startLength, @length, @orderBy, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public GetBeneficiaryDetailsReturnModel GetBeneficiaryDetails(long? tId)
        {
            var tIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tId.HasValue)
                tIdParam.Value = System.DBNull.Value;


            var procResultData = new GetBeneficiaryDetailsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getBeneficiaryDetails]";
            cmd.Parameters.Add(tIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetBeneficiaryDetailsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetBeneficiaryDetailsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetBeneficiaryDetailsReturnModel> GetBeneficiaryDetailsAsync(long? tId)
        {
            var tIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tId.HasValue)
                tIdParam.Value = System.DBNull.Value;


            var procResultData = new GetBeneficiaryDetailsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getBeneficiaryDetails]";
            cmd.Parameters.Add(tIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetBeneficiaryDetailsReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetBeneficiaryDetailsReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid)
        {
            int procResult;
            return Getcompanysearchbyid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetcompanysearchbyidReturnModel>("EXEC @procResult = [dbo].[getcompanysearchbyid] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetcompanysearchbyidReturnModel>> GetcompanysearchbyidAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetcompanysearchbyidReturnModel>("EXEC [dbo].[getcompanysearchbyid] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public GetDashboardCountersReturnModel GetDashboardCounters(string subuserid, string esubuserid)
        {
            var subuseridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@subuserid", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = subuserid, Size = 100 };
            if (subuseridParam.Value == null)
                subuseridParam.Value = System.DBNull.Value;

            var esubuseridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Esubuserid", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = esubuserid, Size = 100 };
            if (esubuseridParam.Value == null)
                esubuseridParam.Value = System.DBNull.Value;


            var procResultData = new GetDashboardCountersReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetDashboardCounters]";
            cmd.Parameters.Add(subuseridParam);
            cmd.Parameters.Add(esubuseridParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel6>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet7 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel7>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet8 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel8>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetDashboardCountersReturnModel> GetDashboardCountersAsync(string subuserid, string esubuserid)
        {
            var subuseridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@subuserid", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = subuserid, Size = 100 };
            if (subuseridParam.Value == null)
                subuseridParam.Value = System.DBNull.Value;

            var esubuseridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Esubuserid", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = esubuserid, Size = 100 };
            if (esubuseridParam.Value == null)
                esubuseridParam.Value = System.DBNull.Value;


            var procResultData = new GetDashboardCountersReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetDashboardCounters]";
            cmd.Parameters.Add(subuseridParam);
            cmd.Parameters.Add(esubuseridParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel6>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet7 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel7>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet8 = objectContext.Translate<GetDashboardCountersReturnModel.ResultSetModel8>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetFullCompanyDetailReturnModel GetFullCompanyDetail(long? cid)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;


            var procResultData = new GetFullCompanyDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetFullCompanyDetail]";
            cmd.Parameters.Add(cidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel6>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet7 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel7>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetFullCompanyDetailReturnModel> GetFullCompanyDetailAsync(long? cid)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;


            var procResultData = new GetFullCompanyDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetFullCompanyDetail]";
            cmd.Parameters.Add(cidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel6>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet7 = objectContext.Translate<GetFullCompanyDetailReturnModel.ResultSetModel7>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetFullTrustDetailReturnModel GetFullTrustDetail(long? tid)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;


            var procResultData = new GetFullTrustDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetFullTrustDetail]";
            cmd.Parameters.Add(tidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel4>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetFullTrustDetailReturnModel> GetFullTrustDetailAsync(long? tid)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;


            var procResultData = new GetFullTrustDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetFullTrustDetail]";
            cmd.Parameters.Add(tidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetFullTrustDetailReturnModel.ResultSetModel4>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetPaymentDetailReturnModel GetPaymentDetail(long? id, string type)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;


            var procResultData = new GetPaymentDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetPaymentDetail]";
            cmd.Parameters.Add(idParam);
            cmd.Parameters.Add(typeParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel4>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetPaymentDetailReturnModel> GetPaymentDetailAsync(long? id, string type)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;


            var procResultData = new GetPaymentDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetPaymentDetail]";
            cmd.Parameters.Add(idParam);
            cmd.Parameters.Add(typeParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetPaymentDetailReturnModel.ResultSetModel4>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetPaymentListReturnModel GetPaymentList(int? startLength, int? length, string orderBy, int? id, out int? pageCount)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            var procResultData = new GetPaymentListReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getPaymentList]";
            cmd.Parameters.Add(startLengthParam);
            cmd.Parameters.Add(lengthParam);
            cmd.Parameters.Add(orderByParam);
            cmd.Parameters.Add(idParam);
            cmd.Parameters.Add(pageCountParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetPaymentListReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetPaymentListReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetReportReturnModel GetReport(int? time, int? uid)
        {
            var timeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@time", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = time.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!time.HasValue)
                timeParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;


            var procResultData = new GetReportReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetReport]";
            cmd.Parameters.Add(timeParam);
            cmd.Parameters.Add(uidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetReportReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetReportReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetReportReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetReportReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<GetReportReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<GetReportReturnModel.ResultSetModel6>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetReportReturnModel> GetReportAsync(int? time, int? uid)
        {
            var timeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@time", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = time.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!time.HasValue)
                timeParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;


            var procResultData = new GetReportReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetReport]";
            cmd.Parameters.Add(timeParam);
            cmd.Parameters.Add(uidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetReportReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetReportReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetReportReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetReportReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<GetReportReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<GetReportReturnModel.ResultSetModel6>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetShortCompanyDetailReturnModel GetShortCompanyDetail(long? cid)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;


            var procResultData = new GetShortCompanyDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getShortCompanyDetail]";
            cmd.Parameters.Add(cidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel6>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetShortCompanyDetailReturnModel> GetShortCompanyDetailAsync(long? cid)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;


            var procResultData = new GetShortCompanyDetailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[getShortCompanyDetail]";
            cmd.Parameters.Add(cidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<GetShortCompanyDetailReturnModel.ResultSetModel6>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid)
        {
            int procResult;
            return GetStep1Bycid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep1BycidReturnModel>("EXEC @procResult = [dbo].[getStep1_bycid] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1BycidReturnModel>> GetStep1BycidAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep1BycidReturnModel>("EXEC [dbo].[getStep1_bycid] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid)
        {
            int procResult;
            return GetStep2Bycid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid, out int procResult)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStep2BycidReturnModel>("EXEC @procResult = [dbo].[getStep2_bycid] @companyid", companyidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep2BycidReturnModel>> GetStep2BycidAsync(string companyid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStep2BycidReturnModel>("EXEC [dbo].[getStep2_bycid] @companyid", companyidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid)
        {
            int procResult;
            return GetTrustAppointer(tid, out procResult);
        }

        public System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid, out int procResult)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetTrustAppointerReturnModel>("EXEC @procResult = [dbo].[GetTrustAppointer] @tid", tidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustAppointerReturnModel>> GetTrustAppointerAsync(long? tid)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetTrustAppointerReturnModel>("EXEC [dbo].[GetTrustAppointer] @tid", tidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id)
        {
            int procResult;
            return GetTrustDetail(id, out procResult);
        }

        public System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetTrustDetailReturnModel>("EXEC @procResult = [dbo].[getTrustDetail] @id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustDetailReturnModel>> GetTrustDetailAsync(long? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetTrustDetailReturnModel>("EXEC [dbo].[getTrustDetail] @id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount)
        {
            int procResult;
            return GetUserCompanyList(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = uid, Size = 50 };
            if (uidParam.Value == null)
                uidParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUserCompanyListReturnModel>("EXEC @procResult = [dbo].[getUserCompanyList] @startLength, @length, @orderBy, @uid, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, uidParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount)
        {
            int procResult;
            return GetUserCompanyList1(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUserCompanyList1ReturnModel>("EXEC @procResult = [dbo].[getUserCompanyList1] @startLength, @length, @orderBy, @uid, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, uidParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetUsersList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUsersListReturnModel>("EXEC @procResult = [dbo].[getUsersList] @startLength, @length, @orderBy, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount)
        {
            int procResult;
            return GetUserTrustList(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult)
        {
            var startLengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@startLength", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startLength.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startLength.HasValue)
                startLengthParam.Value = System.DBNull.Value;

            var lengthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@length", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = length.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!length.HasValue)
                lengthParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@orderBy", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 50 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var pageCountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCount", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUserTrustListReturnModel>("EXEC @procResult = [dbo].[getUserTrustList] @startLength, @length, @orderBy, @uid, @PageCount OUTPUT", startLengthParam, lengthParam, orderByParam, uidParam, pageCountParam, procResultParam).ToList();
            if (IsSqlParameterNull(pageCountParam))
                pageCount = null;
            else
                pageCount = (int) pageCountParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int InsertRa55(string companyName, string acn, string companyType, string companyClass, string certificatePrintOption, string jurisdictionOfRegistration, string dateOfRegistration, string companySubclass, string accountNumber, string supplierName, string supplierAbn, string registeredAgentName, string registeredAgentAddress, string invoiceDescription, string invoiceAmmount, string documentNumber, string formCode, string taxInvoiceText, string taxCode, string taxAmmount)
        {
            var companyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyName, Size = 300 };
            if (companyNameParam.Value == null)
                companyNameParam.Value = System.DBNull.Value;

            var acnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ACN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = acn, Size = 20 };
            if (acnParam.Value == null)
                acnParam.Value = System.DBNull.Value;

            var companyTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyType, Size = 50 };
            if (companyTypeParam.Value == null)
                companyTypeParam.Value = System.DBNull.Value;

            var companyClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyClass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyClass, Size = 50 };
            if (companyClassParam.Value == null)
                companyClassParam.Value = System.DBNull.Value;

            var certificatePrintOptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CertificatePrintOption", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = certificatePrintOption, Size = 50 };
            if (certificatePrintOptionParam.Value == null)
                certificatePrintOptionParam.Value = System.DBNull.Value;

            var jurisdictionOfRegistrationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JurisdictionOfRegistration", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = jurisdictionOfRegistration, Size = 50 };
            if (jurisdictionOfRegistrationParam.Value == null)
                jurisdictionOfRegistrationParam.Value = System.DBNull.Value;

            var dateOfRegistrationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateOfRegistration", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dateOfRegistration, Size = 50 };
            if (dateOfRegistrationParam.Value == null)
                dateOfRegistrationParam.Value = System.DBNull.Value;

            var companySubclassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanySubclass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companySubclass, Size = 50 };
            if (companySubclassParam.Value == null)
                companySubclassParam.Value = System.DBNull.Value;

            var accountNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccountNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = accountNumber, Size = 50 };
            if (accountNumberParam.Value == null)
                accountNumberParam.Value = System.DBNull.Value;

            var supplierNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SupplierName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = supplierName, Size = 100 };
            if (supplierNameParam.Value == null)
                supplierNameParam.Value = System.DBNull.Value;

            var supplierAbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SupplierABN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = supplierAbn, Size = 50 };
            if (supplierAbnParam.Value == null)
                supplierAbnParam.Value = System.DBNull.Value;

            var registeredAgentNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegisteredAgentName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = registeredAgentName, Size = 100 };
            if (registeredAgentNameParam.Value == null)
                registeredAgentNameParam.Value = System.DBNull.Value;

            var registeredAgentAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegisteredAgentAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = registeredAgentAddress, Size = 500 };
            if (registeredAgentAddressParam.Value == null)
                registeredAgentAddressParam.Value = System.DBNull.Value;

            var invoiceDescriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InvoiceDescription", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = invoiceDescription, Size = 500 };
            if (invoiceDescriptionParam.Value == null)
                invoiceDescriptionParam.Value = System.DBNull.Value;

            var invoiceAmmountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InvoiceAmmount", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = invoiceAmmount, Size = 50 };
            if (invoiceAmmountParam.Value == null)
                invoiceAmmountParam.Value = System.DBNull.Value;

            var documentNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DocumentNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = documentNumber, Size = 50 };
            if (documentNumberParam.Value == null)
                documentNumberParam.Value = System.DBNull.Value;

            var formCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FormCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = formCode, Size = 20 };
            if (formCodeParam.Value == null)
                formCodeParam.Value = System.DBNull.Value;

            var taxInvoiceTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaxInvoiceText", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taxInvoiceText, Size = 30 };
            if (taxInvoiceTextParam.Value == null)
                taxInvoiceTextParam.Value = System.DBNull.Value;

            var taxCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaxCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taxCode, Size = 10 };
            if (taxCodeParam.Value == null)
                taxCodeParam.Value = System.DBNull.Value;

            var taxAmmountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TaxAmmount", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = taxAmmount, Size = 20 };
            if (taxAmmountParam.Value == null)
                taxAmmountParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_ra55] @CompanyName, @ACN, @CompanyType, @CompanyClass, @CertificatePrintOption, @JurisdictionOfRegistration, @DateOfRegistration, @CompanySubclass, @AccountNumber, @SupplierName, @SupplierABN, @RegisteredAgentName, @RegisteredAgentAddress, @InvoiceDescription, @InvoiceAmmount, @DocumentNumber, @FormCode, @TaxInvoiceText, @TaxCode, @TaxAmmount", companyNameParam, acnParam, companyTypeParam, companyClassParam, certificatePrintOptionParam, jurisdictionOfRegistrationParam, dateOfRegistrationParam, companySubclassParam, accountNumberParam, supplierNameParam, supplierAbnParam, registeredAgentNameParam, registeredAgentAddressParam, invoiceDescriptionParam, invoiceAmmountParam, documentNumberParam, formCodeParam, taxInvoiceTextParam, taxCodeParam, taxAmmountParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertShareDistributeGrid(string companyid, string shareclass, int? totalshares, decimal? unitprice, decimal? totalprice, int? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var shareclassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclass, Size = 100 };
            if (shareclassParam.Value == null)
                shareclassParam.Value = System.DBNull.Value;

            var totalsharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalshares", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = totalshares.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalshares.HasValue)
                totalsharesParam.Value = System.DBNull.Value;

            var unitpriceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unitprice", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = unitprice.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!unitprice.HasValue)
                unitpriceParam.Value = System.DBNull.Value;

            var totalpriceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalprice", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = totalprice.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!totalprice.HasValue)
                totalpriceParam.Value = System.DBNull.Value;

            var cTotalsharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalshares", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = cTotalshares.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!cTotalshares.HasValue)
                cTotalsharesParam.Value = System.DBNull.Value;

            var cAmountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_amountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cAmountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cAmountpaidpershare.HasValue)
                cAmountpaidpershareParam.Value = System.DBNull.Value;

            var cAmountremainingUnpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_amountremaining_unpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cAmountremainingUnpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cAmountremainingUnpaidpershare.HasValue)
                cAmountremainingUnpaidpershareParam.Value = System.DBNull.Value;

            var cTotalamountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalamountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cTotalamountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cTotalamountpaidpershare.HasValue)
                cTotalamountpaidpershareParam.Value = System.DBNull.Value;

            var cTotalamountunpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalamountunpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cTotalamountunpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cTotalamountunpaidpershare.HasValue)
                cTotalamountunpaidpershareParam.Value = System.DBNull.Value;

            var cSharerangeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_sharerange", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cSharerange, Size = 20 };
            if (cSharerangeParam.Value == null)
                cSharerangeParam.Value = System.DBNull.Value;

            var cCertificatenoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_certificateno", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cCertificateno, Size = 50 };
            if (cCertificatenoParam.Value == null)
                cCertificatenoParam.Value = System.DBNull.Value;

            var snoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sno", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sno, Size = 10 };
            if (snoParam.Value == null)
                snoParam.Value = System.DBNull.Value;

            var linkidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@linkid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = linkid, Size = 100 };
            if (linkidParam.Value == null)
                linkidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_Share_distribute_grid] @companyid, @shareclass, @totalshares, @unitprice, @totalprice, @c_totalshares, @c_amountpaidpershare, @c_amountremaining_unpaidpershare, @c_totalamountpaidpershare, @c_totalamountunpaidpershare, @c_sharerange, @c_certificateno, @sno, @linkid", companyidParam, shareclassParam, totalsharesParam, unitpriceParam, totalpriceParam, cTotalsharesParam, cAmountpaidpershareParam, cAmountremainingUnpaidpershareParam, cTotalamountpaidpershareParam, cTotalamountunpaidpershareParam, cSharerangeParam, cCertificatenoParam, snoParam, linkidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertShareDistributeGrid1(string companyid, string shareclass, decimal? totalshares, decimal? unitprice, decimal? totalprice, decimal? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid, string individualOrCompany)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var shareclassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclass", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclass, Size = 100 };
            if (shareclassParam.Value == null)
                shareclassParam.Value = System.DBNull.Value;

            var totalsharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalshares", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = totalshares.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!totalshares.HasValue)
                totalsharesParam.Value = System.DBNull.Value;

            var unitpriceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unitprice", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = unitprice.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!unitprice.HasValue)
                unitpriceParam.Value = System.DBNull.Value;

            var totalpriceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalprice", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = totalprice.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!totalprice.HasValue)
                totalpriceParam.Value = System.DBNull.Value;

            var cTotalsharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalshares", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cTotalshares.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cTotalshares.HasValue)
                cTotalsharesParam.Value = System.DBNull.Value;

            var cAmountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_amountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cAmountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cAmountpaidpershare.HasValue)
                cAmountpaidpershareParam.Value = System.DBNull.Value;

            var cAmountremainingUnpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_amountremaining_unpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cAmountremainingUnpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cAmountremainingUnpaidpershare.HasValue)
                cAmountremainingUnpaidpershareParam.Value = System.DBNull.Value;

            var cTotalamountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalamountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cTotalamountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cTotalamountpaidpershare.HasValue)
                cTotalamountpaidpershareParam.Value = System.DBNull.Value;

            var cTotalamountunpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_totalamountunpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = cTotalamountunpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!cTotalamountunpaidpershare.HasValue)
                cTotalamountunpaidpershareParam.Value = System.DBNull.Value;

            var cSharerangeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_sharerange", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cSharerange, Size = 20 };
            if (cSharerangeParam.Value == null)
                cSharerangeParam.Value = System.DBNull.Value;

            var cCertificatenoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@c_certificateno", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cCertificateno, Size = 50 };
            if (cCertificatenoParam.Value == null)
                cCertificatenoParam.Value = System.DBNull.Value;

            var snoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sno", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sno, Size = 10 };
            if (snoParam.Value == null)
                snoParam.Value = System.DBNull.Value;

            var linkidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@linkid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = linkid, Size = 100 };
            if (linkidParam.Value == null)
                linkidParam.Value = System.DBNull.Value;

            var individualOrCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompany, Size = 100 };
            if (individualOrCompanyParam.Value == null)
                individualOrCompanyParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_Share_distribute_grid1] @companyid, @shareclass, @totalshares, @unitprice, @totalprice, @c_totalshares, @c_amountpaidpershare, @c_amountremaining_unpaidpershare, @c_totalamountpaidpershare, @c_totalamountunpaidpershare, @c_sharerange, @c_certificateno, @sno, @linkid, @individual_or_company", companyidParam, shareclassParam, totalsharesParam, unitpriceParam, totalpriceParam, cTotalsharesParam, cAmountpaidpershareParam, cAmountremainingUnpaidpershareParam, cTotalamountpaidpershareParam, cTotalamountunpaidpershareParam, cSharerangeParam, cCertificatenoParam, snoParam, linkidParam, individualOrCompanyParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 100 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var companynameExtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname_ext", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companynameExt, Size = 50 };
            if (companynameExtParam.Value == null)
                companynameExtParam.Value = System.DBNull.Value;

            var stateterritorryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@stateterritorry", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = stateterritorry, Size = 50 };
            if (stateterritorryParam.Value == null)
                stateterritorryParam.Value = System.DBNull.Value;

            var isspecialpurposeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isspecialpurpose", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isspecialpurpose, Size = 10 };
            if (isspecialpurposeParam.Value == null)
                isspecialpurposeParam.Value = System.DBNull.Value;

            var isreservecompany410Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@isreservecompany410", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isreservecompany410, Size = 10 };
            if (isreservecompany410Param.Value == null)
                isreservecompany410Param.Value = System.DBNull.Value;

            var reservecompany410AsicnamereservationnumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@reservecompany410_asicnamereservationnumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = reservecompany410Asicnamereservationnumber, Size = 100 };
            if (reservecompany410AsicnamereservationnumberParam.Value == null)
                reservecompany410AsicnamereservationnumberParam.Value = System.DBNull.Value;

            var reservecompany410FulllegalnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@reservecompany410_fulllegalname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = reservecompany410Fulllegalname, Size = 100 };
            if (reservecompany410FulllegalnameParam.Value == null)
                reservecompany410FulllegalnameParam.Value = System.DBNull.Value;

            var isproposeidenticalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isproposeidentical", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isproposeidentical, Size = 10 };
            if (isproposeidenticalParam.Value == null)
                isproposeidenticalParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28May, Size = 10 };
            if (proposeidenticalBefore28MayParam.Value == null)
                proposeidenticalBefore28MayParam.Value = System.DBNull.Value;

            var proposeidenticalAfter28MayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_after28may", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalAfter28May, Size = 10 };
            if (proposeidenticalAfter28MayParam.Value == null)
                proposeidenticalAfter28MayParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayTotalstateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_totalstate", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayTotalstate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!proposeidenticalBefore28MayTotalstate.HasValue)
                proposeidenticalBefore28MayTotalstateParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno1", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno1, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno1Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno1Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno2, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno2Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno2Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno3Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno3", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno3, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno3Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno3Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno4Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno4", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno4, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno4Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno4Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno5Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno5", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno5, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno5Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno5Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno6Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno6", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno6, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno6Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno6Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno7Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno7", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno7, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno7Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno7Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno8Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno8", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno8, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno8Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno8Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory1", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory1, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory1Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory1Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory2, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory2Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory2Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory3Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory3", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory3, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory3Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory3Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory4Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory4", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory4, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory4Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory4Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory5Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory5", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory5, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory5Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory5Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory6Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory6", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory6, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory6Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory6Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory7Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory7", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory7, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory7Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory7Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory8Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory8", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory8, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory8Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory8Param.Value = System.DBNull.Value;

            var proposeidenticalAfter28MayAbnnumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_after28may_abnnumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalAfter28MayAbnnumber, Size = 50 };
            if (proposeidenticalAfter28MayAbnnumberParam.Value == null)
                proposeidenticalAfter28MayAbnnumberParam.Value = System.DBNull.Value;

            var isultimateholdingcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isultimateholdingcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isultimateholdingcompany, Size = 10 };
            if (isultimateholdingcompanyParam.Value == null)
                isultimateholdingcompanyParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyFulllegalnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_fulllegalname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyFulllegalname, Size = 100 };
            if (ultimateholdingcompanyFulllegalnameParam.Value == null)
                ultimateholdingcompanyFulllegalnameParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyCountry, Size = 50 };
            if (ultimateholdingcompanyCountryParam.Value == null)
                ultimateholdingcompanyCountryParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyAcnArbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_ACN_ARBN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyAcnArbn, Size = 50 };
            if (ultimateholdingcompanyAcnArbnParam.Value == null)
                ultimateholdingcompanyAcnArbnParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyAbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_ABN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyAbn, Size = 50 };
            if (ultimateholdingcompanyAbnParam.Value == null)
                ultimateholdingcompanyAbnParam.Value = System.DBNull.Value;

            var acnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = acn, Size = 50 };
            if (acnParam.Value == null)
                acnParam.Value = System.DBNull.Value;

            var typeofcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@typeofcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = typeofcompany, Size = 30 };
            if (typeofcompanyParam.Value == null)
                typeofcompanyParam.Value = System.DBNull.Value;

            var classofcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@classofcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = classofcompany, Size = 50 };
            if (classofcompanyParam.Value == null)
                classofcompanyParam.Value = System.DBNull.Value;

            var specialpurposeIfapplicableParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@specialpurpose_ifapplicable", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = specialpurposeIfapplicable, Size = 50 };
            if (specialpurposeIfapplicableParam.Value == null)
                specialpurposeIfapplicableParam.Value = System.DBNull.Value;

            var cashParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cash", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cash, Size = 30 };
            if (cashParam.Value == null)
                cashParam.Value = System.DBNull.Value;

            var writtencontactParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@writtencontact", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = writtencontact, Size = 50 };
            if (writtencontactParam.Value == null)
                writtencontactParam.Value = System.DBNull.Value;

            var orgIndvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Org_Indv", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orgIndv, Size = 50 };
            if (orgIndvParam.Value == null)
                orgIndvParam.Value = System.DBNull.Value;

            var fullOrgNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Full_org_name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fullOrgName, Size = 50 };
            if (fullOrgNameParam.Value == null)
                fullOrgNameParam.Value = System.DBNull.Value;

            var rdoSmsfYesNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@rdo_SMSF_Yes_No", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = rdoSmsfYesNo, Size = 10 };
            if (rdoSmsfYesNoParam.Value == null)
                rdoSmsfYesNoParam.Value = System.DBNull.Value;

            var proposedNameYesNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposed_Name_Yes_No", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposedNameYesNo, Size = 10 };
            if (proposedNameYesNoParam.Value == null)
                proposedNameYesNoParam.Value = System.DBNull.Value;

            var openingTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OpeningTime", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = openingTime, Size = 50 };
            if (openingTimeParam.Value == null)
                openingTimeParam.Value = System.DBNull.Value;

            var closingTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClosingTime", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = closingTime, Size = 50 };
            if (closingTimeParam.Value == null)
                closingTimeParam.Value = System.DBNull.Value;

            var isstandardHoursParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Isstandard_hours", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isstandardHours.GetValueOrDefault() };
            if (!isstandardHours.HasValue)
                isstandardHoursParam.Value = System.DBNull.Value;

            var trusteeTrustnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_trustname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeTrustname, Size = 100 };
            if (trusteeTrustnameParam.Value == null)
                trusteeTrustnameParam.Value = System.DBNull.Value;

            var trusteeAbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_abn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeAbn, Size = 30 };
            if (trusteeAbnParam.Value == null)
                trusteeAbnParam.Value = System.DBNull.Value;

            var trusteeTfnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_tfn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeTfn, Size = 50 };
            if (trusteeTfnParam.Value == null)
                trusteeTfnParam.Value = System.DBNull.Value;

            var trusteeAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeAddress, Size = 300 };
            if (trusteeAddressParam.Value == null)
                trusteeAddressParam.Value = System.DBNull.Value;

            var trusteeCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeCountry, Size = 100 };
            if (trusteeCountryParam.Value == null)
                trusteeCountryParam.Value = System.DBNull.Value;

            var companyusedforParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyusedfor", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyusedfor, Size = 100 };
            if (companyusedforParam.Value == null)
                companyusedforParam.Value = System.DBNull.Value;

            var ulimateHoldingCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ulimateHoldingCompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ulimateHoldingCompany, Size = -1 };
            if (ulimateHoldingCompanyParam.Value == null)
                ulimateHoldingCompanyParam.Value = System.DBNull.Value;

            var ucompanynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ucompanyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ucompanyname, Size = -1 };
            if (ucompanynameParam.Value == null)
                ucompanynameParam.Value = System.DBNull.Value;

            var acnarbnabnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acnarbnabn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = acnarbnabn, Size = -1 };
            if (acnarbnabnParam.Value == null)
                acnarbnabnParam.Value = System.DBNull.Value;

            var countryIcorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@countryIcor", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryIcor, Size = -1 };
            if (countryIcorParam.Value == null)
                countryIcorParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_step1] @companyid, @companyname, @companyname_ext, @stateterritorry, @isspecialpurpose, @isreservecompany410, @reservecompany410_asicnamereservationnumber, @reservecompany410_fulllegalname, @isproposeidentical, @proposeidentical_before28may, @proposeidentical_after28may, @proposeidentical_before28may_totalstate, @proposeidentical_before28may_previousbusinessno1, @proposeidentical_before28may_previousbusinessno2, @proposeidentical_before28may_previousbusinessno3, @proposeidentical_before28may_previousbusinessno4, @proposeidentical_before28may_previousbusinessno5, @proposeidentical_before28may_previousbusinessno6, @proposeidentical_before28may_previousbusinessno7, @proposeidentical_before28may_previousbusinessno8, @proposeidentical_before28may_previousstateteritory1, @proposeidentical_before28may_previousstateteritory2, @proposeidentical_before28may_previousstateteritory3, @proposeidentical_before28may_previousstateteritory4, @proposeidentical_before28may_previousstateteritory5, @proposeidentical_before28may_previousstateteritory6, @proposeidentical_before28may_previousstateteritory7, @proposeidentical_before28may_previousstateteritory8, @proposeidentical_after28may_abnnumber, @isultimateholdingcompany, @ultimateholdingcompany_fulllegalname, @ultimateholdingcompany_country, @ultimateholdingcompany_ACN_ARBN, @ultimateholdingcompany_ABN, @acn, @typeofcompany, @classofcompany, @specialpurpose_ifapplicable, @cash, @writtencontact, @Org_Indv, @Full_org_name, @rdo_SMSF_Yes_No, @proposed_Name_Yes_No, @OpeningTime, @ClosingTime, @Isstandard_hours, @trustee_trustname, @trustee_abn, @trustee_tfn, @trustee_address, @trustee_country, @companyusedfor, @ulimateHoldingCompany, @ucompanyname, @acnarbnabn, @countryIcor", companyidParam, companynameParam, companynameExtParam, stateterritorryParam, isspecialpurposeParam, isreservecompany410Param, reservecompany410AsicnamereservationnumberParam, reservecompany410FulllegalnameParam, isproposeidenticalParam, proposeidenticalBefore28MayParam, proposeidenticalAfter28MayParam, proposeidenticalBefore28MayTotalstateParam, proposeidenticalBefore28MayPreviousbusinessno1Param, proposeidenticalBefore28MayPreviousbusinessno2Param, proposeidenticalBefore28MayPreviousbusinessno3Param, proposeidenticalBefore28MayPreviousbusinessno4Param, proposeidenticalBefore28MayPreviousbusinessno5Param, proposeidenticalBefore28MayPreviousbusinessno6Param, proposeidenticalBefore28MayPreviousbusinessno7Param, proposeidenticalBefore28MayPreviousbusinessno8Param, proposeidenticalBefore28MayPreviousstateteritory1Param, proposeidenticalBefore28MayPreviousstateteritory2Param, proposeidenticalBefore28MayPreviousstateteritory3Param, proposeidenticalBefore28MayPreviousstateteritory4Param, proposeidenticalBefore28MayPreviousstateteritory5Param, proposeidenticalBefore28MayPreviousstateteritory6Param, proposeidenticalBefore28MayPreviousstateteritory7Param, proposeidenticalBefore28MayPreviousstateteritory8Param, proposeidenticalAfter28MayAbnnumberParam, isultimateholdingcompanyParam, ultimateholdingcompanyFulllegalnameParam, ultimateholdingcompanyCountryParam, ultimateholdingcompanyAcnArbnParam, ultimateholdingcompanyAbnParam, acnParam, typeofcompanyParam, classofcompanyParam, specialpurposeIfapplicableParam, cashParam, writtencontactParam, orgIndvParam, fullOrgNameParam, rdoSmsfYesNoParam, proposedNameYesNoParam, openingTimeParam, closingTimeParam, isstandardHoursParam, trusteeTrustnameParam, trusteeAbnParam, trusteeTfnParam, trusteeAddressParam, trusteeCountryParam, companyusedforParam, ulimateHoldingCompanyParam, ucompanynameParam, acnarbnabnParam, countryIcorParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var contactpersonParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@contactperson", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = contactperson, Size = 100 };
            if (contactpersonParam.Value == null)
                contactpersonParam.Value = System.DBNull.Value;

            var unitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuite, Size = 100 };
            if (unitLevelSuiteParam.Value == null)
                unitLevelSuiteParam.Value = System.DBNull.Value;

            var streetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoName, Size = 100 };
            if (streetNoNameParam.Value == null)
                streetNoNameParam.Value = System.DBNull.Value;

            var suburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCity, Size = 50 };
            if (suburbTownCityParam.Value == null)
                suburbTownCityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 50 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var postcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcode, Size = 10 };
            if (postcodeParam.Value == null)
                postcodeParam.Value = System.DBNull.Value;

            var iscompanylocatedaboveaddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@iscompanylocatedaboveaddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = iscompanylocatedaboveaddress, Size = 100 };
            if (iscompanylocatedaboveaddressParam.Value == null)
                iscompanylocatedaboveaddressParam.Value = System.DBNull.Value;

            var isprimaryaddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isprimaryaddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isprimaryaddress, Size = 10 };
            if (isprimaryaddressParam.Value == null)
                isprimaryaddressParam.Value = System.DBNull.Value;

            var contactpersonPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@contactperson_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = contactpersonPrimary, Size = 100 };
            if (contactpersonPrimaryParam.Value == null)
                contactpersonPrimaryParam.Value = System.DBNull.Value;

            var unitLevelSuitePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuitePrimary, Size = 100 };
            if (unitLevelSuitePrimaryParam.Value == null)
                unitLevelSuitePrimaryParam.Value = System.DBNull.Value;

            var streetNoNamePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoNamePrimary, Size = 100 };
            if (streetNoNamePrimaryParam.Value == null)
                streetNoNamePrimaryParam.Value = System.DBNull.Value;

            var suburbTownCityPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCityPrimary, Size = 50 };
            if (suburbTownCityPrimaryParam.Value == null)
                suburbTownCityPrimaryParam.Value = System.DBNull.Value;

            var statePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = statePrimary, Size = 50 };
            if (statePrimaryParam.Value == null)
                statePrimaryParam.Value = System.DBNull.Value;

            var postcodePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcodePrimary, Size = 10 };
            if (postcodePrimaryParam.Value == null)
                postcodePrimaryParam.Value = System.DBNull.Value;

            var occupiernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@occupiername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = occupiername, Size = 50 };
            if (occupiernameParam.Value == null)
                occupiernameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_step2] @companyid, @contactperson, @unit_level_suite, @streetNoName, @suburb_town_city, @state, @postcode, @iscompanylocatedaboveaddress, @isprimaryaddress, @contactperson_primary, @unit_level_suite_primary, @streetNoName_primary, @suburb_town_city_primary, @state_primary, @postcode_primary, @occupiername", companyidParam, contactpersonParam, unitLevelSuiteParam, streetNoNameParam, suburbTownCityParam, stateParam, postcodeParam, iscompanylocatedaboveaddressParam, isprimaryaddressParam, contactpersonPrimaryParam, unitLevelSuitePrimaryParam, streetNoNamePrimaryParam, suburbTownCityPrimaryParam, statePrimaryParam, postcodePrimaryParam, occupiernameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertStep3(string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var designationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@designation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = designation, Size = 20 };
            if (designationParam.Value == null)
                designationParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 50 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var middlenameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@middlename", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middlename, Size = 50 };
            if (middlenameParam.Value == null)
                middlenameParam.Value = System.DBNull.Value;

            var familynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@familyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = familyname, Size = 50 };
            if (familynameParam.Value == null)
                familynameParam.Value = System.DBNull.Value;

            var anyformernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@anyformername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = anyformername, Size = 10 };
            if (anyformernameParam.Value == null)
                anyformernameParam.Value = System.DBNull.Value;

            var firstnameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@firstname_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstnameFormer, Size = 50 };
            if (firstnameFormerParam.Value == null)
                firstnameFormerParam.Value = System.DBNull.Value;

            var middlenameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@middlename_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middlenameFormer, Size = 50 };
            if (middlenameFormerParam.Value == null)
                middlenameFormerParam.Value = System.DBNull.Value;

            var familynameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@familyname_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = familynameFormer, Size = 50 };
            if (familynameFormerParam.Value == null)
                familynameFormerParam.Value = System.DBNull.Value;

            var unitLevelSuitePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuitePrimary, Size = 100 };
            if (unitLevelSuitePrimaryParam.Value == null)
                unitLevelSuitePrimaryParam.Value = System.DBNull.Value;

            var streetNoNamePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoNamePrimary, Size = 100 };
            if (streetNoNamePrimaryParam.Value == null)
                streetNoNamePrimaryParam.Value = System.DBNull.Value;

            var suburbTownCityPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCityPrimary, Size = 50 };
            if (suburbTownCityPrimaryParam.Value == null)
                suburbTownCityPrimaryParam.Value = System.DBNull.Value;

            var statePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = statePrimary, Size = 50 };
            if (statePrimaryParam.Value == null)
                statePrimaryParam.Value = System.DBNull.Value;

            var postcodePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcodePrimary, Size = 10 };
            if (postcodePrimaryParam.Value == null)
                postcodePrimaryParam.Value = System.DBNull.Value;

            var countryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = country, Size = 20 };
            if (countryParam.Value == null)
                countryParam.Value = System.DBNull.Value;

            var dobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dob", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dob, Size = 20 };
            if (dobParam.Value == null)
                dobParam.Value = System.DBNull.Value;

            var placeofbirthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@placeofbirth", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = placeofbirth, Size = 50 };
            if (placeofbirthParam.Value == null)
                placeofbirthParam.Value = System.DBNull.Value;

            var countryofbirthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@countryofbirth", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryofbirth, Size = 50 };
            if (countryofbirthParam.Value == null)
                countryofbirthParam.Value = System.DBNull.Value;

            var isDirectorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsDirector", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isDirector, Size = 10 };
            if (isDirectorParam.Value == null)
                isDirectorParam.Value = System.DBNull.Value;

            var isSecretaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsSecretary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isSecretary, Size = 10 };
            if (isSecretaryParam.Value == null)
                isSecretaryParam.Value = System.DBNull.Value;

            var isPublicOfficerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsPublicOfficer", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isPublicOfficer, Size = 10 };
            if (isPublicOfficerParam.Value == null)
                isPublicOfficerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insert_step3] @companyid, @designation, @firstname, @middlename, @familyname, @anyformername, @firstname_former, @middlename_former, @familyname_former, @unit_level_suite_primary, @streetNoName_primary, @suburb_town_city_primary, @state_primary, @postcode_primary, @country, @dob, @placeofbirth, @countryofbirth, @IsDirector, @IsSecretary, @IsPublicOfficer", companyidParam, designationParam, firstnameParam, middlenameParam, familynameParam, anyformernameParam, firstnameFormerParam, middlenameFormerParam, familynameFormerParam, unitLevelSuitePrimaryParam, streetNoNamePrimaryParam, suburbTownCityPrimaryParam, statePrimaryParam, postcodePrimaryParam, countryParam, dobParam, placeofbirthParam, countryofbirthParam, isDirectorParam, isSecretaryParam, isPublicOfficerParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg)
        {
            int procResult;
            return InsertStep4Anothershareholder(step4Id, companyid, shareholderdetails, shareclasstypeValue, shareclasstypeText, noOfShares, amountpaidpershare, amountremainingunpaidpershare, isheldanotherorg, beneficialownername, individualOrCompany, individualOrCompanyName, individualOrCompanyAcn, individualOrCompanyAddress, individualOrCompanyDob, individualOrCompanyUnitLevelSuite, individualOrCompanyStreetNoName, individualOrCompanySuburbTownCity, individualOrCompanyState, individualOrCompanyPostcode, individualOrCompanyCountry, individualOrCompanyJoint, individualOrCompanyNameJoint, individualOrCompanyAcnJoint, individualOrCompanyAddressJoint, individualOrCompanyDobJoint, individualOrCompanyUnitLevelSuiteJoint, individualOrCompanyStreetNoNameJoint, individualOrCompanySuburbTownCityJoint, individualOrCompanyStateJoint, individualOrCompanyPostcodeJoint, individualOrCompanyCountryJoint, isjoint, dirid, shareoption, sharedetailsnotheldanotherorg, out procResult);
        }

        public System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg, out int procResult)
        {
            var step4IdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@step4ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = step4Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!step4Id.HasValue)
                step4IdParam.Value = System.DBNull.Value;

            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var shareholderdetailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareholderdetails", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareholderdetails, Size = 100 };
            if (shareholderdetailsParam.Value == null)
                shareholderdetailsParam.Value = System.DBNull.Value;

            var shareclasstypeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_value", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeValue, Size = 50 };
            if (shareclasstypeValueParam.Value == null)
                shareclasstypeValueParam.Value = System.DBNull.Value;

            var shareclasstypeTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_text", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeText, Size = 100 };
            if (shareclasstypeTextParam.Value == null)
                shareclasstypeTextParam.Value = System.DBNull.Value;

            var noOfSharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@no_of_shares", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = noOfShares.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!noOfShares.HasValue)
                noOfSharesParam.Value = System.DBNull.Value;

            var amountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountpaidpershare.HasValue)
                amountpaidpershareParam.Value = System.DBNull.Value;

            var amountremainingunpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountremainingunpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountremainingunpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountremainingunpaidpershare.HasValue)
                amountremainingunpaidpershareParam.Value = System.DBNull.Value;

            var isheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isheldanotherorg, Size = 10 };
            if (isheldanotherorgParam.Value == null)
                isheldanotherorgParam.Value = System.DBNull.Value;

            var beneficialownernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@beneficialownername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = beneficialownername, Size = 50 };
            if (beneficialownernameParam.Value == null)
                beneficialownernameParam.Value = System.DBNull.Value;

            var individualOrCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompany, Size = 20 };
            if (individualOrCompanyParam.Value == null)
                individualOrCompanyParam.Value = System.DBNull.Value;

            var individualOrCompanyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyName, Size = 50 };
            if (individualOrCompanyNameParam.Value == null)
                individualOrCompanyNameParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcn, Size = 50 };
            if (individualOrCompanyAcnParam.Value == null)
                individualOrCompanyAcnParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddress, Size = -1 };
            if (individualOrCompanyAddressParam.Value == null)
                individualOrCompanyAddressParam.Value = System.DBNull.Value;

            var individualOrCompanyDobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDob, Size = 20 };
            if (individualOrCompanyDobParam.Value == null)
                individualOrCompanyDobParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuite, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteParam.Value == null)
                individualOrCompanyUnitLevelSuiteParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoName, Size = 300 };
            if (individualOrCompanyStreetNoNameParam.Value == null)
                individualOrCompanyStreetNoNameParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCity, Size = 100 };
            if (individualOrCompanySuburbTownCityParam.Value == null)
                individualOrCompanySuburbTownCityParam.Value = System.DBNull.Value;

            var individualOrCompanyStateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyState, Size = 50 };
            if (individualOrCompanyStateParam.Value == null)
                individualOrCompanyStateParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcode, Size = 20 };
            if (individualOrCompanyPostcodeParam.Value == null)
                individualOrCompanyPostcodeParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountry, Size = 30 };
            if (individualOrCompanyCountryParam.Value == null)
                individualOrCompanyCountryParam.Value = System.DBNull.Value;

            var individualOrCompanyJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyJoint, Size = 20 };
            if (individualOrCompanyJointParam.Value == null)
                individualOrCompanyJointParam.Value = System.DBNull.Value;

            var individualOrCompanyNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyNameJoint, Size = 50 };
            if (individualOrCompanyNameJointParam.Value == null)
                individualOrCompanyNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcnJoint, Size = 50 };
            if (individualOrCompanyAcnJointParam.Value == null)
                individualOrCompanyAcnJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddressJoint, Size = -1 };
            if (individualOrCompanyAddressJointParam.Value == null)
                individualOrCompanyAddressJointParam.Value = System.DBNull.Value;

            var individualOrCompanyDobJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDobJoint, Size = 20 };
            if (individualOrCompanyDobJointParam.Value == null)
                individualOrCompanyDobJointParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuiteJoint, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteJointParam.Value == null)
                individualOrCompanyUnitLevelSuiteJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoNameJoint, Size = 300 };
            if (individualOrCompanyStreetNoNameJointParam.Value == null)
                individualOrCompanyStreetNoNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCityJoint, Size = 100 };
            if (individualOrCompanySuburbTownCityJointParam.Value == null)
                individualOrCompanySuburbTownCityJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStateJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStateJoint, Size = 50 };
            if (individualOrCompanyStateJointParam.Value == null)
                individualOrCompanyStateJointParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcodeJoint, Size = 20 };
            if (individualOrCompanyPostcodeJointParam.Value == null)
                individualOrCompanyPostcodeJointParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country_Joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountryJoint, Size = 30 };
            if (individualOrCompanyCountryJointParam.Value == null)
                individualOrCompanyCountryJointParam.Value = System.DBNull.Value;

            var isjointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ISJOINT", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isjoint, Size = 10 };
            if (isjointParam.Value == null)
                isjointParam.Value = System.DBNull.Value;

            var diridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dirid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dirid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dirid.HasValue)
                diridParam.Value = System.DBNull.Value;

            var shareoptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareoption", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareoption, Size = 50 };
            if (shareoptionParam.Value == null)
                shareoptionParam.Value = System.DBNull.Value;

            var sharedetailsnotheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sharedetailsnotheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sharedetailsnotheldanotherorg, Size = 250 };
            if (sharedetailsnotheldanotherorgParam.Value == null)
                sharedetailsnotheldanotherorgParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<InsertStep4AnothershareholderReturnModel>("EXEC @procResult = [dbo].[insert_step4_anothershareholder] @step4ID, @companyid, @shareholderdetails, @shareclasstype_value, @shareclasstype_text, @no_of_shares, @amountpaidpershare, @amountremainingunpaidpershare, @isheldanotherorg, @beneficialownername, @individual_or_company, @individual_or_company_name, @individual_or_company_acn, @individual_or_company_address, @individual_or_company_dob, @individual_or_company_unit_level_suite, @individual_or_company_streetNoName, @individual_or_company_suburb_town_city, @individual_or_company_state, @individual_or_company_postcode, @individual_or_company_country, @individual_or_company_joint, @individual_or_company_name_joint, @individual_or_company_acn_joint, @individual_or_company_address_joint, @individual_or_company_dob_joint, @individual_or_company_unit_level_suite_joint, @individual_or_company_streetNoName_joint, @individual_or_company_suburb_town_city_joint, @individual_or_company_state_joint, @individual_or_company_postcode_joint, @individual_or_company_country_Joint, @ISJOINT, @dirid, @shareoption, @sharedetailsnotheldanotherorg", step4IdParam, companyidParam, shareholderdetailsParam, shareclasstypeValueParam, shareclasstypeTextParam, noOfSharesParam, amountpaidpershareParam, amountremainingunpaidpershareParam, isheldanotherorgParam, beneficialownernameParam, individualOrCompanyParam, individualOrCompanyNameParam, individualOrCompanyAcnParam, individualOrCompanyAddressParam, individualOrCompanyDobParam, individualOrCompanyUnitLevelSuiteParam, individualOrCompanyStreetNoNameParam, individualOrCompanySuburbTownCityParam, individualOrCompanyStateParam, individualOrCompanyPostcodeParam, individualOrCompanyCountryParam, individualOrCompanyJointParam, individualOrCompanyNameJointParam, individualOrCompanyAcnJointParam, individualOrCompanyAddressJointParam, individualOrCompanyDobJointParam, individualOrCompanyUnitLevelSuiteJointParam, individualOrCompanyStreetNoNameJointParam, individualOrCompanySuburbTownCityJointParam, individualOrCompanyStateJointParam, individualOrCompanyPostcodeJointParam, individualOrCompanyCountryJointParam, isjointParam, diridParam, shareoptionParam, sharedetailsnotheldanotherorgParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel>> InsertStep4AnothershareholderAsync(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg)
        {
            var step4IdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@step4ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = step4Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!step4Id.HasValue)
                step4IdParam.Value = System.DBNull.Value;

            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var shareholderdetailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareholderdetails", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareholderdetails, Size = 100 };
            if (shareholderdetailsParam.Value == null)
                shareholderdetailsParam.Value = System.DBNull.Value;

            var shareclasstypeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_value", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeValue, Size = 50 };
            if (shareclasstypeValueParam.Value == null)
                shareclasstypeValueParam.Value = System.DBNull.Value;

            var shareclasstypeTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_text", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeText, Size = 100 };
            if (shareclasstypeTextParam.Value == null)
                shareclasstypeTextParam.Value = System.DBNull.Value;

            var noOfSharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@no_of_shares", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = noOfShares.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!noOfShares.HasValue)
                noOfSharesParam.Value = System.DBNull.Value;

            var amountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountpaidpershare.HasValue)
                amountpaidpershareParam.Value = System.DBNull.Value;

            var amountremainingunpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountremainingunpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountremainingunpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountremainingunpaidpershare.HasValue)
                amountremainingunpaidpershareParam.Value = System.DBNull.Value;

            var isheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isheldanotherorg, Size = 10 };
            if (isheldanotherorgParam.Value == null)
                isheldanotherorgParam.Value = System.DBNull.Value;

            var beneficialownernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@beneficialownername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = beneficialownername, Size = 50 };
            if (beneficialownernameParam.Value == null)
                beneficialownernameParam.Value = System.DBNull.Value;

            var individualOrCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompany, Size = 20 };
            if (individualOrCompanyParam.Value == null)
                individualOrCompanyParam.Value = System.DBNull.Value;

            var individualOrCompanyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyName, Size = 50 };
            if (individualOrCompanyNameParam.Value == null)
                individualOrCompanyNameParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcn, Size = 50 };
            if (individualOrCompanyAcnParam.Value == null)
                individualOrCompanyAcnParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddress, Size = -1 };
            if (individualOrCompanyAddressParam.Value == null)
                individualOrCompanyAddressParam.Value = System.DBNull.Value;

            var individualOrCompanyDobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDob, Size = 20 };
            if (individualOrCompanyDobParam.Value == null)
                individualOrCompanyDobParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuite, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteParam.Value == null)
                individualOrCompanyUnitLevelSuiteParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoName, Size = 300 };
            if (individualOrCompanyStreetNoNameParam.Value == null)
                individualOrCompanyStreetNoNameParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCity, Size = 100 };
            if (individualOrCompanySuburbTownCityParam.Value == null)
                individualOrCompanySuburbTownCityParam.Value = System.DBNull.Value;

            var individualOrCompanyStateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyState, Size = 50 };
            if (individualOrCompanyStateParam.Value == null)
                individualOrCompanyStateParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcode, Size = 20 };
            if (individualOrCompanyPostcodeParam.Value == null)
                individualOrCompanyPostcodeParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountry, Size = 30 };
            if (individualOrCompanyCountryParam.Value == null)
                individualOrCompanyCountryParam.Value = System.DBNull.Value;

            var individualOrCompanyJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyJoint, Size = 20 };
            if (individualOrCompanyJointParam.Value == null)
                individualOrCompanyJointParam.Value = System.DBNull.Value;

            var individualOrCompanyNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyNameJoint, Size = 50 };
            if (individualOrCompanyNameJointParam.Value == null)
                individualOrCompanyNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcnJoint, Size = 50 };
            if (individualOrCompanyAcnJointParam.Value == null)
                individualOrCompanyAcnJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddressJoint, Size = -1 };
            if (individualOrCompanyAddressJointParam.Value == null)
                individualOrCompanyAddressJointParam.Value = System.DBNull.Value;

            var individualOrCompanyDobJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDobJoint, Size = 20 };
            if (individualOrCompanyDobJointParam.Value == null)
                individualOrCompanyDobJointParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuiteJoint, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteJointParam.Value == null)
                individualOrCompanyUnitLevelSuiteJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoNameJoint, Size = 300 };
            if (individualOrCompanyStreetNoNameJointParam.Value == null)
                individualOrCompanyStreetNoNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCityJoint, Size = 100 };
            if (individualOrCompanySuburbTownCityJointParam.Value == null)
                individualOrCompanySuburbTownCityJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStateJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStateJoint, Size = 50 };
            if (individualOrCompanyStateJointParam.Value == null)
                individualOrCompanyStateJointParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcodeJoint, Size = 20 };
            if (individualOrCompanyPostcodeJointParam.Value == null)
                individualOrCompanyPostcodeJointParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country_Joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountryJoint, Size = 30 };
            if (individualOrCompanyCountryJointParam.Value == null)
                individualOrCompanyCountryJointParam.Value = System.DBNull.Value;

            var isjointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ISJOINT", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isjoint, Size = 10 };
            if (isjointParam.Value == null)
                isjointParam.Value = System.DBNull.Value;

            var diridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dirid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dirid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dirid.HasValue)
                diridParam.Value = System.DBNull.Value;

            var shareoptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareoption", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareoption, Size = 50 };
            if (shareoptionParam.Value == null)
                shareoptionParam.Value = System.DBNull.Value;

            var sharedetailsnotheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sharedetailsnotheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sharedetailsnotheldanotherorg, Size = 250 };
            if (sharedetailsnotheldanotherorgParam.Value == null)
                sharedetailsnotheldanotherorgParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<InsertStep4AnothershareholderReturnModel>("EXEC [dbo].[insert_step4_anothershareholder] @step4ID, @companyid, @shareholderdetails, @shareclasstype_value, @shareclasstype_text, @no_of_shares, @amountpaidpershare, @amountremainingunpaidpershare, @isheldanotherorg, @beneficialownername, @individual_or_company, @individual_or_company_name, @individual_or_company_acn, @individual_or_company_address, @individual_or_company_dob, @individual_or_company_unit_level_suite, @individual_or_company_streetNoName, @individual_or_company_suburb_town_city, @individual_or_company_state, @individual_or_company_postcode, @individual_or_company_country, @individual_or_company_joint, @individual_or_company_name_joint, @individual_or_company_acn_joint, @individual_or_company_address_joint, @individual_or_company_dob_joint, @individual_or_company_unit_level_suite_joint, @individual_or_company_streetNoName_joint, @individual_or_company_suburb_town_city_joint, @individual_or_company_state_joint, @individual_or_company_postcode_joint, @individual_or_company_country_Joint, @ISJOINT, @dirid, @shareoption, @sharedetailsnotheldanotherorg", step4IdParam, companyidParam, shareholderdetailsParam, shareclasstypeValueParam, shareclasstypeTextParam, noOfSharesParam, amountpaidpershareParam, amountremainingunpaidpershareParam, isheldanotherorgParam, beneficialownernameParam, individualOrCompanyParam, individualOrCompanyNameParam, individualOrCompanyAcnParam, individualOrCompanyAddressParam, individualOrCompanyDobParam, individualOrCompanyUnitLevelSuiteParam, individualOrCompanyStreetNoNameParam, individualOrCompanySuburbTownCityParam, individualOrCompanyStateParam, individualOrCompanyPostcodeParam, individualOrCompanyCountryParam, individualOrCompanyJointParam, individualOrCompanyNameJointParam, individualOrCompanyAcnJointParam, individualOrCompanyAddressJointParam, individualOrCompanyDobJointParam, individualOrCompanyUnitLevelSuiteJointParam, individualOrCompanyStreetNoNameJointParam, individualOrCompanySuburbTownCityJointParam, individualOrCompanyStateJointParam, individualOrCompanyPostcodeJointParam, individualOrCompanyCountryJointParam, isjointParam, diridParam, shareoptionParam, sharedetailsnotheldanotherorgParam).ToListAsync();

            return procResultData;
        }

        public int InsertLbLmsg(string companyid, string sms)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 200 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var smsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sms", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = sms, Size = -1 };
            if (smsParam.Value == null)
                smsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[insertLBLmsg] @companyid, @sms", companyidParam, smsParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid)
        {
            int procResult;
            return SaveOptions(xml, uid, out procResult);
        }

        public System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SaveOptionsReturnModel>("EXEC @procResult = [dbo].[saveOptions] @xml, @uid", xmlParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SaveOptionsReturnModel>> SaveOptionsAsync(string xml, long? uid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SaveOptionsReturnModel>("EXEC [dbo].[saveOptions] @xml, @uid", xmlParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email)
        {
            int procResult;
            return SpGetProfile(email, out procResult);
        }

        public System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 100 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetProfileReturnModel>("EXEC @procResult = [dbo].[sp_get_Profile] @Email", emailParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetProfileReturnModel>> SpGetProfileAsync(string email)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 100 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetProfileReturnModel>("EXEC [dbo].[sp_get_Profile] @Email", emailParam).ToListAsync();

            return procResultData;
        }

        public SpInsertCompanysearchReturnModel SpInsertCompanysearch(string userid, string companyname, long? regid)
        {
            var useridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userid, Size = 50 };
            if (useridParam.Value == null)
                useridParam.Value = System.DBNull.Value;

            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 50 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var regidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = System.DBNull.Value;


            var procResultData = new SpInsertCompanysearchReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[sp_insert_companysearch]";
            cmd.Parameters.Add(useridParam);
            cmd.Parameters.Add(companynameParam);
            cmd.Parameters.Add(regidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpInsertCompanysearchReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<SpInsertCompanysearchReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<SpInsertCompanysearchReturnModel> SpInsertCompanysearchAsync(string userid, string companyname, long? regid)
        {
            var useridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userid, Size = 50 };
            if (useridParam.Value == null)
                useridParam.Value = System.DBNull.Value;

            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 50 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var regidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = System.DBNull.Value;


            var procResultData = new SpInsertCompanysearchReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[sp_insert_companysearch]";
            cmd.Parameters.Add(useridParam);
            cmd.Parameters.Add(companynameParam);
            cmd.Parameters.Add(regidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpInsertCompanysearchReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<SpInsertCompanysearchReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact()
        {
            int procResult;
            return UnreadContact(out procResult);
        }

        public System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UnreadContactReturnModel>("EXEC @procResult = [dbo].[unreadContact] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UnreadContactReturnModel>> UnreadContactAsync()
        {
            var procResultData = await Database.SqlQuery<UnreadContactReturnModel>("EXEC [dbo].[unreadContact] ").ToListAsync();

            return procResultData;
        }

        public int UpdateStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var companynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyname, Size = 100 };
            if (companynameParam.Value == null)
                companynameParam.Value = System.DBNull.Value;

            var companynameExtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyname_ext", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companynameExt, Size = 50 };
            if (companynameExtParam.Value == null)
                companynameExtParam.Value = System.DBNull.Value;

            var stateterritorryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@stateterritorry", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = stateterritorry, Size = 50 };
            if (stateterritorryParam.Value == null)
                stateterritorryParam.Value = System.DBNull.Value;

            var isspecialpurposeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isspecialpurpose", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isspecialpurpose, Size = 10 };
            if (isspecialpurposeParam.Value == null)
                isspecialpurposeParam.Value = System.DBNull.Value;

            var isreservecompany410Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@isreservecompany410", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isreservecompany410, Size = 10 };
            if (isreservecompany410Param.Value == null)
                isreservecompany410Param.Value = System.DBNull.Value;

            var reservecompany410AsicnamereservationnumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@reservecompany410_asicnamereservationnumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = reservecompany410Asicnamereservationnumber, Size = 100 };
            if (reservecompany410AsicnamereservationnumberParam.Value == null)
                reservecompany410AsicnamereservationnumberParam.Value = System.DBNull.Value;

            var reservecompany410FulllegalnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@reservecompany410_fulllegalname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = reservecompany410Fulllegalname, Size = 100 };
            if (reservecompany410FulllegalnameParam.Value == null)
                reservecompany410FulllegalnameParam.Value = System.DBNull.Value;

            var isproposeidenticalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isproposeidentical", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isproposeidentical, Size = 10 };
            if (isproposeidenticalParam.Value == null)
                isproposeidenticalParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28May, Size = 10 };
            if (proposeidenticalBefore28MayParam.Value == null)
                proposeidenticalBefore28MayParam.Value = System.DBNull.Value;

            var proposeidenticalAfter28MayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_after28may", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalAfter28May, Size = 10 };
            if (proposeidenticalAfter28MayParam.Value == null)
                proposeidenticalAfter28MayParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayTotalstateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_totalstate", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayTotalstate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!proposeidenticalBefore28MayTotalstate.HasValue)
                proposeidenticalBefore28MayTotalstateParam.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno1", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno1, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno1Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno1Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno2, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno2Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno2Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno3Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno3", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno3, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno3Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno3Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno4Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno4", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno4, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno4Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno4Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno5Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno5", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno5, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno5Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno5Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno6Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno6", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno6, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno6Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno6Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno7Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno7", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno7, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno7Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno7Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousbusinessno8Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousbusinessno8", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousbusinessno8, Size = 50 };
            if (proposeidenticalBefore28MayPreviousbusinessno8Param.Value == null)
                proposeidenticalBefore28MayPreviousbusinessno8Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory1", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory1, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory1Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory1Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory2, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory2Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory2Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory3Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory3", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory3, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory3Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory3Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory4Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory4", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory4, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory4Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory4Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory5Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory5", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory5, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory5Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory5Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory6Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory6", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory6, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory6Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory6Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory7Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory7", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory7, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory7Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory7Param.Value = System.DBNull.Value;

            var proposeidenticalBefore28MayPreviousstateteritory8Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_before28may_previousstateteritory8", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalBefore28MayPreviousstateteritory8, Size = 50 };
            if (proposeidenticalBefore28MayPreviousstateteritory8Param.Value == null)
                proposeidenticalBefore28MayPreviousstateteritory8Param.Value = System.DBNull.Value;

            var proposeidenticalAfter28MayAbnnumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposeidentical_after28may_abnnumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposeidenticalAfter28MayAbnnumber, Size = 50 };
            if (proposeidenticalAfter28MayAbnnumberParam.Value == null)
                proposeidenticalAfter28MayAbnnumberParam.Value = System.DBNull.Value;

            var isultimateholdingcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isultimateholdingcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isultimateholdingcompany, Size = 10 };
            if (isultimateholdingcompanyParam.Value == null)
                isultimateholdingcompanyParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyFulllegalnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_fulllegalname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyFulllegalname, Size = 100 };
            if (ultimateholdingcompanyFulllegalnameParam.Value == null)
                ultimateholdingcompanyFulllegalnameParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyCountry, Size = 50 };
            if (ultimateholdingcompanyCountryParam.Value == null)
                ultimateholdingcompanyCountryParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyAcnArbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_ACN_ARBN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyAcnArbn, Size = 50 };
            if (ultimateholdingcompanyAcnArbnParam.Value == null)
                ultimateholdingcompanyAcnArbnParam.Value = System.DBNull.Value;

            var ultimateholdingcompanyAbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ultimateholdingcompany_ABN", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ultimateholdingcompanyAbn, Size = 50 };
            if (ultimateholdingcompanyAbnParam.Value == null)
                ultimateholdingcompanyAbnParam.Value = System.DBNull.Value;

            var acnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = acn, Size = 50 };
            if (acnParam.Value == null)
                acnParam.Value = System.DBNull.Value;

            var typeofcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@typeofcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = typeofcompany, Size = 30 };
            if (typeofcompanyParam.Value == null)
                typeofcompanyParam.Value = System.DBNull.Value;

            var classofcompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@classofcompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = classofcompany, Size = 50 };
            if (classofcompanyParam.Value == null)
                classofcompanyParam.Value = System.DBNull.Value;

            var specialpurposeIfapplicableParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@specialpurpose_ifapplicable", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = specialpurposeIfapplicable, Size = 50 };
            if (specialpurposeIfapplicableParam.Value == null)
                specialpurposeIfapplicableParam.Value = System.DBNull.Value;

            var cashParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cash", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = cash, Size = 30 };
            if (cashParam.Value == null)
                cashParam.Value = System.DBNull.Value;

            var writtencontactParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@writtencontact", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = writtencontact, Size = 50 };
            if (writtencontactParam.Value == null)
                writtencontactParam.Value = System.DBNull.Value;

            var orgIndvParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Org_Indv", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orgIndv, Size = 50 };
            if (orgIndvParam.Value == null)
                orgIndvParam.Value = System.DBNull.Value;

            var fullOrgNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Full_org_name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fullOrgName, Size = 50 };
            if (fullOrgNameParam.Value == null)
                fullOrgNameParam.Value = System.DBNull.Value;

            var rdoSmsfYesNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@rdo_SMSF_Yes_No", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = rdoSmsfYesNo, Size = 10 };
            if (rdoSmsfYesNoParam.Value == null)
                rdoSmsfYesNoParam.Value = System.DBNull.Value;

            var proposedNameYesNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@proposed_Name_Yes_No", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = proposedNameYesNo, Size = 10 };
            if (proposedNameYesNoParam.Value == null)
                proposedNameYesNoParam.Value = System.DBNull.Value;

            var openingTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OpeningTime", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = openingTime, Size = 50 };
            if (openingTimeParam.Value == null)
                openingTimeParam.Value = System.DBNull.Value;

            var closingTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClosingTime", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = closingTime, Size = 50 };
            if (closingTimeParam.Value == null)
                closingTimeParam.Value = System.DBNull.Value;

            var isstandardHoursParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Isstandard_hours", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isstandardHours.GetValueOrDefault() };
            if (!isstandardHours.HasValue)
                isstandardHoursParam.Value = System.DBNull.Value;

            var trusteeTrustnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_trustname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeTrustname, Size = 100 };
            if (trusteeTrustnameParam.Value == null)
                trusteeTrustnameParam.Value = System.DBNull.Value;

            var trusteeAbnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_abn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeAbn, Size = 30 };
            if (trusteeAbnParam.Value == null)
                trusteeAbnParam.Value = System.DBNull.Value;

            var trusteeTfnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_tfn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeTfn, Size = 50 };
            if (trusteeTfnParam.Value == null)
                trusteeTfnParam.Value = System.DBNull.Value;

            var trusteeAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeAddress, Size = 300 };
            if (trusteeAddressParam.Value == null)
                trusteeAddressParam.Value = System.DBNull.Value;

            var trusteeCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@trustee_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = trusteeCountry, Size = 100 };
            if (trusteeCountryParam.Value == null)
                trusteeCountryParam.Value = System.DBNull.Value;

            var companyusedforParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyusedfor", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyusedfor, Size = 100 };
            if (companyusedforParam.Value == null)
                companyusedforParam.Value = System.DBNull.Value;

            var ulimateHoldingCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ulimateHoldingCompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ulimateHoldingCompany, Size = -1 };
            if (ulimateHoldingCompanyParam.Value == null)
                ulimateHoldingCompanyParam.Value = System.DBNull.Value;

            var ucompanynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ucompanyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ucompanyname, Size = -1 };
            if (ucompanynameParam.Value == null)
                ucompanynameParam.Value = System.DBNull.Value;

            var acnarbnabnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acnarbnabn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = acnarbnabn, Size = -1 };
            if (acnarbnabnParam.Value == null)
                acnarbnabnParam.Value = System.DBNull.Value;

            var countryIcorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@countryIcor", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryIcor, Size = -1 };
            if (countryIcorParam.Value == null)
                countryIcorParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[update_step1] @companyid, @companyname, @companyname_ext, @stateterritorry, @isspecialpurpose, @isreservecompany410, @reservecompany410_asicnamereservationnumber, @reservecompany410_fulllegalname, @isproposeidentical, @proposeidentical_before28may, @proposeidentical_after28may, @proposeidentical_before28may_totalstate, @proposeidentical_before28may_previousbusinessno1, @proposeidentical_before28may_previousbusinessno2, @proposeidentical_before28may_previousbusinessno3, @proposeidentical_before28may_previousbusinessno4, @proposeidentical_before28may_previousbusinessno5, @proposeidentical_before28may_previousbusinessno6, @proposeidentical_before28may_previousbusinessno7, @proposeidentical_before28may_previousbusinessno8, @proposeidentical_before28may_previousstateteritory1, @proposeidentical_before28may_previousstateteritory2, @proposeidentical_before28may_previousstateteritory3, @proposeidentical_before28may_previousstateteritory4, @proposeidentical_before28may_previousstateteritory5, @proposeidentical_before28may_previousstateteritory6, @proposeidentical_before28may_previousstateteritory7, @proposeidentical_before28may_previousstateteritory8, @proposeidentical_after28may_abnnumber, @isultimateholdingcompany, @ultimateholdingcompany_fulllegalname, @ultimateholdingcompany_country, @ultimateholdingcompany_ACN_ARBN, @ultimateholdingcompany_ABN, @acn, @typeofcompany, @classofcompany, @specialpurpose_ifapplicable, @cash, @writtencontact, @Org_Indv, @Full_org_name, @rdo_SMSF_Yes_No, @proposed_Name_Yes_No, @OpeningTime, @ClosingTime, @Isstandard_hours, @trustee_trustname, @trustee_abn, @trustee_tfn, @trustee_address, @trustee_country, @companyusedfor, @ulimateHoldingCompany, @ucompanyname, @acnarbnabn, @countryIcor", companyidParam, companynameParam, companynameExtParam, stateterritorryParam, isspecialpurposeParam, isreservecompany410Param, reservecompany410AsicnamereservationnumberParam, reservecompany410FulllegalnameParam, isproposeidenticalParam, proposeidenticalBefore28MayParam, proposeidenticalAfter28MayParam, proposeidenticalBefore28MayTotalstateParam, proposeidenticalBefore28MayPreviousbusinessno1Param, proposeidenticalBefore28MayPreviousbusinessno2Param, proposeidenticalBefore28MayPreviousbusinessno3Param, proposeidenticalBefore28MayPreviousbusinessno4Param, proposeidenticalBefore28MayPreviousbusinessno5Param, proposeidenticalBefore28MayPreviousbusinessno6Param, proposeidenticalBefore28MayPreviousbusinessno7Param, proposeidenticalBefore28MayPreviousbusinessno8Param, proposeidenticalBefore28MayPreviousstateteritory1Param, proposeidenticalBefore28MayPreviousstateteritory2Param, proposeidenticalBefore28MayPreviousstateteritory3Param, proposeidenticalBefore28MayPreviousstateteritory4Param, proposeidenticalBefore28MayPreviousstateteritory5Param, proposeidenticalBefore28MayPreviousstateteritory6Param, proposeidenticalBefore28MayPreviousstateteritory7Param, proposeidenticalBefore28MayPreviousstateteritory8Param, proposeidenticalAfter28MayAbnnumberParam, isultimateholdingcompanyParam, ultimateholdingcompanyFulllegalnameParam, ultimateholdingcompanyCountryParam, ultimateholdingcompanyAcnArbnParam, ultimateholdingcompanyAbnParam, acnParam, typeofcompanyParam, classofcompanyParam, specialpurposeIfapplicableParam, cashParam, writtencontactParam, orgIndvParam, fullOrgNameParam, rdoSmsfYesNoParam, proposedNameYesNoParam, openingTimeParam, closingTimeParam, isstandardHoursParam, trusteeTrustnameParam, trusteeAbnParam, trusteeTfnParam, trusteeAddressParam, trusteeCountryParam, companyusedforParam, ulimateHoldingCompanyParam, ucompanynameParam, acnarbnabnParam, countryIcorParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UpdateStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername)
        {
            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var contactpersonParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@contactperson", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = contactperson, Size = 100 };
            if (contactpersonParam.Value == null)
                contactpersonParam.Value = System.DBNull.Value;

            var unitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuite, Size = 100 };
            if (unitLevelSuiteParam.Value == null)
                unitLevelSuiteParam.Value = System.DBNull.Value;

            var streetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoName, Size = 100 };
            if (streetNoNameParam.Value == null)
                streetNoNameParam.Value = System.DBNull.Value;

            var suburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCity, Size = 50 };
            if (suburbTownCityParam.Value == null)
                suburbTownCityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 50 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var postcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcode, Size = 10 };
            if (postcodeParam.Value == null)
                postcodeParam.Value = System.DBNull.Value;

            var iscompanylocatedaboveaddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@iscompanylocatedaboveaddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = iscompanylocatedaboveaddress, Size = 100 };
            if (iscompanylocatedaboveaddressParam.Value == null)
                iscompanylocatedaboveaddressParam.Value = System.DBNull.Value;

            var isprimaryaddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isprimaryaddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isprimaryaddress, Size = 10 };
            if (isprimaryaddressParam.Value == null)
                isprimaryaddressParam.Value = System.DBNull.Value;

            var contactpersonPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@contactperson_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = contactpersonPrimary, Size = 100 };
            if (contactpersonPrimaryParam.Value == null)
                contactpersonPrimaryParam.Value = System.DBNull.Value;

            var unitLevelSuitePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuitePrimary, Size = 100 };
            if (unitLevelSuitePrimaryParam.Value == null)
                unitLevelSuitePrimaryParam.Value = System.DBNull.Value;

            var streetNoNamePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoNamePrimary, Size = 100 };
            if (streetNoNamePrimaryParam.Value == null)
                streetNoNamePrimaryParam.Value = System.DBNull.Value;

            var suburbTownCityPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCityPrimary, Size = 50 };
            if (suburbTownCityPrimaryParam.Value == null)
                suburbTownCityPrimaryParam.Value = System.DBNull.Value;

            var statePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = statePrimary, Size = 50 };
            if (statePrimaryParam.Value == null)
                statePrimaryParam.Value = System.DBNull.Value;

            var postcodePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcodePrimary, Size = 10 };
            if (postcodePrimaryParam.Value == null)
                postcodePrimaryParam.Value = System.DBNull.Value;

            var occupiernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@occupiername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = occupiername, Size = 50 };
            if (occupiernameParam.Value == null)
                occupiernameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[update_step2] @companyid, @contactperson, @unit_level_suite, @streetNoName, @suburb_town_city, @state, @postcode, @iscompanylocatedaboveaddress, @isprimaryaddress, @contactperson_primary, @unit_level_suite_primary, @streetNoName_primary, @suburb_town_city_primary, @state_primary, @postcode_primary, @occupiername", companyidParam, contactpersonParam, unitLevelSuiteParam, streetNoNameParam, suburbTownCityParam, stateParam, postcodeParam, iscompanylocatedaboveaddressParam, isprimaryaddressParam, contactpersonPrimaryParam, unitLevelSuitePrimaryParam, streetNoNamePrimaryParam, suburbTownCityPrimaryParam, statePrimaryParam, postcodePrimaryParam, occupiernameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UpdateStep3(int? id, string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var designationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@designation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = designation, Size = 20 };
            if (designationParam.Value == null)
                designationParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 50 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var middlenameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@middlename", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middlename, Size = 50 };
            if (middlenameParam.Value == null)
                middlenameParam.Value = System.DBNull.Value;

            var familynameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@familyname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = familyname, Size = 50 };
            if (familynameParam.Value == null)
                familynameParam.Value = System.DBNull.Value;

            var anyformernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@anyformername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = anyformername, Size = 10 };
            if (anyformernameParam.Value == null)
                anyformernameParam.Value = System.DBNull.Value;

            var firstnameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@firstname_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstnameFormer, Size = 50 };
            if (firstnameFormerParam.Value == null)
                firstnameFormerParam.Value = System.DBNull.Value;

            var middlenameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@middlename_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = middlenameFormer, Size = 50 };
            if (middlenameFormerParam.Value == null)
                middlenameFormerParam.Value = System.DBNull.Value;

            var familynameFormerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@familyname_former", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = familynameFormer, Size = 50 };
            if (familynameFormerParam.Value == null)
                familynameFormerParam.Value = System.DBNull.Value;

            var unitLevelSuitePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unit_level_suite_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = unitLevelSuitePrimary, Size = 100 };
            if (unitLevelSuitePrimaryParam.Value == null)
                unitLevelSuitePrimaryParam.Value = System.DBNull.Value;

            var streetNoNamePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@streetNoName_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = streetNoNamePrimary, Size = 100 };
            if (streetNoNamePrimaryParam.Value == null)
                streetNoNamePrimaryParam.Value = System.DBNull.Value;

            var suburbTownCityPrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@suburb_town_city_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = suburbTownCityPrimary, Size = 50 };
            if (suburbTownCityPrimaryParam.Value == null)
                suburbTownCityPrimaryParam.Value = System.DBNull.Value;

            var statePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@state_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = statePrimary, Size = 50 };
            if (statePrimaryParam.Value == null)
                statePrimaryParam.Value = System.DBNull.Value;

            var postcodePrimaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@postcode_primary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = postcodePrimary, Size = 10 };
            if (postcodePrimaryParam.Value == null)
                postcodePrimaryParam.Value = System.DBNull.Value;

            var countryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = country, Size = 20 };
            if (countryParam.Value == null)
                countryParam.Value = System.DBNull.Value;

            var dobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dob", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dob, Size = 20 };
            if (dobParam.Value == null)
                dobParam.Value = System.DBNull.Value;

            var placeofbirthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@placeofbirth", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = placeofbirth, Size = 50 };
            if (placeofbirthParam.Value == null)
                placeofbirthParam.Value = System.DBNull.Value;

            var countryofbirthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@countryofbirth", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryofbirth, Size = 50 };
            if (countryofbirthParam.Value == null)
                countryofbirthParam.Value = System.DBNull.Value;

            var isDirectorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsDirector", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isDirector, Size = 10 };
            if (isDirectorParam.Value == null)
                isDirectorParam.Value = System.DBNull.Value;

            var isSecretaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsSecretary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isSecretary, Size = 10 };
            if (isSecretaryParam.Value == null)
                isSecretaryParam.Value = System.DBNull.Value;

            var isPublicOfficerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsPublicOfficer", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isPublicOfficer, Size = 10 };
            if (isPublicOfficerParam.Value == null)
                isPublicOfficerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[update_step3] @id, @companyid, @designation, @firstname, @middlename, @familyname, @anyformername, @firstname_former, @middlename_former, @familyname_former, @unit_level_suite_primary, @streetNoName_primary, @suburb_town_city_primary, @state_primary, @postcode_primary, @country, @dob, @placeofbirth, @countryofbirth, @IsDirector, @IsSecretary, @IsPublicOfficer", idParam, companyidParam, designationParam, firstnameParam, middlenameParam, familynameParam, anyformernameParam, firstnameFormerParam, middlenameFormerParam, familynameFormerParam, unitLevelSuitePrimaryParam, streetNoNamePrimaryParam, suburbTownCityPrimaryParam, statePrimaryParam, postcodePrimaryParam, countryParam, dobParam, placeofbirthParam, countryofbirthParam, isDirectorParam, isSecretaryParam, isPublicOfficerParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UpdateStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, int? id, string placeofbirth, string shareoption, string sharedetailsnotheldanotherorg)
        {
            var step4IdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@step4ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = step4Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!step4Id.HasValue)
                step4IdParam.Value = System.DBNull.Value;

            var companyidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@companyid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companyid, Size = 50 };
            if (companyidParam.Value == null)
                companyidParam.Value = System.DBNull.Value;

            var shareholderdetailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareholderdetails", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareholderdetails, Size = 100 };
            if (shareholderdetailsParam.Value == null)
                shareholderdetailsParam.Value = System.DBNull.Value;

            var shareclasstypeValueParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_value", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeValue, Size = 50 };
            if (shareclasstypeValueParam.Value == null)
                shareclasstypeValueParam.Value = System.DBNull.Value;

            var shareclasstypeTextParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareclasstype_text", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareclasstypeText, Size = 100 };
            if (shareclasstypeTextParam.Value == null)
                shareclasstypeTextParam.Value = System.DBNull.Value;

            var noOfSharesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@no_of_shares", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = noOfShares.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!noOfShares.HasValue)
                noOfSharesParam.Value = System.DBNull.Value;

            var amountpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountpaidpershare.HasValue)
                amountpaidpershareParam.Value = System.DBNull.Value;

            var amountremainingunpaidpershareParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@amountremainingunpaidpershare", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = amountremainingunpaidpershare.GetValueOrDefault(), Precision = 18, Scale = 2 };
            if (!amountremainingunpaidpershare.HasValue)
                amountremainingunpaidpershareParam.Value = System.DBNull.Value;

            var isheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@isheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isheldanotherorg, Size = 10 };
            if (isheldanotherorgParam.Value == null)
                isheldanotherorgParam.Value = System.DBNull.Value;

            var beneficialownernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@beneficialownername", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = beneficialownername, Size = 50 };
            if (beneficialownernameParam.Value == null)
                beneficialownernameParam.Value = System.DBNull.Value;

            var individualOrCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompany, Size = 20 };
            if (individualOrCompanyParam.Value == null)
                individualOrCompanyParam.Value = System.DBNull.Value;

            var individualOrCompanyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyName, Size = 50 };
            if (individualOrCompanyNameParam.Value == null)
                individualOrCompanyNameParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcn, Size = 50 };
            if (individualOrCompanyAcnParam.Value == null)
                individualOrCompanyAcnParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddress, Size = -1 };
            if (individualOrCompanyAddressParam.Value == null)
                individualOrCompanyAddressParam.Value = System.DBNull.Value;

            var individualOrCompanyDobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDob, Size = 20 };
            if (individualOrCompanyDobParam.Value == null)
                individualOrCompanyDobParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuite, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteParam.Value == null)
                individualOrCompanyUnitLevelSuiteParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoName, Size = 300 };
            if (individualOrCompanyStreetNoNameParam.Value == null)
                individualOrCompanyStreetNoNameParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCity, Size = 100 };
            if (individualOrCompanySuburbTownCityParam.Value == null)
                individualOrCompanySuburbTownCityParam.Value = System.DBNull.Value;

            var individualOrCompanyStateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyState, Size = 50 };
            if (individualOrCompanyStateParam.Value == null)
                individualOrCompanyStateParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcode, Size = 20 };
            if (individualOrCompanyPostcodeParam.Value == null)
                individualOrCompanyPostcodeParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountry, Size = 30 };
            if (individualOrCompanyCountryParam.Value == null)
                individualOrCompanyCountryParam.Value = System.DBNull.Value;

            var individualOrCompanyJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyJoint, Size = 20 };
            if (individualOrCompanyJointParam.Value == null)
                individualOrCompanyJointParam.Value = System.DBNull.Value;

            var individualOrCompanyNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_name_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyNameJoint, Size = 50 };
            if (individualOrCompanyNameJointParam.Value == null)
                individualOrCompanyNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAcnJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_acn_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAcnJoint, Size = 50 };
            if (individualOrCompanyAcnJointParam.Value == null)
                individualOrCompanyAcnJointParam.Value = System.DBNull.Value;

            var individualOrCompanyAddressJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_address_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyAddressJoint, Size = -1 };
            if (individualOrCompanyAddressJointParam.Value == null)
                individualOrCompanyAddressJointParam.Value = System.DBNull.Value;

            var individualOrCompanyDobJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_dob_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyDobJoint, Size = 20 };
            if (individualOrCompanyDobJointParam.Value == null)
                individualOrCompanyDobJointParam.Value = System.DBNull.Value;

            var individualOrCompanyUnitLevelSuiteJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_unit_level_suite_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyUnitLevelSuiteJoint, Size = 50 };
            if (individualOrCompanyUnitLevelSuiteJointParam.Value == null)
                individualOrCompanyUnitLevelSuiteJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStreetNoNameJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_streetNoName_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStreetNoNameJoint, Size = 300 };
            if (individualOrCompanyStreetNoNameJointParam.Value == null)
                individualOrCompanyStreetNoNameJointParam.Value = System.DBNull.Value;

            var individualOrCompanySuburbTownCityJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_suburb_town_city_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanySuburbTownCityJoint, Size = 100 };
            if (individualOrCompanySuburbTownCityJointParam.Value == null)
                individualOrCompanySuburbTownCityJointParam.Value = System.DBNull.Value;

            var individualOrCompanyStateJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_state_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyStateJoint, Size = 50 };
            if (individualOrCompanyStateJointParam.Value == null)
                individualOrCompanyStateJointParam.Value = System.DBNull.Value;

            var individualOrCompanyPostcodeJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_postcode_joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyPostcodeJoint, Size = 20 };
            if (individualOrCompanyPostcodeJointParam.Value == null)
                individualOrCompanyPostcodeJointParam.Value = System.DBNull.Value;

            var individualOrCompanyCountryJointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@individual_or_company_country_Joint", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = individualOrCompanyCountryJoint, Size = 30 };
            if (individualOrCompanyCountryJointParam.Value == null)
                individualOrCompanyCountryJointParam.Value = System.DBNull.Value;

            var isjointParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ISJOINT", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = isjoint, Size = 10 };
            if (isjointParam.Value == null)
                isjointParam.Value = System.DBNull.Value;

            var diridParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dirid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dirid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dirid.HasValue)
                diridParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var placeofbirthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@placeofbirth", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = placeofbirth, Size = -1 };
            if (placeofbirthParam.Value == null)
                placeofbirthParam.Value = System.DBNull.Value;

            var shareoptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@shareoption", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = shareoption, Size = 50 };
            if (shareoptionParam.Value == null)
                shareoptionParam.Value = System.DBNull.Value;

            var sharedetailsnotheldanotherorgParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sharedetailsnotheldanotherorg", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sharedetailsnotheldanotherorg, Size = 250 };
            if (sharedetailsnotheldanotherorgParam.Value == null)
                sharedetailsnotheldanotherorgParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[update_step4_anothershareholder] @step4ID, @companyid, @shareholderdetails, @shareclasstype_value, @shareclasstype_text, @no_of_shares, @amountpaidpershare, @amountremainingunpaidpershare, @isheldanotherorg, @beneficialownername, @individual_or_company, @individual_or_company_name, @individual_or_company_acn, @individual_or_company_address, @individual_or_company_dob, @individual_or_company_unit_level_suite, @individual_or_company_streetNoName, @individual_or_company_suburb_town_city, @individual_or_company_state, @individual_or_company_postcode, @individual_or_company_country, @individual_or_company_joint, @individual_or_company_name_joint, @individual_or_company_acn_joint, @individual_or_company_address_joint, @individual_or_company_dob_joint, @individual_or_company_unit_level_suite_joint, @individual_or_company_streetNoName_joint, @individual_or_company_suburb_town_city_joint, @individual_or_company_state_joint, @individual_or_company_postcode_joint, @individual_or_company_country_Joint, @ISJOINT, @dirid, @id, @placeofbirth, @shareoption, @sharedetailsnotheldanotherorg", step4IdParam, companyidParam, shareholderdetailsParam, shareclasstypeValueParam, shareclasstypeTextParam, noOfSharesParam, amountpaidpershareParam, amountremainingunpaidpershareParam, isheldanotherorgParam, beneficialownernameParam, individualOrCompanyParam, individualOrCompanyNameParam, individualOrCompanyAcnParam, individualOrCompanyAddressParam, individualOrCompanyDobParam, individualOrCompanyUnitLevelSuiteParam, individualOrCompanyStreetNoNameParam, individualOrCompanySuburbTownCityParam, individualOrCompanyStateParam, individualOrCompanyPostcodeParam, individualOrCompanyCountryParam, individualOrCompanyJointParam, individualOrCompanyNameJointParam, individualOrCompanyAcnJointParam, individualOrCompanyAddressJointParam, individualOrCompanyDobJointParam, individualOrCompanyUnitLevelSuiteJointParam, individualOrCompanyStreetNoNameJointParam, individualOrCompanySuburbTownCityJointParam, individualOrCompanyStateJointParam, individualOrCompanyPostcodeJointParam, individualOrCompanyCountryJointParam, isjointParam, diridParam, idParam, placeofbirthParam, shareoptionParam, sharedetailsnotheldanotherorgParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public UpdateBeneficiariesReturnModel UpdateBeneficiaries(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var companyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyName, Size = 4000 };
            if (companyNameParam.Value == null)
                companyNameParam.Value = System.DBNull.Value;

            var companyAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyAcn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyAcn, Size = 4000 };
            if (companyAcnParam.Value == null)
                companyAcnParam.Value = System.DBNull.Value;

            var companyRegdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyRegdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = companyRegdate.GetValueOrDefault() };
            if (!companyRegdate.HasValue)
                companyRegdateParam.Value = System.DBNull.Value;

            var contactNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContactName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contactName, Size = 4000 };
            if (contactNameParam.Value == null)
                contactNameParam.Value = System.DBNull.Value;

            var bTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@bType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = bType, Size = 200 };
            if (bTypeParam.Value == null)
                bTypeParam.Value = System.DBNull.Value;

            var trustIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TrustId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = trustId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!trustId.HasValue)
                trustIdParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;


            var procResultData = new UpdateBeneficiariesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[updateBeneficiaries]";
            cmd.Parameters.Add(xmlParam);
            cmd.Parameters.Add(cidParam);
            cmd.Parameters.Add(companyNameParam);
            cmd.Parameters.Add(companyAcnParam);
            cmd.Parameters.Add(companyRegdateParam);
            cmd.Parameters.Add(contactNameParam);
            cmd.Parameters.Add(bTypeParam);
            cmd.Parameters.Add(trustIdParam);
            cmd.Parameters.Add(uidParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<UpdateBeneficiariesReturnModel> UpdateBeneficiariesAsync(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var companyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyName, Size = 4000 };
            if (companyNameParam.Value == null)
                companyNameParam.Value = System.DBNull.Value;

            var companyAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyAcn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = companyAcn, Size = 4000 };
            if (companyAcnParam.Value == null)
                companyAcnParam.Value = System.DBNull.Value;

            var companyRegdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanyRegdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = companyRegdate.GetValueOrDefault() };
            if (!companyRegdate.HasValue)
                companyRegdateParam.Value = System.DBNull.Value;

            var contactNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContactName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contactName, Size = 4000 };
            if (contactNameParam.Value == null)
                contactNameParam.Value = System.DBNull.Value;

            var bTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@bType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = bType, Size = 200 };
            if (bTypeParam.Value == null)
                bTypeParam.Value = System.DBNull.Value;

            var trustIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TrustId", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = trustId.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!trustId.HasValue)
                trustIdParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;


            var procResultData = new UpdateBeneficiariesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[updateBeneficiaries]";
            cmd.Parameters.Add(xmlParam);
            cmd.Parameters.Add(cidParam);
            cmd.Parameters.Add(companyNameParam);
            cmd.Parameters.Add(companyAcnParam);
            cmd.Parameters.Add(companyRegdateParam);
            cmd.Parameters.Add(contactNameParam);
            cmd.Parameters.Add(bTypeParam);
            cmd.Parameters.Add(trustIdParam);
            cmd.Parameters.Add(uidParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<UpdateBeneficiariesReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid)
        {
            int procResult;
            return UpdatecompanyOption(cid, quotefortax, legelassessment, borrowing, agreement, companySecretary, publicOfficerOfCompany, howfstmeetingOfDirheld, dateOfIncorporation, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid, out int procResult)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var quotefortaxParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@quotefortax", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = quotefortax.GetValueOrDefault() };
            if (!quotefortax.HasValue)
                quotefortaxParam.Value = System.DBNull.Value;

            var legelassessmentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@legelassessment", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = legelassessment.GetValueOrDefault() };
            if (!legelassessment.HasValue)
                legelassessmentParam.Value = System.DBNull.Value;

            var borrowingParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@borrowing", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = borrowing.GetValueOrDefault() };
            if (!borrowing.HasValue)
                borrowingParam.Value = System.DBNull.Value;

            var agreementParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@agreement", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = agreement.GetValueOrDefault() };
            if (!agreement.HasValue)
                agreementParam.Value = System.DBNull.Value;

            var companySecretaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanySecretary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companySecretary, Size = 250 };
            if (companySecretaryParam.Value == null)
                companySecretaryParam.Value = System.DBNull.Value;

            var publicOfficerOfCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PublicOfficerOfCompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = publicOfficerOfCompany, Size = 250 };
            if (publicOfficerOfCompanyParam.Value == null)
                publicOfficerOfCompanyParam.Value = System.DBNull.Value;

            var howfstmeetingOfDirheldParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HowfstmeetingOfDirheld", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = howfstmeetingOfDirheld, Size = 250 };
            if (howfstmeetingOfDirheldParam.Value == null)
                howfstmeetingOfDirheldParam.Value = System.DBNull.Value;

            var dateOfIncorporationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateOfIncorporation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dateOfIncorporation, Size = 50 };
            if (dateOfIncorporationParam.Value == null)
                dateOfIncorporationParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UpdatecompanyOptionReturnModel>("EXEC @procResult = [dbo].[updatecompanyOption] @cid, @quotefortax, @legelassessment, @borrowing, @agreement, @CompanySecretary, @PublicOfficerOfCompany, @HowfstmeetingOfDirheld, @DateOfIncorporation, @uid", cidParam, quotefortaxParam, legelassessmentParam, borrowingParam, agreementParam, companySecretaryParam, publicOfficerOfCompanyParam, howfstmeetingOfDirheldParam, dateOfIncorporationParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatecompanyOptionReturnModel>> UpdatecompanyOptionAsync(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid)
        {
            var cidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@cid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = cid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!cid.HasValue)
                cidParam.Value = System.DBNull.Value;

            var quotefortaxParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@quotefortax", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = quotefortax.GetValueOrDefault() };
            if (!quotefortax.HasValue)
                quotefortaxParam.Value = System.DBNull.Value;

            var legelassessmentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@legelassessment", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = legelassessment.GetValueOrDefault() };
            if (!legelassessment.HasValue)
                legelassessmentParam.Value = System.DBNull.Value;

            var borrowingParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@borrowing", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = borrowing.GetValueOrDefault() };
            if (!borrowing.HasValue)
                borrowingParam.Value = System.DBNull.Value;

            var agreementParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@agreement", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = agreement.GetValueOrDefault() };
            if (!agreement.HasValue)
                agreementParam.Value = System.DBNull.Value;

            var companySecretaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompanySecretary", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = companySecretary, Size = 250 };
            if (companySecretaryParam.Value == null)
                companySecretaryParam.Value = System.DBNull.Value;

            var publicOfficerOfCompanyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PublicOfficerOfCompany", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = publicOfficerOfCompany, Size = 250 };
            if (publicOfficerOfCompanyParam.Value == null)
                publicOfficerOfCompanyParam.Value = System.DBNull.Value;

            var howfstmeetingOfDirheldParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HowfstmeetingOfDirheld", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = howfstmeetingOfDirheld, Size = 250 };
            if (howfstmeetingOfDirheldParam.Value == null)
                howfstmeetingOfDirheldParam.Value = System.DBNull.Value;

            var dateOfIncorporationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateOfIncorporation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = dateOfIncorporation, Size = 50 };
            if (dateOfIncorporationParam.Value == null)
                dateOfIncorporationParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UpdatecompanyOptionReturnModel>("EXEC [dbo].[updatecompanyOption] @cid, @quotefortax, @legelassessment, @borrowing, @agreement, @CompanySecretary, @PublicOfficerOfCompany, @HowfstmeetingOfDirheld, @DateOfIncorporation, @uid", cidParam, quotefortaxParam, legelassessmentParam, borrowingParam, agreementParam, companySecretaryParam, publicOfficerOfCompanyParam, howfstmeetingOfDirheldParam, dateOfIncorporationParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id)
        {
            int procResult;
            return UpdateContactstatus(id, out procResult);
        }

        public System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UpdateContactstatusReturnModel>("EXEC @procResult = [dbo].[updateContactstatus] @id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateContactstatusReturnModel>> UpdateContactstatusAsync(long? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UpdateContactstatusReturnModel>("EXEC [dbo].[updateContactstatus] @id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber)
        {
            int procResult;
            return Updatetrust(id, name, type, setupDate, state, smsf, acn, abn, ptn, padd, lname, uid, smsfCompanyName, smsfAcn, smsfCompanySetupDate, propertyTrusteeDate, existingSetupDate, clauseNumber, out procResult);
        }

        public System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 4000 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 4000 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var setupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = setupDate.GetValueOrDefault() };
            if (!setupDate.HasValue)
                setupDateParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 4000 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var smsfParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@smsf", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsf, Size = 4000 };
            if (smsfParam.Value == null)
                smsfParam.Value = System.DBNull.Value;

            var acnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = acn, Size = 4000 };
            if (acnParam.Value == null)
                acnParam.Value = System.DBNull.Value;

            var abnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@abn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = abn, Size = 4000 };
            if (abnParam.Value == null)
                abnParam.Value = System.DBNull.Value;

            var ptnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ptn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ptn, Size = 4000 };
            if (ptnParam.Value == null)
                ptnParam.Value = System.DBNull.Value;

            var paddParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@padd", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = padd, Size = 4000 };
            if (paddParam.Value == null)
                paddParam.Value = System.DBNull.Value;

            var lnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lname, Size = 4000 };
            if (lnameParam.Value == null)
                lnameParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var smsfCompanyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfCompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsfCompanyName, Size = 4000 };
            if (smsfCompanyNameParam.Value == null)
                smsfCompanyNameParam.Value = System.DBNull.Value;

            var smsfAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfAcn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsfAcn, Size = 4000 };
            if (smsfAcnParam.Value == null)
                smsfAcnParam.Value = System.DBNull.Value;

            var smsfCompanySetupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfCompanySetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = smsfCompanySetupDate.GetValueOrDefault() };
            if (!smsfCompanySetupDate.HasValue)
                smsfCompanySetupDateParam.Value = System.DBNull.Value;

            var propertyTrusteeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PropertyTrusteeDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = propertyTrusteeDate.GetValueOrDefault() };
            if (!propertyTrusteeDate.HasValue)
                propertyTrusteeDateParam.Value = System.DBNull.Value;

            var existingSetupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExistingSetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = existingSetupDate.GetValueOrDefault() };
            if (!existingSetupDate.HasValue)
                existingSetupDateParam.Value = System.DBNull.Value;

            var clauseNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClauseNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = clauseNumber, Size = 4000 };
            if (clauseNumberParam.Value == null)
                clauseNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UpdatetrustReturnModel>("EXEC @procResult = [dbo].[updatetrust] @Id, @Name, @Type, @SetupDate, @State, @smsf, @acn, @abn, @ptn, @padd, @lname, @uid, @SmsfCompanyName, @SmsfAcn, @SmsfCompanySetupDate, @PropertyTrusteeDate, @ExistingSetupDate, @ClauseNumber", idParam, nameParam, typeParam, setupDateParam, stateParam, smsfParam, acnParam, abnParam, ptnParam, paddParam, lnameParam, uidParam, smsfCompanyNameParam, smsfAcnParam, smsfCompanySetupDateParam, propertyTrusteeDateParam, existingSetupDateParam, clauseNumberParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatetrustReturnModel>> UpdatetrustAsync(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 4000 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 4000 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var setupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = setupDate.GetValueOrDefault() };
            if (!setupDate.HasValue)
                setupDateParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 4000 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var smsfParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@smsf", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsf, Size = 4000 };
            if (smsfParam.Value == null)
                smsfParam.Value = System.DBNull.Value;

            var acnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@acn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = acn, Size = 4000 };
            if (acnParam.Value == null)
                acnParam.Value = System.DBNull.Value;

            var abnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@abn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = abn, Size = 4000 };
            if (abnParam.Value == null)
                abnParam.Value = System.DBNull.Value;

            var ptnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ptn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ptn, Size = 4000 };
            if (ptnParam.Value == null)
                ptnParam.Value = System.DBNull.Value;

            var paddParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@padd", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = padd, Size = 4000 };
            if (paddParam.Value == null)
                paddParam.Value = System.DBNull.Value;

            var lnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lname, Size = 4000 };
            if (lnameParam.Value == null)
                lnameParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var smsfCompanyNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfCompanyName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsfCompanyName, Size = 4000 };
            if (smsfCompanyNameParam.Value == null)
                smsfCompanyNameParam.Value = System.DBNull.Value;

            var smsfAcnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfAcn", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = smsfAcn, Size = 4000 };
            if (smsfAcnParam.Value == null)
                smsfAcnParam.Value = System.DBNull.Value;

            var smsfCompanySetupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmsfCompanySetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = smsfCompanySetupDate.GetValueOrDefault() };
            if (!smsfCompanySetupDate.HasValue)
                smsfCompanySetupDateParam.Value = System.DBNull.Value;

            var propertyTrusteeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PropertyTrusteeDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = propertyTrusteeDate.GetValueOrDefault() };
            if (!propertyTrusteeDate.HasValue)
                propertyTrusteeDateParam.Value = System.DBNull.Value;

            var existingSetupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExistingSetupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = existingSetupDate.GetValueOrDefault() };
            if (!existingSetupDate.HasValue)
                existingSetupDateParam.Value = System.DBNull.Value;

            var clauseNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClauseNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = clauseNumber, Size = 4000 };
            if (clauseNumberParam.Value == null)
                clauseNumberParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UpdatetrustReturnModel>("EXEC [dbo].[updatetrust] @Id, @Name, @Type, @SetupDate, @State, @smsf, @acn, @abn, @ptn, @padd, @lname, @uid, @SmsfCompanyName, @SmsfAcn, @SmsfCompanySetupDate, @PropertyTrusteeDate, @ExistingSetupDate, @ClauseNumber", idParam, nameParam, typeParam, setupDateParam, stateParam, smsfParam, acnParam, abnParam, ptnParam, paddParam, lnameParam, uidParam, smsfCompanyNameParam, smsfAcnParam, smsfCompanySetupDateParam, propertyTrusteeDateParam, existingSetupDateParam, clauseNumberParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid)
        {
            int procResult;
            return UpdateTrustAppointer(xml, tid, unitcost, totalmember, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid, out int procResult)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var unitcostParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unitcost", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = unitcost, Size = 50 };
            if (unitcostParam.Value == null)
                unitcostParam.Value = System.DBNull.Value;

            var totalmemberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalmember", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = totalmember, Size = 50 };
            if (totalmemberParam.Value == null)
                totalmemberParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UpdateTrustAppointerReturnModel>("EXEC @procResult = [dbo].[UpdateTrustAppointer] @xml, @tid, @unitcost, @totalmember, @uid", xmlParam, tidParam, unitcostParam, totalmemberParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustAppointerReturnModel>> UpdateTrustAppointerAsync(string xml, long? tid, string unitcost, string totalmember, long? uid)
        {
            var xmlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@xml", SqlDbType = System.Data.SqlDbType.Xml, Direction = System.Data.ParameterDirection.Input, Value = xml, Size = -1 };
            if (xmlParam.Value == null)
                xmlParam.Value = System.DBNull.Value;

            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var unitcostParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@unitcost", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = unitcost, Size = 50 };
            if (unitcostParam.Value == null)
                unitcostParam.Value = System.DBNull.Value;

            var totalmemberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@totalmember", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = totalmember, Size = 50 };
            if (totalmemberParam.Value == null)
                totalmemberParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UpdateTrustAppointerReturnModel>("EXEC [dbo].[UpdateTrustAppointer] @xml, @tid, @unitcost, @totalmember, @uid", xmlParam, tidParam, unitcostParam, totalmemberParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid)
        {
            int procResult;
            return UpdateTrustOption(tid, quotefortax, legelassessment, borrowing, agreement, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid, out int procResult)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var quotefortaxParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@quotefortax", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = quotefortax.GetValueOrDefault() };
            if (!quotefortax.HasValue)
                quotefortaxParam.Value = System.DBNull.Value;

            var legelassessmentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@legelassessment", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = legelassessment.GetValueOrDefault() };
            if (!legelassessment.HasValue)
                legelassessmentParam.Value = System.DBNull.Value;

            var borrowingParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@borrowing", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = borrowing.GetValueOrDefault() };
            if (!borrowing.HasValue)
                borrowingParam.Value = System.DBNull.Value;

            var agreementParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@agreement", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = agreement.GetValueOrDefault() };
            if (!agreement.HasValue)
                agreementParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UpdateTrustOptionReturnModel>("EXEC @procResult = [dbo].[updateTrustOption] @tid, @quotefortax, @legelassessment, @borrowing, @agreement, @uid", tidParam, quotefortaxParam, legelassessmentParam, borrowingParam, agreementParam, uidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustOptionReturnModel>> UpdateTrustOptionAsync(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid)
        {
            var tidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = tid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!tid.HasValue)
                tidParam.Value = System.DBNull.Value;

            var quotefortaxParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@quotefortax", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = quotefortax.GetValueOrDefault() };
            if (!quotefortax.HasValue)
                quotefortaxParam.Value = System.DBNull.Value;

            var legelassessmentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@legelassessment", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = legelassessment.GetValueOrDefault() };
            if (!legelassessment.HasValue)
                legelassessmentParam.Value = System.DBNull.Value;

            var borrowingParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@borrowing", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = borrowing.GetValueOrDefault() };
            if (!borrowing.HasValue)
                borrowingParam.Value = System.DBNull.Value;

            var agreementParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@agreement", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = agreement.GetValueOrDefault() };
            if (!agreement.HasValue)
                agreementParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@uid", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = uid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!uid.HasValue)
                uidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UpdateTrustOptionReturnModel>("EXEC [dbo].[updateTrustOption] @tid, @quotefortax, @legelassessment, @borrowing, @agreement, @uid", tidParam, quotefortaxParam, legelassessmentParam, borrowingParam, agreementParam, uidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno)
        {
            int procResult;
            return Userlogin(email, pass, regno, out procResult);
        }

        public System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var regnoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regno", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = regno, Size = 50 };
            if (regnoParam.Value == null)
                regnoParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UserloginReturnModel>("EXEC @procResult = [dbo].[userlogin] @email, @pass, @regno", emailParam, passParam, regnoParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginReturnModel>> UserloginAsync(string email, string pass, string regno)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var regnoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regno", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = regno, Size = 50 };
            if (regnoParam.Value == null)
                regnoParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UserloginReturnModel>("EXEC [dbo].[userlogin] @email, @pass, @regno", emailParam, passParam, regnoParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass)
        {
            int procResult;
            return UserloginNew(email, pass, out procResult);
        }

        public System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass, out int procResult)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UserloginNewReturnModel>("EXEC @procResult = [dbo].[userlogin_New] @email, @pass", emailParam, passParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginNewReturnModel>> UserloginNewAsync(string email, string pass)
        {
            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 2000 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@pass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = pass, Size = 2000 };
            if (passParam.Value == null)
                passParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UserloginNewReturnModel>("EXEC [dbo].[userlogin_New] @email, @pass", emailParam, passParam).ToListAsync();

            return procResultData;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<AsicTxnFile> AsicTxnFiles { get; set; }
        public System.Data.Entity.DbSet<AsicTxnStatus> AsicTxnStatus { get; set; }
        public System.Data.Entity.DbSet<Companysearch> Companysearches { get; set; }
        public System.Data.Entity.DbSet<LbLmsg> LbLmsgs { get; set; }
        public System.Data.Entity.DbSet<Lodgement> Lodgements { get; set; }
        public System.Data.Entity.DbSet<Ra55> Ra55 { get; set; }
        public System.Data.Entity.DbSet<Ra56> Ra56 { get; set; }
        public System.Data.Entity.DbSet<Registration> Registrations { get; set; }
        public System.Data.Entity.DbSet<ShareAllocate> ShareAllocates { get; set; }
        public System.Data.Entity.DbSet<ShareDistributeGrid> ShareDistributeGrids { get; set; }
        public System.Data.Entity.DbSet<Step1> Step1 { get; set; }
        public System.Data.Entity.DbSet<Step2> Step2 { get; set; }
        public System.Data.Entity.DbSet<Step3> Step3 { get; set; }
        public System.Data.Entity.DbSet<Step4Anothershareholder> Step4Anothershareholder { get; set; }
        public System.Data.Entity.DbSet<TblCompany> TblCompanies { get; set; }
        public System.Data.Entity.DbSet<TblCompanyAddress> TblCompanyAddresses { get; set; }
        public System.Data.Entity.DbSet<TblCompanyDirector> TblCompanyDirectors { get; set; }
        public System.Data.Entity.DbSet<TblCompanyShare> TblCompanyShares { get; set; }
        public System.Data.Entity.DbSet<TblCompanyTrust> TblCompanyTrusts { get; set; }
        public System.Data.Entity.DbSet<TblContact> TblContacts { get; set; }
        public System.Data.Entity.DbSet<TblOption> TblOptions { get; set; }
        public System.Data.Entity.DbSet<TblTransaction> TblTransactions { get; set; }
        public System.Data.Entity.DbSet<TblTrust> TblTrusts { get; set; }
        public System.Data.Entity.DbSet<TblTrustAppointer> TblTrustAppointers { get; set; }
        public System.Data.Entity.DbSet<TblTrustOption> TblTrustOptions { get; set; }
        public System.Data.Entity.DbSet<TblUser> TblUsers { get; set; }
        public System.Data.Entity.DbSet<TblUserMeta> TblUserMetas { get; set; }
        public System.Data.Entity.DbSet<TempCsearch> TempCsearches { get; set; }

        public FakeMyDbContext()
        {
            AsicTxnFiles = new FakeDbSet<AsicTxnFile>("Id");
            AsicTxnStatus = new FakeDbSet<AsicTxnStatus>("Id");
            Companysearches = new FakeDbSet<Companysearch>("Id");
            LbLmsgs = new FakeDbSet<LbLmsg>("Id");
            Lodgements = new FakeDbSet<Lodgement>("Id");
            Ra55 = new FakeDbSet<Ra55>("Id");
            Ra56 = new FakeDbSet<Ra56>("Id");
            Registrations = new FakeDbSet<Registration>("Sno");
            ShareAllocates = new FakeDbSet<ShareAllocate>("Id");
            ShareDistributeGrids = new FakeDbSet<ShareDistributeGrid>("Id");
            Step1 = new FakeDbSet<Step1>("Id");
            Step2 = new FakeDbSet<Step2>("Id");
            Step3 = new FakeDbSet<Step3>("Id");
            Step4Anothershareholder = new FakeDbSet<Step4Anothershareholder>("Id");
            TblCompanies = new FakeDbSet<TblCompany>("Id");
            TblCompanyAddresses = new FakeDbSet<TblCompanyAddress>("Id");
            TblCompanyDirectors = new FakeDbSet<TblCompanyDirector>("Id");
            TblCompanyShares = new FakeDbSet<TblCompanyShare>("Id", "ShareBehalf");
            TblCompanyTrusts = new FakeDbSet<TblCompanyTrust>("Id");
            TblContacts = new FakeDbSet<TblContact>("Id");
            TblOptions = new FakeDbSet<TblOption>("Id");
            TblTransactions = new FakeDbSet<TblTransaction>("Id");
            TblTrusts = new FakeDbSet<TblTrust>("Id");
            TblTrustAppointers = new FakeDbSet<TblTrustAppointer>("Id");
            TblTrustOptions = new FakeDbSet<TblTrustOption>("Id");
            TblUsers = new FakeDbSet<TblUser>("Id");
            TblUserMetas = new FakeDbSet<TblUserMeta>("Id");
            TempCsearches = new FakeDbSet<TempCsearch>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int UpdateRegistration(string companyid, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode)
        {

            return 0;
        }

        public int Addcompany(string company, long? uid)
        {

            return 0;
        }

        public System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid)
        {
            int procResult;
            return Addtrust(id, fName, lName, email, phone, uid, out procResult);
        }

        public System.Collections.Generic.List<AddtrustReturnModel> Addtrust(long? id, string fName, string lName, string email, string phone, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AddtrustReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AddtrustReturnModel>> AddtrustAsync(long? id, string fName, string lName, string email, string phone, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Addtrust(id, fName, lName, email, phone, uid, out procResult));
        }

        public System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno)
        {
            int procResult;
            return AdminloginAfter(email, pass, regno, out procResult);
        }

        public System.Collections.Generic.List<AdminloginAfterReturnModel> AdminloginAfter(string email, string pass, string regno, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AdminloginAfterReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AdminloginAfterReturnModel>> AdminloginAfterAsync(string email, string pass, string regno)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AdminloginAfter(email, pass, regno, out procResult));
        }

        public System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml)
        {
            int procResult;
            return Delcompany(xml, out procResult);
        }

        public System.Collections.Generic.List<DelcompanyReturnModel> Delcompany(string xml, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DelcompanyReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DelcompanyReturnModel>> DelcompanyAsync(string xml)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Delcompany(xml, out procResult));
        }

        public System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml)
        {
            int procResult;
            return DelContacts(xml, out procResult);
        }

        public System.Collections.Generic.List<DelContactsReturnModel> DelContacts(string xml, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DelContactsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DelContactsReturnModel>> DelContactsAsync(string xml)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DelContacts(xml, out procResult));
        }

        public int DeleteShareDistributeGrid(string companyid)
        {

            return 0;
        }

        public int DeleteShareDistributeGridStep4Add(string companyid)
        {

            return 0;
        }

        public int DeleteShareDistributeGridStep4Ind(string companyid)
        {

            return 0;
        }

        public int DeleteStep3ByDirId(int? id, string companyid)
        {

            return 0;
        }

        public int DeleteStep4Anothershareholder(string companyid)
        {

            return 0;
        }

        public int DeleteStep4AnothershareholderAdd(string companyid)
        {

            return 0;
        }

        public int DeleteStep4AnothershareholderInd(string companyid)
        {

            return 0;
        }

        public System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid)
        {
            int procResult;
            return DeleteDirectors(xml, cid, out procResult);
        }

        public System.Collections.Generic.List<DeleteDirectorsReturnModel> DeleteDirectors(string xml, long? cid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DeleteDirectorsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DeleteDirectorsReturnModel>> DeleteDirectorsAsync(string xml, long? cid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DeleteDirectors(xml, cid, out procResult));
        }

        public System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml)
        {
            int procResult;
            return Deltrust(xml, out procResult);
        }

        public System.Collections.Generic.List<DeltrustReturnModel> Deltrust(string xml, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DeltrustReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DeltrustReturnModel>> DeltrustAsync(string xml)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Deltrust(xml, out procResult));
        }

        public System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid)
        {
            int procResult;
            return Deluser(xml, uid, out procResult);
        }

        public System.Collections.Generic.List<DeluserReturnModel> Deluser(string xml, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DeluserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DeluserReturnModel>> DeluserAsync(string xml, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Deluser(xml, uid, out procResult));
        }

        public System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname)
        {
            int procResult;
            return GetCompanysearchByName(companyname, out procResult);
        }

        public System.Collections.Generic.List<GetCompanysearchByNameReturnModel> GetCompanysearchByName(string companyname, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetCompanysearchByNameReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetCompanysearchByNameReturnModel>> GetCompanysearchByNameAsync(string companyname)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetCompanysearchByName(companyname, out procResult));
        }

        public System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement()
        {
            int procResult;
            return GetLodgement(out procResult);
        }

        public System.Collections.Generic.List<GetLodgementReturnModel> GetLodgement(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetLodgementReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetLodgementReturnModel>> GetLodgementAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetLodgement(out procResult));
        }

        public System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid)
        {
            int procResult;
            return GetRegistration(email, regid, out procResult);
        }

        public System.Collections.Generic.List<GetRegistrationReturnModel> GetRegistration(string email, long? regid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRegistrationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRegistrationReturnModel>> GetRegistrationAsync(string email, long? regid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRegistration(email, regid, out procResult));
        }

        public System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid)
        {
            int procResult;
            return GetShareAllocationMainPdf(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel> GetShareAllocationMainPdf(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareAllocationMainPdfReturnModel>> GetShareAllocationMainPdfAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetShareAllocationMainPdf(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid)
        {
            int procResult;
            return GetShareDistributegrid(companyid, linkid, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegridReturnModel> GetShareDistributegrid(string companyid, string linkid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetShareDistributegridReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegridReturnModel>> GetShareDistributegridAsync(string companyid, string linkid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetShareDistributegrid(companyid, linkid, out procResult));
        }

        public System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid)
        {
            int procResult;
            return GetShareDistributegrid1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegrid1ReturnModel> GetShareDistributegrid1(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetShareDistributegrid1ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid1ReturnModel>> GetShareDistributegrid1Async(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetShareDistributegrid1(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company)
        {
            int procResult;
            return GetShareDistributegrid12(companyid, company, out procResult);
        }

        public System.Collections.Generic.List<GetShareDistributegrid12ReturnModel> GetShareDistributegrid12(string companyid, string company, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetShareDistributegrid12ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetShareDistributegrid12ReturnModel>> GetShareDistributegrid12Async(string companyid, string company)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetShareDistributegrid12(companyid, company, out procResult));
        }

        public System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid)
        {
            int procResult;
            return GetStep1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep1ReturnModel> GetStep1(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep1ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1ReturnModel>> GetStep1Async(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep1(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid)
        {
            int procResult;
            return GetStep3(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep3ReturnModel> GetStep3(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep3ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ReturnModel>> GetStep3Async(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep3(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid)
        {
            int procResult;
            return GetStep3ByDirId(companyid, dirid, out procResult);
        }

        public System.Collections.Generic.List<GetStep3ByDirIdReturnModel> GetStep3ByDirId(string companyid, string dirid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep3ByDirIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep3ByDirIdReturnModel>> GetStep3ByDirIdAsync(string companyid, string dirid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep3ByDirId(companyid, dirid, out procResult));
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid)
        {
            int procResult;
            return GetStep4Anothershareholder(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderReturnModel> GetStep4Anothershareholder(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep4AnothershareholderReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderReturnModel>> GetStep4AnothershareholderAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep4Anothershareholder(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid)
        {
            int procResult;
            return GetStep4Anothershareholder1(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel> GetStep4Anothershareholder1(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4Anothershareholder1ReturnModel>> GetStep4Anothershareholder1Async(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep4Anothershareholder1(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid)
        {
            int procResult;
            return GetStep4AnothershareholderAll(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel> GetStep4AnothershareholderAll(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep4AnothershareholderAllReturnModel>> GetStep4AnothershareholderAllAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep4AnothershareholderAll(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid)
        {
            int procResult;
            return GetUserdetailsByuid(uid, out procResult);
        }

        public System.Collections.Generic.List<GetUserdetailsByuidReturnModel> GetUserdetailsByuid(string uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetUserdetailsByuidReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetUserdetailsByuidReturnModel>> GetUserdetailsByuidAsync(string uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetUserdetailsByuid(uid, out procResult));
        }

        public System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetAdminCompanyList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetAdminCompanyListReturnModel> GetAdminCompanyList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetAdminCompanyListReturnModel>();
        }

        public GetAdminTrustListReturnModel GetAdminTrustList(int? startLength, int? length, string orderBy, string search, out int? pageCount, string subuserid)
        {
            int procResult;
            return GetAdminTrustList(startLength, length, orderBy, search, out pageCount, subuserid, out procResult);
        }

        public GetAdminTrustListReturnModel GetAdminTrustList(int? startLength, int? length, string orderBy, string search, out int? pageCount, string subuserid, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new GetAdminTrustListReturnModel();
        }

        public System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetadminUsersList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetadminUsersListReturnModel> GetadminUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetadminUsersListReturnModel>();
        }

        public GetBeneficiaryDetailsReturnModel GetBeneficiaryDetails(long? tId)
        {
            int procResult;
            return GetBeneficiaryDetails(tId, out procResult);
        }

        public GetBeneficiaryDetailsReturnModel GetBeneficiaryDetails(long? tId, out int procResult)
        {

            procResult = 0;
            return new GetBeneficiaryDetailsReturnModel();
        }

        public System.Threading.Tasks.Task<GetBeneficiaryDetailsReturnModel> GetBeneficiaryDetailsAsync(long? tId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetBeneficiaryDetails(tId, out procResult));
        }

        public System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid)
        {
            int procResult;
            return Getcompanysearchbyid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetcompanysearchbyidReturnModel> Getcompanysearchbyid(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetcompanysearchbyidReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetcompanysearchbyidReturnModel>> GetcompanysearchbyidAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Getcompanysearchbyid(companyid, out procResult));
        }

        public GetDashboardCountersReturnModel GetDashboardCounters(string subuserid, string esubuserid)
        {
            int procResult;
            return GetDashboardCounters(subuserid, esubuserid, out procResult);
        }

        public GetDashboardCountersReturnModel GetDashboardCounters(string subuserid, string esubuserid, out int procResult)
        {

            procResult = 0;
            return new GetDashboardCountersReturnModel();
        }

        public System.Threading.Tasks.Task<GetDashboardCountersReturnModel> GetDashboardCountersAsync(string subuserid, string esubuserid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDashboardCounters(subuserid, esubuserid, out procResult));
        }

        public GetFullCompanyDetailReturnModel GetFullCompanyDetail(long? cid)
        {
            int procResult;
            return GetFullCompanyDetail(cid, out procResult);
        }

        public GetFullCompanyDetailReturnModel GetFullCompanyDetail(long? cid, out int procResult)
        {

            procResult = 0;
            return new GetFullCompanyDetailReturnModel();
        }

        public System.Threading.Tasks.Task<GetFullCompanyDetailReturnModel> GetFullCompanyDetailAsync(long? cid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetFullCompanyDetail(cid, out procResult));
        }

        public GetFullTrustDetailReturnModel GetFullTrustDetail(long? tid)
        {
            int procResult;
            return GetFullTrustDetail(tid, out procResult);
        }

        public GetFullTrustDetailReturnModel GetFullTrustDetail(long? tid, out int procResult)
        {

            procResult = 0;
            return new GetFullTrustDetailReturnModel();
        }

        public System.Threading.Tasks.Task<GetFullTrustDetailReturnModel> GetFullTrustDetailAsync(long? tid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetFullTrustDetail(tid, out procResult));
        }

        public GetPaymentDetailReturnModel GetPaymentDetail(long? id, string type)
        {
            int procResult;
            return GetPaymentDetail(id, type, out procResult);
        }

        public GetPaymentDetailReturnModel GetPaymentDetail(long? id, string type, out int procResult)
        {

            procResult = 0;
            return new GetPaymentDetailReturnModel();
        }

        public System.Threading.Tasks.Task<GetPaymentDetailReturnModel> GetPaymentDetailAsync(long? id, string type)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetPaymentDetail(id, type, out procResult));
        }

        public GetPaymentListReturnModel GetPaymentList(int? startLength, int? length, string orderBy, int? id, out int? pageCount)
        {
            int procResult;
            return GetPaymentList(startLength, length, orderBy, id, out pageCount, out procResult);
        }

        public GetPaymentListReturnModel GetPaymentList(int? startLength, int? length, string orderBy, int? id, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new GetPaymentListReturnModel();
        }

        public GetReportReturnModel GetReport(int? time, int? uid)
        {
            int procResult;
            return GetReport(time, uid, out procResult);
        }

        public GetReportReturnModel GetReport(int? time, int? uid, out int procResult)
        {

            procResult = 0;
            return new GetReportReturnModel();
        }

        public System.Threading.Tasks.Task<GetReportReturnModel> GetReportAsync(int? time, int? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetReport(time, uid, out procResult));
        }

        public GetShortCompanyDetailReturnModel GetShortCompanyDetail(long? cid)
        {
            int procResult;
            return GetShortCompanyDetail(cid, out procResult);
        }

        public GetShortCompanyDetailReturnModel GetShortCompanyDetail(long? cid, out int procResult)
        {

            procResult = 0;
            return new GetShortCompanyDetailReturnModel();
        }

        public System.Threading.Tasks.Task<GetShortCompanyDetailReturnModel> GetShortCompanyDetailAsync(long? cid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetShortCompanyDetail(cid, out procResult));
        }

        public System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid)
        {
            int procResult;
            return GetStep1Bycid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep1BycidReturnModel> GetStep1Bycid(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep1BycidReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep1BycidReturnModel>> GetStep1BycidAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep1Bycid(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid)
        {
            int procResult;
            return GetStep2Bycid(companyid, out procResult);
        }

        public System.Collections.Generic.List<GetStep2BycidReturnModel> GetStep2Bycid(string companyid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStep2BycidReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStep2BycidReturnModel>> GetStep2BycidAsync(string companyid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStep2Bycid(companyid, out procResult));
        }

        public System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid)
        {
            int procResult;
            return GetTrustAppointer(tid, out procResult);
        }

        public System.Collections.Generic.List<GetTrustAppointerReturnModel> GetTrustAppointer(long? tid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetTrustAppointerReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustAppointerReturnModel>> GetTrustAppointerAsync(long? tid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetTrustAppointer(tid, out procResult));
        }

        public System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id)
        {
            int procResult;
            return GetTrustDetail(id, out procResult);
        }

        public System.Collections.Generic.List<GetTrustDetailReturnModel> GetTrustDetail(long? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetTrustDetailReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetTrustDetailReturnModel>> GetTrustDetailAsync(long? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetTrustDetail(id, out procResult));
        }

        public System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount)
        {
            int procResult;
            return GetUserCompanyList(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserCompanyListReturnModel> GetUserCompanyList(int? startLength, int? length, string orderBy, string uid, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetUserCompanyListReturnModel>();
        }

        public System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount)
        {
            int procResult;
            return GetUserCompanyList1(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserCompanyList1ReturnModel> GetUserCompanyList1(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetUserCompanyList1ReturnModel>();
        }

        public System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount)
        {
            int procResult;
            return GetUsersList(startLength, length, orderBy, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUsersListReturnModel> GetUsersList(int? startLength, int? length, string orderBy, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetUsersListReturnModel>();
        }

        public System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount)
        {
            int procResult;
            return GetUserTrustList(startLength, length, orderBy, uid, out pageCount, out procResult);
        }

        public System.Collections.Generic.List<GetUserTrustListReturnModel> GetUserTrustList(int? startLength, int? length, string orderBy, long? uid, out int? pageCount, out int procResult)
        {
            pageCount = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetUserTrustListReturnModel>();
        }

        public int InsertRa55(string companyName, string acn, string companyType, string companyClass, string certificatePrintOption, string jurisdictionOfRegistration, string dateOfRegistration, string companySubclass, string accountNumber, string supplierName, string supplierAbn, string registeredAgentName, string registeredAgentAddress, string invoiceDescription, string invoiceAmmount, string documentNumber, string formCode, string taxInvoiceText, string taxCode, string taxAmmount)
        {

            return 0;
        }

        public int InsertShareDistributeGrid(string companyid, string shareclass, int? totalshares, decimal? unitprice, decimal? totalprice, int? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid)
        {

            return 0;
        }

        public int InsertShareDistributeGrid1(string companyid, string shareclass, decimal? totalshares, decimal? unitprice, decimal? totalprice, decimal? cTotalshares, decimal? cAmountpaidpershare, decimal? cAmountremainingUnpaidpershare, decimal? cTotalamountpaidpershare, decimal? cTotalamountunpaidpershare, string cSharerange, string cCertificateno, string sno, string linkid, string individualOrCompany)
        {

            return 0;
        }

        public int InsertStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor)
        {

            return 0;
        }

        public int InsertStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername)
        {

            return 0;
        }

        public int InsertStep3(string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer)
        {

            return 0;
        }

        public System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg)
        {
            int procResult;
            return InsertStep4Anothershareholder(step4Id, companyid, shareholderdetails, shareclasstypeValue, shareclasstypeText, noOfShares, amountpaidpershare, amountremainingunpaidpershare, isheldanotherorg, beneficialownername, individualOrCompany, individualOrCompanyName, individualOrCompanyAcn, individualOrCompanyAddress, individualOrCompanyDob, individualOrCompanyUnitLevelSuite, individualOrCompanyStreetNoName, individualOrCompanySuburbTownCity, individualOrCompanyState, individualOrCompanyPostcode, individualOrCompanyCountry, individualOrCompanyJoint, individualOrCompanyNameJoint, individualOrCompanyAcnJoint, individualOrCompanyAddressJoint, individualOrCompanyDobJoint, individualOrCompanyUnitLevelSuiteJoint, individualOrCompanyStreetNoNameJoint, individualOrCompanySuburbTownCityJoint, individualOrCompanyStateJoint, individualOrCompanyPostcodeJoint, individualOrCompanyCountryJoint, isjoint, dirid, shareoption, sharedetailsnotheldanotherorg, out procResult);
        }

        public System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel> InsertStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<InsertStep4AnothershareholderReturnModel>> InsertStep4AnothershareholderAsync(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, string shareoption, string sharedetailsnotheldanotherorg)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(InsertStep4Anothershareholder(step4Id, companyid, shareholderdetails, shareclasstypeValue, shareclasstypeText, noOfShares, amountpaidpershare, amountremainingunpaidpershare, isheldanotherorg, beneficialownername, individualOrCompany, individualOrCompanyName, individualOrCompanyAcn, individualOrCompanyAddress, individualOrCompanyDob, individualOrCompanyUnitLevelSuite, individualOrCompanyStreetNoName, individualOrCompanySuburbTownCity, individualOrCompanyState, individualOrCompanyPostcode, individualOrCompanyCountry, individualOrCompanyJoint, individualOrCompanyNameJoint, individualOrCompanyAcnJoint, individualOrCompanyAddressJoint, individualOrCompanyDobJoint, individualOrCompanyUnitLevelSuiteJoint, individualOrCompanyStreetNoNameJoint, individualOrCompanySuburbTownCityJoint, individualOrCompanyStateJoint, individualOrCompanyPostcodeJoint, individualOrCompanyCountryJoint, isjoint, dirid, shareoption, sharedetailsnotheldanotherorg, out procResult));
        }

        public int InsertLbLmsg(string companyid, string sms)
        {

            return 0;
        }

        public System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid)
        {
            int procResult;
            return SaveOptions(xml, uid, out procResult);
        }

        public System.Collections.Generic.List<SaveOptionsReturnModel> SaveOptions(string xml, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SaveOptionsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SaveOptionsReturnModel>> SaveOptionsAsync(string xml, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SaveOptions(xml, uid, out procResult));
        }

        public System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email)
        {
            int procResult;
            return SpGetProfile(email, out procResult);
        }

        public System.Collections.Generic.List<SpGetProfileReturnModel> SpGetProfile(string email, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetProfileReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetProfileReturnModel>> SpGetProfileAsync(string email)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetProfile(email, out procResult));
        }

        public SpInsertCompanysearchReturnModel SpInsertCompanysearch(string userid, string companyname, long? regid)
        {
            int procResult;
            return SpInsertCompanysearch(userid, companyname, regid, out procResult);
        }

        public SpInsertCompanysearchReturnModel SpInsertCompanysearch(string userid, string companyname, long? regid, out int procResult)
        {

            procResult = 0;
            return new SpInsertCompanysearchReturnModel();
        }

        public System.Threading.Tasks.Task<SpInsertCompanysearchReturnModel> SpInsertCompanysearchAsync(string userid, string companyname, long? regid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpInsertCompanysearch(userid, companyname, regid, out procResult));
        }

        public System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact()
        {
            int procResult;
            return UnreadContact(out procResult);
        }

        public System.Collections.Generic.List<UnreadContactReturnModel> UnreadContact(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UnreadContactReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UnreadContactReturnModel>> UnreadContactAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UnreadContact(out procResult));
        }

        public int UpdateStep1(string companyid, string companyname, string companynameExt, string stateterritorry, string isspecialpurpose, string isreservecompany410, string reservecompany410Asicnamereservationnumber, string reservecompany410Fulllegalname, string isproposeidentical, string proposeidenticalBefore28May, string proposeidenticalAfter28May, int? proposeidenticalBefore28MayTotalstate, string proposeidenticalBefore28MayPreviousbusinessno1, string proposeidenticalBefore28MayPreviousbusinessno2, string proposeidenticalBefore28MayPreviousbusinessno3, string proposeidenticalBefore28MayPreviousbusinessno4, string proposeidenticalBefore28MayPreviousbusinessno5, string proposeidenticalBefore28MayPreviousbusinessno6, string proposeidenticalBefore28MayPreviousbusinessno7, string proposeidenticalBefore28MayPreviousbusinessno8, string proposeidenticalBefore28MayPreviousstateteritory1, string proposeidenticalBefore28MayPreviousstateteritory2, string proposeidenticalBefore28MayPreviousstateteritory3, string proposeidenticalBefore28MayPreviousstateteritory4, string proposeidenticalBefore28MayPreviousstateteritory5, string proposeidenticalBefore28MayPreviousstateteritory6, string proposeidenticalBefore28MayPreviousstateteritory7, string proposeidenticalBefore28MayPreviousstateteritory8, string proposeidenticalAfter28MayAbnnumber, string isultimateholdingcompany, string ultimateholdingcompanyFulllegalname, string ultimateholdingcompanyCountry, string ultimateholdingcompanyAcnArbn, string ultimateholdingcompanyAbn, string acn, string typeofcompany, string classofcompany, string specialpurposeIfapplicable, string cash, string writtencontact, string orgIndv, string fullOrgName, string rdoSmsfYesNo, string proposedNameYesNo, string openingTime, string closingTime, bool? isstandardHours, string trusteeTrustname, string trusteeAbn, string trusteeTfn, string trusteeAddress, string trusteeCountry, string companyusedfor, string ulimateHoldingCompany, string ucompanyname, string acnarbnabn, string countryIcor)
        {

            return 0;
        }

        public int UpdateStep2(string companyid, string contactperson, string unitLevelSuite, string streetNoName, string suburbTownCity, string state, string postcode, string iscompanylocatedaboveaddress, string isprimaryaddress, string contactpersonPrimary, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string occupiername)
        {

            return 0;
        }

        public int UpdateStep3(int? id, string companyid, string designation, string firstname, string middlename, string familyname, string anyformername, string firstnameFormer, string middlenameFormer, string familynameFormer, string unitLevelSuitePrimary, string streetNoNamePrimary, string suburbTownCityPrimary, string statePrimary, string postcodePrimary, string country, string dob, string placeofbirth, string countryofbirth, string isDirector, string isSecretary, string isPublicOfficer)
        {

            return 0;
        }

        public int UpdateStep4Anothershareholder(int? step4Id, string companyid, string shareholderdetails, string shareclasstypeValue, string shareclasstypeText, int? noOfShares, decimal? amountpaidpershare, decimal? amountremainingunpaidpershare, string isheldanotherorg, string beneficialownername, string individualOrCompany, string individualOrCompanyName, string individualOrCompanyAcn, string individualOrCompanyAddress, string individualOrCompanyDob, string individualOrCompanyUnitLevelSuite, string individualOrCompanyStreetNoName, string individualOrCompanySuburbTownCity, string individualOrCompanyState, string individualOrCompanyPostcode, string individualOrCompanyCountry, string individualOrCompanyJoint, string individualOrCompanyNameJoint, string individualOrCompanyAcnJoint, string individualOrCompanyAddressJoint, string individualOrCompanyDobJoint, string individualOrCompanyUnitLevelSuiteJoint, string individualOrCompanyStreetNoNameJoint, string individualOrCompanySuburbTownCityJoint, string individualOrCompanyStateJoint, string individualOrCompanyPostcodeJoint, string individualOrCompanyCountryJoint, string isjoint, int? dirid, int? id, string placeofbirth, string shareoption, string sharedetailsnotheldanotherorg)
        {

            return 0;
        }

        public UpdateBeneficiariesReturnModel UpdateBeneficiaries(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid)
        {
            int procResult;
            return UpdateBeneficiaries(xml, cid, companyName, companyAcn, companyRegdate, contactName, bType, trustId, uid, out procResult);
        }

        public UpdateBeneficiariesReturnModel UpdateBeneficiaries(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid, out int procResult)
        {

            procResult = 0;
            return new UpdateBeneficiariesReturnModel();
        }

        public System.Threading.Tasks.Task<UpdateBeneficiariesReturnModel> UpdateBeneficiariesAsync(string xml, long? cid, string companyName, string companyAcn, System.DateTime? companyRegdate, string contactName, string bType, long? trustId, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UpdateBeneficiaries(xml, cid, companyName, companyAcn, companyRegdate, contactName, bType, trustId, uid, out procResult));
        }

        public System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid)
        {
            int procResult;
            return UpdatecompanyOption(cid, quotefortax, legelassessment, borrowing, agreement, companySecretary, publicOfficerOfCompany, howfstmeetingOfDirheld, dateOfIncorporation, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdatecompanyOptionReturnModel> UpdatecompanyOption(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UpdatecompanyOptionReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatecompanyOptionReturnModel>> UpdatecompanyOptionAsync(long? cid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, string companySecretary, string publicOfficerOfCompany, string howfstmeetingOfDirheld, string dateOfIncorporation, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UpdatecompanyOption(cid, quotefortax, legelassessment, borrowing, agreement, companySecretary, publicOfficerOfCompany, howfstmeetingOfDirheld, dateOfIncorporation, uid, out procResult));
        }

        public System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id)
        {
            int procResult;
            return UpdateContactstatus(id, out procResult);
        }

        public System.Collections.Generic.List<UpdateContactstatusReturnModel> UpdateContactstatus(long? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UpdateContactstatusReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateContactstatusReturnModel>> UpdateContactstatusAsync(long? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UpdateContactstatus(id, out procResult));
        }

        public System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber)
        {
            int procResult;
            return Updatetrust(id, name, type, setupDate, state, smsf, acn, abn, ptn, padd, lname, uid, smsfCompanyName, smsfAcn, smsfCompanySetupDate, propertyTrusteeDate, existingSetupDate, clauseNumber, out procResult);
        }

        public System.Collections.Generic.List<UpdatetrustReturnModel> Updatetrust(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UpdatetrustReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UpdatetrustReturnModel>> UpdatetrustAsync(long? id, string name, string type, System.DateTime? setupDate, string state, string smsf, string acn, string abn, string ptn, string padd, string lname, long? uid, string smsfCompanyName, string smsfAcn, System.DateTime? smsfCompanySetupDate, System.DateTime? propertyTrusteeDate, System.DateTime? existingSetupDate, string clauseNumber)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Updatetrust(id, name, type, setupDate, state, smsf, acn, abn, ptn, padd, lname, uid, smsfCompanyName, smsfAcn, smsfCompanySetupDate, propertyTrusteeDate, existingSetupDate, clauseNumber, out procResult));
        }

        public System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid)
        {
            int procResult;
            return UpdateTrustAppointer(xml, tid, unitcost, totalmember, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdateTrustAppointerReturnModel> UpdateTrustAppointer(string xml, long? tid, string unitcost, string totalmember, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UpdateTrustAppointerReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustAppointerReturnModel>> UpdateTrustAppointerAsync(string xml, long? tid, string unitcost, string totalmember, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UpdateTrustAppointer(xml, tid, unitcost, totalmember, uid, out procResult));
        }

        public System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid)
        {
            int procResult;
            return UpdateTrustOption(tid, quotefortax, legelassessment, borrowing, agreement, uid, out procResult);
        }

        public System.Collections.Generic.List<UpdateTrustOptionReturnModel> UpdateTrustOption(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UpdateTrustOptionReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateTrustOptionReturnModel>> UpdateTrustOptionAsync(long? tid, bool? quotefortax, bool? legelassessment, bool? borrowing, bool? agreement, long? uid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UpdateTrustOption(tid, quotefortax, legelassessment, borrowing, agreement, uid, out procResult));
        }

        public System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno)
        {
            int procResult;
            return Userlogin(email, pass, regno, out procResult);
        }

        public System.Collections.Generic.List<UserloginReturnModel> Userlogin(string email, string pass, string regno, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UserloginReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginReturnModel>> UserloginAsync(string email, string pass, string regno)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Userlogin(email, pass, regno, out procResult));
        }

        public System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass)
        {
            int procResult;
            return UserloginNew(email, pass, out procResult);
        }

        public System.Collections.Generic.List<UserloginNewReturnModel> UserloginNew(string email, string pass, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UserloginNewReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserloginNewReturnModel>> UserloginNewAsync(string email, string pass)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UserloginNew(email, pass, out procResult));
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ASIC_TXN_File
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AsicTxnFile
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 300)
        public System.DateTime? Txndate { get; set; } // txndate
        public string Formdata { get; set; } // formdata
        public string AsicResponse { get; set; } // AsicResponse
        public string TransStatus { get; set; } // TRANS_STATUS (length: 50)
        public string Ra56 { get; set; } // RA56
        public string Ra55 { get; set; } // RA55
        public string Acn { get; set; } // ACN (length: 50)
        public string DocumentNumber { get; set; } // DOCUMENT_NUMBER (length: 50)
        public string Datera55 { get; set; } // DATERA55 (length: 50)
        public string Datera56 { get; set; } // DATERA56 (length: 50)
        public string Companyname { get; set; } // companyname (length: 300)

        public AsicTxnFile()
        {
            Txndate = System.DateTime.Now;
            TransStatus = "";
            Acn = "";
            DocumentNumber = "";
        }
    }

    // ASIC_TXN_STATUS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AsicTxnStatus
    {
        public int Id { get; set; } // id (Primary key)
        public int? Companyid { get; set; } // companyid
        public System.DateTime? Txndate { get; set; } // txndate
        public int? Iserror { get; set; } // iserror
        public int? Istxnsuccess { get; set; } // istxnsuccess
        public int? Isaccepted { get; set; } // isaccepted
        public string Ra55Data { get; set; } // ra55data
        public string Ra56Data { get; set; } // ra56data

        public AsicTxnStatus()
        {
            Txndate = System.DateTime.Now;
        }
    }

    // companysearch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Companysearch
    {
        public int Id { get; set; } // id (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 200)
        public System.DateTime? SearchOn { get; set; } // SearchOn
        public string Userid { get; set; } // userid (length: 50)
        public string Status { get; set; } // status (length: 20)
        public string Fullname { get; set; } // FULLNAME (length: 300)
        public string AsicStatus { get; set; } // Asic_status (length: 20)
        public string AsicError { get; set; } // Asic_Error
        public string AsicFile { get; set; } // Asic_File
        public string AsicAcn { get; set; } // Asic_ACN (length: 50)
        public string AsicDocNo { get; set; } // Asic_DocNo (length: 50)
        public string AsicResType { get; set; } // Asic_ResType (length: 50)
        public string Isship { get; set; } // isship (length: 50)
        public string FullAddress { get; set; } // FullAddress (length: 500)
        public int? ShowStatus { get; set; } // show_status
        public long? Regid { get; set; } // Regid
        public string AsicOutFile { get; set; } // Asic_OUT_File
        public string Govofcomapany { get; set; } // govofcomapany

        public Companysearch()
        {
            SearchOn = System.DateTime.Now;
            AsicStatus = "INCOMPLETE";
            Isship = "No";
        }
    }

    // LBLmsg
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class LbLmsg
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 200)
        public string Sms { get; set; } // sms
        public System.DateTime? Entrydate { get; set; } // entrydate
    }

    // lodgement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Lodgement
    {
        public int Id { get; set; } // id (Primary key)
        public string AsicRegisteredAgentNo { get; set; } // asic_registered_agentNo (length: 50)
        public string Firm { get; set; } // firm (length: 100)
        public string Contactname { get; set; } // contactname (length: 100)
        public string Telephone { get; set; } // telephone (length: 50)
        public string Email { get; set; } // email (length: 50)
        public string Postaladdress { get; set; } // postaladdress (length: 200)
        public string Suburb { get; set; } // suburb (length: 50)
        public string Stateterritory { get; set; } // stateterritory (length: 50)
        public string Postcode { get; set; } // postcode (length: 10)
    }

    // RA55
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Ra55
    {
        public int Id { get; set; } // id (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 300)
        public string Acn { get; set; } // ACN (length: 20)
        public string CompanyType { get; set; } // CompanyType (length: 50)
        public string CompanyClass { get; set; } // CompanyClass (length: 50)
        public string CertificatePrintOption { get; set; } // CertificatePrintOption (length: 50)
        public string JurisdictionOfRegistration { get; set; } // JurisdictionOfRegistration (length: 50)
        public string DateOfRegistration { get; set; } // DateOfRegistration (length: 50)
        public string CompanySubclass { get; set; } // CompanySubclass (length: 50)
        public string AccountNumber { get; set; } // AccountNumber (length: 50)
        public string SupplierName { get; set; } // SupplierName (length: 100)
        public string SupplierAbn { get; set; } // SupplierABN (length: 50)
        public string RegisteredAgentName { get; set; } // RegisteredAgentName (length: 100)
        public string RegisteredAgentAddress { get; set; } // RegisteredAgentAddress (length: 500)
        public string InvoiceDescription { get; set; } // InvoiceDescription (length: 500)
        public string InvoiceAmmount { get; set; } // InvoiceAmmount (length: 50)
        public string DocumentNumber { get; set; } // DocumentNumber (length: 50)
        public string FormCode { get; set; } // FormCode (length: 20)
        public string TaxInvoiceText { get; set; } // TaxInvoiceText (length: 30)
        public string TaxCode { get; set; } // TaxCode (length: 10)
        public string TaxAmmount { get; set; } // TaxAmmount (length: 20)
        public System.DateTime? Entrydate { get; set; } // entrydate

        public Ra55()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // RA56
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Ra56
    {
        public int Id { get; set; } // id (Primary key)
        public string ProposedCompanyName { get; set; } // ProposedCompanyName (length: 300)
        public string RequestDocumentNumber { get; set; } // RequestDocumentNumber (length: 50)
        public string DateOfAdvice { get; set; } // DateOfAdvice (length: 50)
        public string AsicAdviceType { get; set; } // ASICAdviceType (length: 50)
        public string AccountNumber { get; set; } // AccountNumber (length: 50)
        public string SupplierName { get; set; } // SupplierName (length: 100)
        public string SupplierAbn { get; set; } // SupplierABN (length: 50)
        public string RegisteredAgentName { get; set; } // RegisteredAgentName (length: 100)
        public string RegisteredAgentAddress { get; set; } // RegisteredAgentAddress (length: 500)
        public string InvoiceDescription { get; set; } // InvoiceDescription (length: 300)
        public string InvoiceAmmount { get; set; } // InvoiceAmmount (length: 20)
        public string DocumentNumber { get; set; } // DocumentNumber (length: 20)
        public string FormCode { get; set; } // FormCode (length: 20)
        public string TaxInvoiceText { get; set; } // TaxInvoiceText (length: 20)
        public string TaxCode { get; set; } // TaxCode (length: 20)
        public string TaxAmmount { get; set; } // TaxAmmount (length: 20)
        public string StatusText { get; set; } // StatusText
        public System.DateTime? Entrydate { get; set; } // entrydate

        public Ra56()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // Registration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Registration
    {
        public int Sno { get; set; } // sno (Primary key)
        public string AgentSiteName { get; set; } // AgentSiteName (length: 50)
        public string GivenName { get; set; } // GivenName (length: 50)
        public string FamilyName { get; set; } // FamilyName (length: 50)
        public string Email { get; set; } // Email (length: 100)
        public string Pass { get; set; } // pass (length: 500)
        public string ProfileCategory { get; set; } // ProfileCategory (length: 30)
        public string Phone { get; set; } // Phone (length: 30)
        public string OrganizationName { get; set; } // OrganizationName (length: 100)
        public string OrganizationAbn { get; set; } // OrganizationABN (length: 50)
        public string UnitLevelSuits { get; set; } // UnitLevelSuits (length: 100)
        public string StreetNumberStreetName { get; set; } // StreetNumberStreetName (length: 100)
        public string Suburb { get; set; } // Suburb (length: 50)
        public string State { get; set; } // State (length: 30)
        public string Postcode { get; set; } // Postcode (length: 10)
        public string Fax { get; set; } // Fax (length: 20)
        public System.DateTime? Registrationdate { get; set; } // registrationdate
        public int? Isactive { get; set; } // isactive
        public string Website { get; set; } // Website (length: 100)
        public string Logopath { get; set; } // Logopath

        public Registration()
        {
            Registrationdate = System.DateTime.Now;
            Isactive = 1;
        }
    }

    // Share_Allocate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ShareAllocate
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 50)
        public string Shareclass { get; set; } // shareclass (length: 100)
        public int? Totalshares { get; set; } // totalshares
        public decimal? Unitprice { get; set; } // unitprice
        public decimal? Totalprice { get; set; } // totalprice
        public System.DateTime? Entrydate { get; set; } // entrydate
        public int? Sno { get; set; } // sno

        public ShareAllocate()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // Share_distribute_grid
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ShareDistributeGrid
    {
        public int Id { get; set; } // id (Primary key)
        public string Linkid { get; set; } // linkid (length: 100)
        public string Sno { get; set; } // sno (length: 10)
        public string Companyid { get; set; } // companyid (length: 50)
        public string Shareclass { get; set; } // shareclass (length: 100)
        public decimal? Totalshares { get; set; } // totalshares
        public decimal? Unitprice { get; set; } // unitprice
        public decimal? Totalprice { get; set; } // totalprice
        public decimal? CTotalshares { get; set; } // c_totalshares
        public decimal? CAmountpaidpershare { get; set; } // c_amountpaidpershare
        public decimal? CAmountremainingUnpaidpershare { get; set; } // c_amountremaining_unpaidpershare
        public decimal? CTotalamountpaidpershare { get; set; } // c_totalamountpaidpershare
        public decimal? CTotalamountunpaidpershare { get; set; } // c_totalamountunpaidpershare
        public string CSharerange { get; set; } // c_sharerange (length: 20)
        public string CCertificateno { get; set; } // c_certificateno (length: 50)
        public System.DateTime? Entrydate { get; set; } // entrydate
        public string IndividualOrCompany { get; set; } // individual_or_company (length: 100)

        public ShareDistributeGrid()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // step1
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step1
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 50)
        public string Companyname { get; set; } // companyname (length: 200)
        public string CompanynameExt { get; set; } // companyname_ext (length: 50)
        public string Stateterritorry { get; set; } // stateterritorry (length: 50)
        public string Isspecialpurpose { get; set; } // isspecialpurpose (length: 10)
        public string Isreservecompany410 { get; set; } // isreservecompany410 (length: 10)
        public string Reservecompany410Asicnamereservationnumber { get; set; } // reservecompany410_asicnamereservationnumber (length: 100)
        public string Reservecompany410Fulllegalname { get; set; } // reservecompany410_fulllegalname (length: 100)
        public string Isproposeidentical { get; set; } // isproposeidentical (length: 10)
        public string ProposeidenticalBefore28May { get; set; } // proposeidentical_before28may (length: 10)
        public string ProposeidenticalAfter28May { get; set; } // proposeidentical_after28may (length: 10)
        public string ProposeidenticalBefore28MayPreviousbusinessno1 { get; set; } // proposeidentical_before28may_previousbusinessno1 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory1 { get; set; } // proposeidentical_before28may_previousstateteritory1 (length: 50)
        public string ProposeidenticalAfter28MayAbnnumber { get; set; } // proposeidentical_after28may_abnnumber (length: 50)
        public string Isultimateholdingcompany { get; set; } // isultimateholdingcompany (length: 10)
        public string UltimateholdingcompanyFulllegalname { get; set; } // ultimateholdingcompany_fulllegalname (length: 100)
        public string UltimateholdingcompanyCountry { get; set; } // ultimateholdingcompany_country (length: 50)
        public string UltimateholdingcompanyAcnArbn { get; set; } // ultimateholdingcompany_ACN_ARBN (length: 50)
        public string UltimateholdingcompanyAbn { get; set; } // ultimateholdingcompany_ABN (length: 50)
        public System.DateTime? Entrydate { get; set; } // entrydate
        public string Acn { get; set; } // acn (length: 50)
        public string Typeofcompany { get; set; } // typeofcompany (length: 30)
        public string Classofcompany { get; set; } // classofcompany (length: 50)
        public string SpecialpurposeIfapplicable { get; set; } // specialpurpose_ifapplicable (length: 50)
        public string Cash { get; set; } // cash (length: 30)
        public string Writtencontact { get; set; } // writtencontact (length: 50)
        public string IndivisualCompanyAsicForm401 { get; set; } // Indivisual_Company_Asic_form401 (length: 50)
        public string CompanyNameAsicFrom401 { get; set; } // CompanyName_Asic_from401 (length: 50)
        public string CompanyActingAsTrustee { get; set; } // CompanyActingAsTrustee (length: 10)
        public string ProposedNameYesNo { get; set; } // proposed_Name_Yes_No (length: 10)
        public int? ProposeidenticalBefore28MayTotalstate { get; set; } // proposeidentical_before28may_totalstate
        public string ProposeidenticalBefore28MayPreviousbusinessno2 { get; set; } // proposeidentical_before28may_previousbusinessno2 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory2 { get; set; } // proposeidentical_before28may_previousstateteritory2 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno3 { get; set; } // proposeidentical_before28may_previousbusinessno3 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory3 { get; set; } // proposeidentical_before28may_previousstateteritory3 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno4 { get; set; } // proposeidentical_before28may_previousbusinessno4 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory4 { get; set; } // proposeidentical_before28may_previousstateteritory4 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno5 { get; set; } // proposeidentical_before28may_previousbusinessno5 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory5 { get; set; } // proposeidentical_before28may_previousstateteritory5 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno6 { get; set; } // proposeidentical_before28may_previousbusinessno6 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory6 { get; set; } // proposeidentical_before28may_previousstateteritory6 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno7 { get; set; } // proposeidentical_before28may_previousbusinessno7 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory7 { get; set; } // proposeidentical_before28may_previousstateteritory7 (length: 50)
        public string ProposeidenticalBefore28MayPreviousbusinessno8 { get; set; } // proposeidentical_before28may_previousbusinessno8 (length: 50)
        public string ProposeidenticalBefore28MayPreviousstateteritory8 { get; set; } // proposeidentical_before28may_previousstateteritory8 (length: 50)
        public string Openingtime { get; set; } // Openingtime (length: 50)
        public string Closingtime { get; set; } // Closingtime (length: 50)
        public bool? StandardHours { get; set; } // standard_hours
        public string TrusteeTrustname { get; set; } // trustee_trustname (length: 100)
        public string TrusteeAbn { get; set; } // trustee_abn (length: 30)
        public string TrusteeTfn { get; set; } // trustee_tfn (length: 50)
        public string TrusteeAddress { get; set; } // trustee_address (length: 300)
        public string TrusteeCountry { get; set; } // trustee_country (length: 100)
        public string Companyusedfor { get; set; } // companyusedfor (length: 100)
        public string Typeofuser { get; set; } // typeofuser (length: 50)
        public string UlimateHoldingCompany { get; set; } // ulimateHoldingCompany
        public string Ucompanyname { get; set; } // ucompanyname
        public string Acnarbnabn { get; set; } // acnarbnabn
        public string CountryIcor { get; set; } // countryIcor

        public Step1()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // step2
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step2
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 50)
        public string Contactperson { get; set; } // contactperson (length: 100)
        public string UnitLevelSuite { get; set; } // unit_level_suite (length: 100)
        public string StreetNoName { get; set; } // streetNoName (length: 100)
        public string SuburbTownCity { get; set; } // suburb_town_city (length: 50)
        public string State { get; set; } // state (length: 50)
        public string Postcode { get; set; } // postcode (length: 10)
        public string Iscompanylocatedaboveaddress { get; set; } // iscompanylocatedaboveaddress (length: 100)
        public string Isprimaryaddress { get; set; } // isprimaryaddress (length: 10)
        public string ContactpersonPrimary { get; set; } // contactperson_primary (length: 100)
        public string UnitLevelSuitePrimary { get; set; } // unit_level_suite_primary (length: 100)
        public string StreetNoNamePrimary { get; set; } // streetNoName_primary (length: 100)
        public string SuburbTownCityPrimary { get; set; } // suburb_town_city_primary (length: 50)
        public string StatePrimary { get; set; } // state_primary (length: 50)
        public string PostcodePrimary { get; set; } // postcode_primary (length: 10)
        public System.DateTime? Entrydate { get; set; } // entrydate
        public string Occupiername { get; set; } // occupiername (length: 50)

        public Step2()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // step3
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step3
    {
        public int Id { get; set; } // id (Primary key)
        public string Companyid { get; set; } // companyid (length: 50)
        public string Designation { get; set; } // designation (length: 20)
        public string Firstname { get; set; } // firstname (length: 50)
        public string Middlename { get; set; } // middlename (length: 50)
        public string Familyname { get; set; } // familyname (length: 50)
        public string Anyformername { get; set; } // anyformername (length: 10)
        public string FirstnameFormer { get; set; } // firstname_former (length: 50)
        public string MiddlenameFormer { get; set; } // middlename_former (length: 50)
        public string FamilynameFormer { get; set; } // familyname_former (length: 50)
        public string UnitLevelSuitePrimary { get; set; } // unit_level_suite_primary (length: 100)
        public string StreetNoNamePrimary { get; set; } // streetNoName_primary (length: 100)
        public string SuburbTownCityPrimary { get; set; } // suburb_town_city_primary (length: 300)
        public string StatePrimary { get; set; } // state_primary (length: 50)
        public string PostcodePrimary { get; set; } // postcode_primary (length: 10)
        public string Country { get; set; } // country (length: 100)
        public string Dob { get; set; } // dob (length: 20)
        public string Placeofbirth { get; set; } // placeofbirth (length: 50)
        public string Countryofbirth { get; set; } // countryofbirth (length: 100)
        public System.DateTime? Entrydate { get; set; } // entrydate
        public string Isdirector { get; set; } // isdirector (length: 20)
        public string Issecretary { get; set; } // issecretary (length: 20)
        public string Ispublicofficer { get; set; } // ispublicofficer (length: 20)

        public Step3()
        {
            Entrydate = System.DateTime.Now;
        }
    }

    // step4_anothershareholder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step4Anothershareholder
    {
        public int Id { get; set; } // id (Primary key)
        public int? Step4Id { get; set; } // step4ID
        public string Companyid { get; set; } // companyid (length: 50)
        public string Shareholderdetails { get; set; } // shareholderdetails (length: 100)
        public string ShareclasstypeValue { get; set; } // shareclasstype_value (length: 50)
        public string ShareclasstypeText { get; set; } // shareclasstype_text (length: 100)
        public int? NoOfShares { get; set; } // no_of_shares
        public decimal? Amountpaidpershare { get; set; } // amountpaidpershare
        public decimal? Amountremainingunpaidpershare { get; set; } // amountremainingunpaidpershare
        public string Isheldanotherorg { get; set; } // isheldanotherorg (length: 10)
        public string Beneficialownername { get; set; } // beneficialownername (length: 50)
        public string IndividualOrCompany { get; set; } // individual_or_company (length: 20)
        public string IndividualOrCompanyName { get; set; } // individual_or_company_name (length: 50)
        public string IndividualOrCompanyAddress { get; set; } // individual_or_company_address
        public System.DateTime? Entrydate { get; set; } // entrydate
        public string IndividualOrCompanyAcn { get; set; } // individual_or_company_acn (length: 100)
        public string IndividualOrCompanyDob { get; set; } // individual_or_company_dob (length: 20)
        public string IndividualOrCompanyUnitLevelSuite { get; set; } // individual_or_company_unit_level_suite (length: 50)
        public string IndividualOrCompanyStreetNoName { get; set; } // individual_or_company_streetNoName (length: 300)
        public string IndividualOrCompanySuburbTownCity { get; set; } // individual_or_company_suburb_town_city (length: 100)
        public string IndividualOrCompanyState { get; set; } // individual_or_company_state (length: 50)
        public string IndividualOrCompanyPostcode { get; set; } // individual_or_company_postcode (length: 20)
        public string IndividualOrCompanyCountry { get; set; } // individual_or_company_country (length: 30)
        public string Isjoint { get; set; } // ISJOINT (length: 5)
        public string JointIndividualOrCompany { get; set; } // JOINT_individual_or_company (length: 20)
        public string JointIndividualOrCompanyName { get; set; } // joint_individual_or_company_name (length: 50)
        public string JointIndividualOrCompanyAcn { get; set; } // joint_individual_or_company_acn (length: 50)
        public string JointIndividualOrCompanyDob { get; set; } // joint_individual_or_company_dob (length: 50)
        public string JointIndividualOrCompanyUnitLevelSuite { get; set; } // joint_individual_or_company_unit_level_suite (length: 50)
        public string JointIndividualOrCompanyStreetNoName { get; set; } // joint_individual_or_company_streetNoName (length: 300)
        public string JointIndividualOrCompanySuburbTownCity { get; set; } // joint_individual_or_company_suburb_town_city (length: 100)
        public string JointIndividualOrCompanyState { get; set; } // joint_individual_or_company_state (length: 50)
        public string JointIndividualOrCompanyPostcode { get; set; } // joint_individual_or_company_postcode (length: 50)
        public string JointIndividualOrCompanyCountry { get; set; } // joint_individual_or_company_country (length: 50)
        public int? Dirid { get; set; } // dirid
        public string Placeofbirth { get; set; } // placeofbirth
        public string Shareoption { get; set; } // shareoption (length: 50)
        public string Sharedetailsnotheldanotherorg { get; set; } // sharedetailsnotheldanotherorg (length: 250)

        public Step4Anothershareholder()
        {
            Entrydate = System.DateTime.Now;
            Dirid = 0;
        }
    }

    // Tbl_Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompany
    {
        public long Id { get; set; } // Id (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 500)
        public bool? NameReserved { get; set; } // NameReserved
        public string Abn { get; set; } // ABN (length: 50)
        public string CompanyPurpose { get; set; } // CompanyPurpose (length: 4000)
        public string CompanyUseFor { get; set; } // CompanyUseFor (length: 4000)
        public string RegistrationState { get; set; } // RegistrationState (length: 50)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public bool Registered { get; set; } // Registered
        public string Status { get; set; } // Status (length: 50)
        public bool? SmsFdeclaration { get; set; } // SMSFdeclaration
        public bool? QuoteForTax { get; set; } // QuoteForTax
        public bool? LegalAssessment { get; set; } // LegalAssessment
        public bool? BorrowingReview { get; set; } // BorrowingReview
        public bool? Agreement { get; set; } // Agreement
        public string CompanySecretary { get; set; } // CompanySecretary (length: 250)
        public string PublicOfficerOfCompany { get; set; } // PublicOfficerOfCompany (length: 250)
        public string HowfstmeetingOfDirheld { get; set; } // HowfstmeetingOfDirheld (length: 250)
        public string DateOfIncorporation { get; set; } // DateOfIncorporation (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TblCompanyAddress> TblCompanyAddresses { get; set; } // Tbl_CompanyAddress.FK_Tbl_CompanyAddress_Tbl_Company
        public virtual System.Collections.Generic.ICollection<TblCompanyDirector> TblCompanyDirectors { get; set; } // Tbl_CompanyDirector.FK_Tbl_CompanyDirector_Tbl_Company
        public virtual System.Collections.Generic.ICollection<TblCompanyShare> TblCompanyShares { get; set; } // Tbl_CompanyShare.FK_Tbl_CompanyShare_Tbl_Company
        public virtual System.Collections.Generic.ICollection<TblCompanyTrust> TblCompanyTrusts { get; set; } // Tbl_CompanyTrust.FK_Tbl_Trust_Tbl_Company

        // Foreign keys
        public virtual TblUser TblUser_AddedBy { get; set; } // FK_Tbl_Company_Tbl_User
        public virtual TblUser TblUser_UpdatedBy { get; set; } // FK_Tbl_Company_Tbl_User1

        public TblCompany()
        {
            NameReserved = false;
            Registered = false;
            TblCompanyAddresses = new System.Collections.Generic.List<TblCompanyAddress>();
            TblCompanyDirectors = new System.Collections.Generic.List<TblCompanyDirector>();
            TblCompanyShares = new System.Collections.Generic.List<TblCompanyShare>();
            TblCompanyTrusts = new System.Collections.Generic.List<TblCompanyTrust>();
        }
    }

    // Tbl_CompanyAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyAddress
    {
        public long Id { get; set; } // Id (Primary key)
        public long? CompanyId { get; set; } // CompanyId
        public string UnitLevel { get; set; } // UnitLevel (length: 2000)
        public string Street { get; set; } // Street (length: 2000)
        public string State { get; set; } // State (length: 500)
        public string Suburb { get; set; } // Suburb (length: 500)
        public string PostCode { get; set; } // PostCode (length: 500)
        public bool? IsRegisteredAddress { get; set; } // IsRegisteredAddress
        public bool? IsPrincipleAddress { get; set; } // IsPrincipleAddress
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Foreign keys
        public virtual TblCompany TblCompany { get; set; } // FK_Tbl_CompanyAddress_Tbl_Company
    }

    // Tbl_CompanyDirector
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyDirector
    {
        public long Id { get; set; } // Id (Primary key)
        public long? CompanyId { get; set; } // CompanyId
        public string FirstName { get; set; } // FirstName (length: 500)
        public string LastName { get; set; } // LastName (length: 500)
        public int? DoBday { get; set; } // DOBday
        public int? DoBmonth { get; set; } // DOBmonth
        public int? DoByear { get; set; } // DOByear
        public string DoBcountry { get; set; } // DOBcountry (length: 500)
        public string DoBstate { get; set; } // DOBstate (length: 500)
        public string DoBcity { get; set; } // DOBcity (length: 500)
        public string DoBaddress { get; set; } // DOBaddress (length: 500)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TblCompanyShare> TblCompanyShares { get; set; } // Tbl_CompanyShare.FK_Tbl_CompanyShare_Tbl_CompanyDirector

        // Foreign keys
        public virtual TblCompany TblCompany { get; set; } // FK_Tbl_CompanyDirector_Tbl_Company

        public TblCompanyDirector()
        {
            TblCompanyShares = new System.Collections.Generic.List<TblCompanyShare>();
        }
    }

    // Tbl_CompanyShare
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyShare
    {
        public long Id { get; set; } // Id (Primary key)
        public long? CompanyId { get; set; } // CompanyId
        public long? DirectorId { get; set; } // DirectorId
        public string ShareClass { get; set; } // ShareClass (length: 500)
        public int? NoOfShare { get; set; } // NoOfShare
        public double? ShareAmount { get; set; } // ShareAmount
        public bool ShareBehalf { get; set; } // ShareBehalf (Primary key)
        public string OwnerName { get; set; } // OwnerName (length: 500)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Foreign keys
        public virtual TblCompany TblCompany { get; set; } // FK_Tbl_CompanyShare_Tbl_Company
        public virtual TblCompanyDirector TblCompanyDirector { get; set; } // FK_Tbl_CompanyShare_Tbl_CompanyDirector

        public TblCompanyShare()
        {
            ShareBehalf = false;
        }
    }

    // Tbl_CompanyTrust
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyTrust
    {
        public long Id { get; set; } // Id (Primary key)
        public long? CompanyId { get; set; } // CompanyId
        public string TrustName { get; set; } // TrustName (length: 500)
        public string TrustAbn { get; set; } // TrustABN (length: 50)
        public string TrustTfn { get; set; } // TrustTFN (length: 50)
        public string Country { get; set; } // Country (length: 50)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string TrustAddress { get; set; } // TrustAddress (length: 500)

        // Foreign keys
        public virtual TblCompany TblCompany { get; set; } // FK_Tbl_Trust_Tbl_Company
    }

    // Tbl_Contact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblContact
    {
        public long Id { get; set; } // id (Primary key)
        public string Name { get; set; } // Name (length: 500)
        public string Email { get; set; } // Email (length: 500)
        public string Subject { get; set; } // Subject (length: 500)
        public string Message { get; set; } // Message
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public bool? Status { get; set; } // Status
    }

    // Tbl_Options
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblOption
    {
        public int Id { get; set; } // Id (Primary key)
        public string OptionName { get; set; } // OptionName (length: 4000)
        public string OptionValue { get; set; } // OptionValue (length: 4000)
        public string Type { get; set; } // _Type (length: 250)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public int? AddedBy { get; set; } // AddedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public int? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? DeletedDate { get; set; } // DeletedDate
        public int? DeletedBy { get; set; } // DeletedBy
        public bool? Del { get; set; } // Del
    }

    // Tbl_Transaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTransaction
    {
        public long Id { get; set; } // Id (Primary key)
        public bool? TransactionStatus { get; set; } // TransactionStatus
        public double? Amount { get; set; } // Amount
        public long? TrustCompanyId { get; set; } // TrustCompanyId
        public string FormType { get; set; } // FormType (length: 50)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public long? UpdatedBy { get; set; } // UpdatedBy
        public string TxnId { get; set; } // TxnId (length: 50)
        public string FormName { get; set; } // FormName (length: 4000)
    }

    // Tbl_Trust
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrust
    {
        public long Id { get; set; } // Id (Primary key)
        public string FirstName { get; set; } // FirstName (length: 200)
        public string LastName { get; set; } // LastName (length: 200)
        public string Email { get; set; } // Email (length: 500)
        public string Phone { get; set; } // Phone (length: 50)
        public string TrustType { get; set; } // TrustType (length: 50)
        public string TrustName { get; set; } // TrustName (length: 500)
        public System.DateTime? TrustSetupDate { get; set; } // TrustSetupDate
        public string TrustState { get; set; } // TrustState (length: 200)
        public string OrdinaryPrice { get; set; } // OrdinaryPrice (length: 50)
        public string TotalUnitHolders { get; set; } // TotalUnitHolders (length: 50)
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public bool? QuoteForTax { get; set; } // QuoteForTax
        public bool? LegalAssessment { get; set; } // LegalAssessment
        public bool? BorrowingReview { get; set; } // BorrowingReview
        public bool? Agreement { get; set; } // Agreement
        public string Smsf { get; set; } // SMSF (length: 2000)
        public string Abn { get; set; } // ABN (length: 2000)
        public string PropertyTrusteeName { get; set; } // PropertyTrusteeName (length: 2000)
        public string PropertyTrusteeAcn { get; set; } // PropertyTrusteeACN (length: 2000)
        public string PropertyAddress { get; set; } // PropertyAddress (length: 2000)
        public string LenderName { get; set; } // LenderName (length: 2000)
        public string SmsfCompanyName { get; set; } // SMSFCompanyName (length: 2000)
        public string Smsfacn { get; set; } // SMSFACN (length: 2000)
        public System.DateTime? PropertyTrusteeSetupDate { get; set; } // PropertyTrusteeSetupDate
        public System.DateTime? SmsfTrusteeSetupDate { get; set; } // SMSFTrusteeSetupDate
        public System.DateTime? MeetingTime { get; set; } // MeetingTime
        public string ExistingSetupDate { get; set; } // ExistingSetupDate
        public string ClauseNumber { get; set; } // ClauseNumber
    }

    // Tbl_TrustAppointer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrustAppointer
    {
        public long Id { get; set; } // Id (Primary key)
        public string HolderType { get; set; } // HolderType (length: 50)
        public string FirstName { get; set; } // FirstName (length: 500)
        public string MiddleName { get; set; } // MiddleName (length: 500)
        public string LastName { get; set; } // LastName (length: 500)
        public string CompanyName { get; set; } // CompanyName (length: 500)
        public string CompanyAcn { get; set; } // CompanyACN (length: 500)
        public bool? CommanSeal { get; set; } // CommanSeal
        public string UnitLevel { get; set; } // UnitLevel (length: 2000)
        public string Street { get; set; } // Street (length: 2000)
        public string State { get; set; } // State (length: 500)
        public string Suburb { get; set; } // Suburb (length: 500)
        public string PostCode { get; set; } // PostCode (length: 500)
        public string Country { get; set; } // Country (length: 500)
        public bool? IsTrustee { get; set; } // IsTrustee
        public string UnitType { get; set; } // UnitType (length: 500)
        public int? UnitNumber { get; set; } // UnitNumber
        public double? UnitTotalAmount { get; set; } // UnitTotalAmount
        public double? UnitAmountOwing { get; set; } // UnitAmountOwing
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
        public long? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public long? TrustId { get; set; } // TrustId
        public System.DateTime? Dob { get; set; } // DOB
        public System.DateTime? CompanyRegDate { get; set; } // CompanyRegDate
        public string ContactPersonName { get; set; } // ContactPersonName (length: 500)

        public TblTrustAppointer()
        {
            IsTrustee = false;
        }
    }

    // Tbl_TrustOption
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrustOption
    {
        public long Id { get; set; } // Id (Primary key)
        public bool? QuoteForTax { get; set; } // QuoteForTax
        public bool? LegalAssessment { get; set; } // LegalAssessment
        public bool? BorrowingReview { get; set; } // BorrowingReview
        public bool? Agreement { get; set; } // Agreement
        public long? TrustId { get; set; } // TrustId
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy
    }

    // Tbl_User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblUser
    {
        public long Id { get; set; } // id (Primary key)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Email { get; set; } // Email (length: 100)
        public string Password { get; set; } // Password (length: 50)
        public string ProfilePic { get; set; } // ProfilePic (length: 500)
        public bool? EmailVerified { get; set; } // EmailVerified
        public string Role { get; set; } // _Role (length: 50)
        public System.DateTime? LastLogIn { get; set; } // LastLogIn
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public int? AddedBy { get; set; } // AddedBy
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public int? UpdatedBy { get; set; } // UpdatedBy
        public System.DateTime? DeletedDate { get; set; } // DeletedDate
        public int? DeletedBy { get; set; } // DeletedBy
        public bool? Del { get; set; } // Del
        public string Phone { get; set; } // Phone (length: 50)
        public long? Regid { get; set; } // Regid
        public string Tuser { get; set; } // Tuser (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TblCompany> TblCompanies_AddedBy { get; set; } // Tbl_Company.FK_Tbl_Company_Tbl_User
        public virtual System.Collections.Generic.ICollection<TblCompany> TblCompanies_UpdatedBy { get; set; } // Tbl_Company.FK_Tbl_Company_Tbl_User1
        public virtual System.Collections.Generic.ICollection<TblUserMeta> TblUserMetas { get; set; } // Tbl_UserMeta.FK_Tbl_UserMeta_Tbl_User

        public TblUser()
        {
            Del = false;
            TblCompanies_AddedBy = new System.Collections.Generic.List<TblCompany>();
            TblCompanies_UpdatedBy = new System.Collections.Generic.List<TblCompany>();
            TblUserMetas = new System.Collections.Generic.List<TblUserMeta>();
        }
    }

    // Tbl_UserMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblUserMeta
    {
        public long Id { get; set; } // Id (Primary key)
        public string MetaName { get; set; } // MetaName (length: 500)
        public string MetaValue { get; set; } // MetaValue
        public long? UserId { get; set; } // UserId
        public System.DateTime? AddedDate { get; set; } // AddedDate
        public long? AddedBy { get; set; } // AddedBy

        // Foreign keys
        public virtual TblUser TblUser { get; set; } // FK_Tbl_UserMeta_Tbl_User
    }

    // temp_csearch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TempCsearch
    {
        public int Id { get; set; } // id (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 200)
        public System.DateTime? SearchOn { get; set; } // SearchOn
        public string Userid { get; set; } // userid (length: 50)
        public string Status { get; set; } // status (length: 20)
        public string Fullname { get; set; } // FULLNAME (length: 300)
        public string AsicStatus { get; set; } // Asic_status (length: 20)
        public string AsicError { get; set; } // Asic_Error
        public string AsicFile { get; set; } // Asic_File
        public string AsicAcn { get; set; } // Asic_ACN (length: 50)
        public string AsicDocNo { get; set; } // Asic_DocNo (length: 50)
        public string AsicResType { get; set; } // Asic_ResType (length: 50)
        public string Isship { get; set; } // isship (length: 50)
        public string FullAddress { get; set; } // FullAddress (length: 500)
    }

    #endregion

    #region POCO Configuration

    // ASIC_TXN_File
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AsicTxnFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AsicTxnFile>
    {
        public AsicTxnFileConfiguration()
            : this("dbo")
        {
        }

        public AsicTxnFileConfiguration(string schema)
        {
            ToTable("ASIC_TXN_File", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.Txndate).HasColumnName(@"txndate").HasColumnType("datetime").IsOptional();
            Property(x => x.Formdata).HasColumnName(@"formdata").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AsicResponse).HasColumnName(@"AsicResponse").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.TransStatus).HasColumnName(@"TRANS_STATUS").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Ra56).HasColumnName(@"RA56").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Ra55).HasColumnName(@"RA55").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Acn).HasColumnName(@"ACN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DocumentNumber).HasColumnName(@"DOCUMENT_NUMBER").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Datera55).HasColumnName(@"DATERA55").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Datera56).HasColumnName(@"DATERA56").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Companyname).HasColumnName(@"companyname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
        }
    }

    // ASIC_TXN_STATUS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AsicTxnStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AsicTxnStatus>
    {
        public AsicTxnStatusConfiguration()
            : this("dbo")
        {
        }

        public AsicTxnStatusConfiguration(string schema)
        {
            ToTable("ASIC_TXN_STATUS", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("int").IsOptional();
            Property(x => x.Txndate).HasColumnName(@"txndate").HasColumnType("datetime").IsOptional();
            Property(x => x.Iserror).HasColumnName(@"iserror").HasColumnType("int").IsOptional();
            Property(x => x.Istxnsuccess).HasColumnName(@"istxnsuccess").HasColumnType("int").IsOptional();
            Property(x => x.Isaccepted).HasColumnName(@"isaccepted").HasColumnType("int").IsOptional();
            Property(x => x.Ra55Data).HasColumnName(@"ra55data").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Ra56Data).HasColumnName(@"ra56data").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // companysearch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class CompanysearchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Companysearch>
    {
        public CompanysearchConfiguration()
            : this("dbo")
        {
        }

        public CompanysearchConfiguration(string schema)
        {
            ToTable("companysearch", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.SearchOn).HasColumnName(@"SearchOn").HasColumnType("datetime").IsOptional();
            Property(x => x.Userid).HasColumnName(@"userid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Status).HasColumnName(@"status").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Fullname).HasColumnName(@"FULLNAME").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.AsicStatus).HasColumnName(@"Asic_status").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.AsicError).HasColumnName(@"Asic_Error").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AsicFile).HasColumnName(@"Asic_File").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AsicAcn).HasColumnName(@"Asic_ACN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AsicDocNo).HasColumnName(@"Asic_DocNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AsicResType).HasColumnName(@"Asic_ResType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Isship).HasColumnName(@"isship").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FullAddress).HasColumnName(@"FullAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.ShowStatus).HasColumnName(@"show_status").HasColumnType("int").IsOptional();
            Property(x => x.Regid).HasColumnName(@"Regid").HasColumnType("bigint").IsOptional();
            Property(x => x.AsicOutFile).HasColumnName(@"Asic_OUT_File").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Govofcomapany).HasColumnName(@"govofcomapany").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // LBLmsg
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class LbLmsgConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LbLmsg>
    {
        public LbLmsgConfiguration()
            : this("dbo")
        {
        }

        public LbLmsgConfiguration(string schema)
        {
            ToTable("LBLmsg", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Sms).HasColumnName(@"sms").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
        }
    }

    // lodgement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class LodgementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Lodgement>
    {
        public LodgementConfiguration()
            : this("dbo")
        {
        }

        public LodgementConfiguration(string schema)
        {
            ToTable("lodgement", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AsicRegisteredAgentNo).HasColumnName(@"asic_registered_agentNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Firm).HasColumnName(@"firm").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Contactname).HasColumnName(@"contactname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Telephone).HasColumnName(@"telephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"email").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Postaladdress).HasColumnName(@"postaladdress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Suburb).HasColumnName(@"suburb").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Stateterritory).HasColumnName(@"stateterritory").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Postcode).HasColumnName(@"postcode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // RA55
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Ra55Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Ra55>
    {
        public Ra55Configuration()
            : this("dbo")
        {
        }

        public Ra55Configuration(string schema)
        {
            ToTable("RA55", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.Acn).HasColumnName(@"ACN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.CompanyType).HasColumnName(@"CompanyType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CompanyClass).HasColumnName(@"CompanyClass").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CertificatePrintOption).HasColumnName(@"CertificatePrintOption").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JurisdictionOfRegistration).HasColumnName(@"JurisdictionOfRegistration").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DateOfRegistration).HasColumnName(@"DateOfRegistration").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CompanySubclass).HasColumnName(@"CompanySubclass").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SupplierAbn).HasColumnName(@"SupplierABN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RegisteredAgentName).HasColumnName(@"RegisteredAgentName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.RegisteredAgentAddress).HasColumnName(@"RegisteredAgentAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.InvoiceDescription).HasColumnName(@"InvoiceDescription").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.InvoiceAmmount).HasColumnName(@"InvoiceAmmount").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DocumentNumber).HasColumnName(@"DocumentNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FormCode).HasColumnName(@"FormCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.TaxInvoiceText).HasColumnName(@"TaxInvoiceText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.TaxCode).HasColumnName(@"TaxCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.TaxAmmount).HasColumnName(@"TaxAmmount").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
        }
    }

    // RA56
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Ra56Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Ra56>
    {
        public Ra56Configuration()
            : this("dbo")
        {
        }

        public Ra56Configuration(string schema)
        {
            ToTable("RA56", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProposedCompanyName).HasColumnName(@"ProposedCompanyName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.RequestDocumentNumber).HasColumnName(@"RequestDocumentNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DateOfAdvice).HasColumnName(@"DateOfAdvice").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AsicAdviceType).HasColumnName(@"ASICAdviceType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SupplierAbn).HasColumnName(@"SupplierABN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RegisteredAgentName).HasColumnName(@"RegisteredAgentName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.RegisteredAgentAddress).HasColumnName(@"RegisteredAgentAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.InvoiceDescription).HasColumnName(@"InvoiceDescription").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.InvoiceAmmount).HasColumnName(@"InvoiceAmmount").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.DocumentNumber).HasColumnName(@"DocumentNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.FormCode).HasColumnName(@"FormCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.TaxInvoiceText).HasColumnName(@"TaxInvoiceText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.TaxCode).HasColumnName(@"TaxCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.TaxAmmount).HasColumnName(@"TaxAmmount").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.StatusText).HasColumnName(@"StatusText").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
        }
    }

    // Registration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class RegistrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Registration>
    {
        public RegistrationConfiguration()
            : this("dbo")
        {
        }

        public RegistrationConfiguration(string schema)
        {
            ToTable("Registration", schema);
            HasKey(x => x.Sno);

            Property(x => x.Sno).HasColumnName(@"sno").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AgentSiteName).HasColumnName(@"AgentSiteName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.GivenName).HasColumnName(@"GivenName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FamilyName).HasColumnName(@"FamilyName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Pass).HasColumnName(@"pass").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.ProfileCategory).HasColumnName(@"ProfileCategory").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.OrganizationName).HasColumnName(@"OrganizationName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.OrganizationAbn).HasColumnName(@"OrganizationABN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UnitLevelSuits).HasColumnName(@"UnitLevelSuits").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.StreetNumberStreetName).HasColumnName(@"StreetNumberStreetName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Suburb).HasColumnName(@"Suburb").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Postcode).HasColumnName(@"Postcode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Registrationdate).HasColumnName(@"registrationdate").HasColumnType("datetime").IsOptional();
            Property(x => x.Isactive).HasColumnName(@"isactive").HasColumnType("int").IsOptional();
            Property(x => x.Website).HasColumnName(@"Website").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Logopath).HasColumnName(@"Logopath").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // Share_Allocate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ShareAllocateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShareAllocate>
    {
        public ShareAllocateConfiguration()
            : this("dbo")
        {
        }

        public ShareAllocateConfiguration(string schema)
        {
            ToTable("Share_Allocate", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Shareclass).HasColumnName(@"shareclass").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Totalshares).HasColumnName(@"totalshares").HasColumnType("int").IsOptional();
            Property(x => x.Unitprice).HasColumnName(@"unitprice").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Totalprice).HasColumnName(@"totalprice").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.Sno).HasColumnName(@"sno").HasColumnType("int").IsOptional();
        }
    }

    // Share_distribute_grid
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ShareDistributeGridConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShareDistributeGrid>
    {
        public ShareDistributeGridConfiguration()
            : this("dbo")
        {
        }

        public ShareDistributeGridConfiguration(string schema)
        {
            ToTable("Share_distribute_grid", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Linkid).HasColumnName(@"linkid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Sno).HasColumnName(@"sno").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Shareclass).HasColumnName(@"shareclass").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Totalshares).HasColumnName(@"totalshares").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Unitprice).HasColumnName(@"unitprice").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Totalprice).HasColumnName(@"totalprice").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CTotalshares).HasColumnName(@"c_totalshares").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CAmountpaidpershare).HasColumnName(@"c_amountpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CAmountremainingUnpaidpershare).HasColumnName(@"c_amountremaining_unpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CTotalamountpaidpershare).HasColumnName(@"c_totalamountpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CTotalamountunpaidpershare).HasColumnName(@"c_totalamountunpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CSharerange).HasColumnName(@"c_sharerange").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.CCertificateno).HasColumnName(@"c_certificateno").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.IndividualOrCompany).HasColumnName(@"individual_or_company").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
        }
    }

    // step1
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step1Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Step1>
    {
        public Step1Configuration()
            : this("dbo")
        {
        }

        public Step1Configuration(string schema)
        {
            ToTable("step1", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Companyname).HasColumnName(@"companyname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.CompanynameExt).HasColumnName(@"companyname_ext").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Stateterritorry).HasColumnName(@"stateterritorry").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Isspecialpurpose).HasColumnName(@"isspecialpurpose").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Isreservecompany410).HasColumnName(@"isreservecompany410").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Reservecompany410Asicnamereservationnumber).HasColumnName(@"reservecompany410_asicnamereservationnumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Reservecompany410Fulllegalname).HasColumnName(@"reservecompany410_fulllegalname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Isproposeidentical).HasColumnName(@"isproposeidentical").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ProposeidenticalBefore28May).HasColumnName(@"proposeidentical_before28may").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ProposeidenticalAfter28May).HasColumnName(@"proposeidentical_after28may").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno1).HasColumnName(@"proposeidentical_before28may_previousbusinessno1").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory1).HasColumnName(@"proposeidentical_before28may_previousstateteritory1").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalAfter28MayAbnnumber).HasColumnName(@"proposeidentical_after28may_abnnumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Isultimateholdingcompany).HasColumnName(@"isultimateholdingcompany").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.UltimateholdingcompanyFulllegalname).HasColumnName(@"ultimateholdingcompany_fulllegalname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.UltimateholdingcompanyCountry).HasColumnName(@"ultimateholdingcompany_country").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UltimateholdingcompanyAcnArbn).HasColumnName(@"ultimateholdingcompany_ACN_ARBN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UltimateholdingcompanyAbn).HasColumnName(@"ultimateholdingcompany_ABN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.Acn).HasColumnName(@"acn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Typeofcompany).HasColumnName(@"typeofcompany").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Classofcompany).HasColumnName(@"classofcompany").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SpecialpurposeIfapplicable).HasColumnName(@"specialpurpose_ifapplicable").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Cash).HasColumnName(@"cash").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Writtencontact).HasColumnName(@"writtencontact").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IndivisualCompanyAsicForm401).HasColumnName(@"Indivisual_Company_Asic_form401").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CompanyNameAsicFrom401).HasColumnName(@"CompanyName_Asic_from401").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CompanyActingAsTrustee).HasColumnName(@"CompanyActingAsTrustee").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ProposedNameYesNo).HasColumnName(@"proposed_Name_Yes_No").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ProposeidenticalBefore28MayTotalstate).HasColumnName(@"proposeidentical_before28may_totalstate").HasColumnType("int").IsOptional();
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno2).HasColumnName(@"proposeidentical_before28may_previousbusinessno2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory2).HasColumnName(@"proposeidentical_before28may_previousstateteritory2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno3).HasColumnName(@"proposeidentical_before28may_previousbusinessno3").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory3).HasColumnName(@"proposeidentical_before28may_previousstateteritory3").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno4).HasColumnName(@"proposeidentical_before28may_previousbusinessno4").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory4).HasColumnName(@"proposeidentical_before28may_previousstateteritory4").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno5).HasColumnName(@"proposeidentical_before28may_previousbusinessno5").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory5).HasColumnName(@"proposeidentical_before28may_previousstateteritory5").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno6).HasColumnName(@"proposeidentical_before28may_previousbusinessno6").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory6).HasColumnName(@"proposeidentical_before28may_previousstateteritory6").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno7).HasColumnName(@"proposeidentical_before28may_previousbusinessno7").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory7).HasColumnName(@"proposeidentical_before28may_previousstateteritory7").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousbusinessno8).HasColumnName(@"proposeidentical_before28may_previousbusinessno8").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProposeidenticalBefore28MayPreviousstateteritory8).HasColumnName(@"proposeidentical_before28may_previousstateteritory8").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Openingtime).HasColumnName(@"Openingtime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Closingtime).HasColumnName(@"Closingtime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.StandardHours).HasColumnName(@"standard_hours").HasColumnType("bit").IsOptional();
            Property(x => x.TrusteeTrustname).HasColumnName(@"trustee_trustname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.TrusteeAbn).HasColumnName(@"trustee_abn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.TrusteeTfn).HasColumnName(@"trustee_tfn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TrusteeAddress).HasColumnName(@"trustee_address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.TrusteeCountry).HasColumnName(@"trustee_country").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Companyusedfor).HasColumnName(@"companyusedfor").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Typeofuser).HasColumnName(@"typeofuser").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UlimateHoldingCompany).HasColumnName(@"ulimateHoldingCompany").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Ucompanyname).HasColumnName(@"ucompanyname").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Acnarbnabn).HasColumnName(@"acnarbnabn").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.CountryIcor).HasColumnName(@"countryIcor").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // step2
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step2Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Step2>
    {
        public Step2Configuration()
            : this("dbo")
        {
        }

        public Step2Configuration(string schema)
        {
            ToTable("step2", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Contactperson).HasColumnName(@"contactperson").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.UnitLevelSuite).HasColumnName(@"unit_level_suite").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.StreetNoName).HasColumnName(@"streetNoName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SuburbTownCity).HasColumnName(@"suburb_town_city").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.State).HasColumnName(@"state").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Postcode).HasColumnName(@"postcode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Iscompanylocatedaboveaddress).HasColumnName(@"iscompanylocatedaboveaddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Isprimaryaddress).HasColumnName(@"isprimaryaddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ContactpersonPrimary).HasColumnName(@"contactperson_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.UnitLevelSuitePrimary).HasColumnName(@"unit_level_suite_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.StreetNoNamePrimary).HasColumnName(@"streetNoName_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SuburbTownCityPrimary).HasColumnName(@"suburb_town_city_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.StatePrimary).HasColumnName(@"state_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PostcodePrimary).HasColumnName(@"postcode_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.Occupiername).HasColumnName(@"occupiername").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // step3
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step3Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Step3>
    {
        public Step3Configuration()
            : this("dbo")
        {
        }

        public Step3Configuration(string schema)
        {
            ToTable("step3", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Designation).HasColumnName(@"designation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Firstname).HasColumnName(@"firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Middlename).HasColumnName(@"middlename").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Familyname).HasColumnName(@"familyname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Anyformername).HasColumnName(@"anyformername").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.FirstnameFormer).HasColumnName(@"firstname_former").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.MiddlenameFormer).HasColumnName(@"middlename_former").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FamilynameFormer).HasColumnName(@"familyname_former").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.UnitLevelSuitePrimary).HasColumnName(@"unit_level_suite_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.StreetNoNamePrimary).HasColumnName(@"streetNoName_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SuburbTownCityPrimary).HasColumnName(@"suburb_town_city_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.StatePrimary).HasColumnName(@"state_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PostcodePrimary).HasColumnName(@"postcode_primary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Country).HasColumnName(@"country").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Dob).HasColumnName(@"dob").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Placeofbirth).HasColumnName(@"placeofbirth").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Countryofbirth).HasColumnName(@"countryofbirth").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.Isdirector).HasColumnName(@"isdirector").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Issecretary).HasColumnName(@"issecretary").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Ispublicofficer).HasColumnName(@"ispublicofficer").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
        }
    }

    // step4_anothershareholder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Step4AnothershareholderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Step4Anothershareholder>
    {
        public Step4AnothershareholderConfiguration()
            : this("dbo")
        {
        }

        public Step4AnothershareholderConfiguration(string schema)
        {
            ToTable("step4_anothershareholder", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Step4Id).HasColumnName(@"step4ID").HasColumnType("int").IsOptional();
            Property(x => x.Companyid).HasColumnName(@"companyid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Shareholderdetails).HasColumnName(@"shareholderdetails").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ShareclasstypeValue).HasColumnName(@"shareclasstype_value").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ShareclasstypeText).HasColumnName(@"shareclasstype_text").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.NoOfShares).HasColumnName(@"no_of_shares").HasColumnType("int").IsOptional();
            Property(x => x.Amountpaidpershare).HasColumnName(@"amountpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Amountremainingunpaidpershare).HasColumnName(@"amountremainingunpaidpershare").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Isheldanotherorg).HasColumnName(@"isheldanotherorg").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Beneficialownername).HasColumnName(@"beneficialownername").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IndividualOrCompany).HasColumnName(@"individual_or_company").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.IndividualOrCompanyName).HasColumnName(@"individual_or_company_name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IndividualOrCompanyAddress).HasColumnName(@"individual_or_company_address").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Entrydate).HasColumnName(@"entrydate").HasColumnType("datetime").IsOptional();
            Property(x => x.IndividualOrCompanyAcn).HasColumnName(@"individual_or_company_acn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.IndividualOrCompanyDob).HasColumnName(@"individual_or_company_dob").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.IndividualOrCompanyUnitLevelSuite).HasColumnName(@"individual_or_company_unit_level_suite").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IndividualOrCompanyStreetNoName).HasColumnName(@"individual_or_company_streetNoName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.IndividualOrCompanySuburbTownCity).HasColumnName(@"individual_or_company_suburb_town_city").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.IndividualOrCompanyState).HasColumnName(@"individual_or_company_state").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IndividualOrCompanyPostcode).HasColumnName(@"individual_or_company_postcode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.IndividualOrCompanyCountry).HasColumnName(@"individual_or_company_country").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Isjoint).HasColumnName(@"ISJOINT").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.JointIndividualOrCompany).HasColumnName(@"JOINT_individual_or_company").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.JointIndividualOrCompanyName).HasColumnName(@"joint_individual_or_company_name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyAcn).HasColumnName(@"joint_individual_or_company_acn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyDob).HasColumnName(@"joint_individual_or_company_dob").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyUnitLevelSuite).HasColumnName(@"joint_individual_or_company_unit_level_suite").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyStreetNoName).HasColumnName(@"joint_individual_or_company_streetNoName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.JointIndividualOrCompanySuburbTownCity).HasColumnName(@"joint_individual_or_company_suburb_town_city").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.JointIndividualOrCompanyState).HasColumnName(@"joint_individual_or_company_state").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyPostcode).HasColumnName(@"joint_individual_or_company_postcode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JointIndividualOrCompanyCountry).HasColumnName(@"joint_individual_or_company_country").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Dirid).HasColumnName(@"dirid").HasColumnType("int").IsOptional();
            Property(x => x.Placeofbirth).HasColumnName(@"placeofbirth").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Shareoption).HasColumnName(@"shareoption").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Sharedetailsnotheldanotherorg).HasColumnName(@"sharedetailsnotheldanotherorg").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
        }
    }

    // Tbl_Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblCompany>
    {
        public TblCompanyConfiguration()
            : this("dbo")
        {
        }

        public TblCompanyConfiguration(string schema)
        {
            ToTable("Tbl_Company", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.NameReserved).HasColumnName(@"NameReserved").HasColumnType("bit").IsOptional();
            Property(x => x.Abn).HasColumnName(@"ABN").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CompanyPurpose).HasColumnName(@"CompanyPurpose").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CompanyUseFor).HasColumnName(@"CompanyUseFor").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RegistrationState).HasColumnName(@"RegistrationState").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Registered).HasColumnName(@"Registered").HasColumnType("bit").IsRequired();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SmsFdeclaration).HasColumnName(@"SMSFdeclaration").HasColumnType("bit").IsOptional();
            Property(x => x.QuoteForTax).HasColumnName(@"QuoteForTax").HasColumnType("bit").IsOptional();
            Property(x => x.LegalAssessment).HasColumnName(@"LegalAssessment").HasColumnType("bit").IsOptional();
            Property(x => x.BorrowingReview).HasColumnName(@"BorrowingReview").HasColumnType("bit").IsOptional();
            Property(x => x.Agreement).HasColumnName(@"Agreement").HasColumnType("bit").IsOptional();
            Property(x => x.CompanySecretary).HasColumnName(@"CompanySecretary").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.PublicOfficerOfCompany).HasColumnName(@"PublicOfficerOfCompany").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.HowfstmeetingOfDirheld).HasColumnName(@"HowfstmeetingOfDirheld").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.DateOfIncorporation).HasColumnName(@"DateOfIncorporation").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.TblUser_AddedBy).WithMany(b => b.TblCompanies_AddedBy).HasForeignKey(c => c.AddedBy).WillCascadeOnDelete(false); // FK_Tbl_Company_Tbl_User
            HasOptional(a => a.TblUser_UpdatedBy).WithMany(b => b.TblCompanies_UpdatedBy).HasForeignKey(c => c.UpdatedBy).WillCascadeOnDelete(false); // FK_Tbl_Company_Tbl_User1
        }
    }

    // Tbl_CompanyAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblCompanyAddress>
    {
        public TblCompanyAddressConfiguration()
            : this("dbo")
        {
        }

        public TblCompanyAddressConfiguration(string schema)
        {
            ToTable("Tbl_CompanyAddress", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("bigint").IsOptional();
            Property(x => x.UnitLevel).HasColumnName(@"UnitLevel").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.Street).HasColumnName(@"Street").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Suburb).HasColumnName(@"Suburb").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.IsRegisteredAddress).HasColumnName(@"IsRegisteredAddress").HasColumnType("bit").IsOptional();
            Property(x => x.IsPrincipleAddress).HasColumnName(@"IsPrincipleAddress").HasColumnType("bit").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.TblCompany).WithMany(b => b.TblCompanyAddresses).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Tbl_CompanyAddress_Tbl_Company
        }
    }

    // Tbl_CompanyDirector
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyDirectorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblCompanyDirector>
    {
        public TblCompanyDirectorConfiguration()
            : this("dbo")
        {
        }

        public TblCompanyDirectorConfiguration(string schema)
        {
            ToTable("Tbl_CompanyDirector", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("bigint").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.DoBday).HasColumnName(@"DOBday").HasColumnType("int").IsOptional();
            Property(x => x.DoBmonth).HasColumnName(@"DOBmonth").HasColumnType("int").IsOptional();
            Property(x => x.DoByear).HasColumnName(@"DOByear").HasColumnType("int").IsOptional();
            Property(x => x.DoBcountry).HasColumnName(@"DOBcountry").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.DoBstate).HasColumnName(@"DOBstate").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.DoBcity).HasColumnName(@"DOBcity").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.DoBaddress).HasColumnName(@"DOBaddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.TblCompany).WithMany(b => b.TblCompanyDirectors).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Tbl_CompanyDirector_Tbl_Company
        }
    }

    // Tbl_CompanyShare
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyShareConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblCompanyShare>
    {
        public TblCompanyShareConfiguration()
            : this("dbo")
        {
        }

        public TblCompanyShareConfiguration(string schema)
        {
            ToTable("Tbl_CompanyShare", schema);
            HasKey(x => new { x.Id, x.ShareBehalf });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("bigint").IsOptional();
            Property(x => x.DirectorId).HasColumnName(@"DirectorId").HasColumnType("bigint").IsOptional();
            Property(x => x.ShareClass).HasColumnName(@"ShareClass").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.NoOfShare).HasColumnName(@"NoOfShare").HasColumnType("int").IsOptional();
            Property(x => x.ShareAmount).HasColumnName(@"ShareAmount").HasColumnType("float").IsOptional();
            Property(x => x.ShareBehalf).HasColumnName(@"ShareBehalf").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OwnerName).HasColumnName(@"OwnerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.TblCompany).WithMany(b => b.TblCompanyShares).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Tbl_CompanyShare_Tbl_Company
            HasOptional(a => a.TblCompanyDirector).WithMany(b => b.TblCompanyShares).HasForeignKey(c => c.DirectorId).WillCascadeOnDelete(false); // FK_Tbl_CompanyShare_Tbl_CompanyDirector
        }
    }

    // Tbl_CompanyTrust
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblCompanyTrustConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblCompanyTrust>
    {
        public TblCompanyTrustConfiguration()
            : this("dbo")
        {
        }

        public TblCompanyTrustConfiguration(string schema)
        {
            ToTable("Tbl_CompanyTrust", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("bigint").IsOptional();
            Property(x => x.TrustName).HasColumnName(@"TrustName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.TrustAbn).HasColumnName(@"TrustABN").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TrustTfn).HasColumnName(@"TrustTFN").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.TrustAddress).HasColumnName(@"TrustAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);

            // Foreign keys
            HasOptional(a => a.TblCompany).WithMany(b => b.TblCompanyTrusts).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Tbl_Trust_Tbl_Company
        }
    }

    // Tbl_Contact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblContact>
    {
        public TblContactConfiguration()
            : this("dbo")
        {
        }

        public TblContactConfiguration(string schema)
        {
            ToTable("Tbl_Contact", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsOptional();
        }
    }

    // Tbl_Options
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblOptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblOption>
    {
        public TblOptionConfiguration()
            : this("dbo")
        {
        }

        public TblOptionConfiguration(string schema)
        {
            ToTable("Tbl_Options", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OptionName).HasColumnName(@"OptionName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.OptionValue).HasColumnName(@"OptionValue").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Type).HasColumnName(@"_Type").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("int").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsOptional();
            Property(x => x.DeletedDate).HasColumnName(@"DeletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("int").IsOptional();
            Property(x => x.Del).HasColumnName(@"Del").HasColumnType("bit").IsOptional();
        }
    }

    // Tbl_Transaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTransactionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblTransaction>
    {
        public TblTransactionConfiguration()
            : this("dbo")
        {
        }

        public TblTransactionConfiguration(string schema)
        {
            ToTable("Tbl_Transaction", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TransactionStatus).HasColumnName(@"TransactionStatus").HasColumnType("bit").IsOptional();
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("float").IsOptional();
            Property(x => x.TrustCompanyId).HasColumnName(@"TrustCompanyId").HasColumnType("bigint").IsOptional();
            Property(x => x.FormType).HasColumnName(@"FormType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.TxnId).HasColumnName(@"TxnId").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.FormName).HasColumnName(@"FormName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
        }
    }

    // Tbl_Trust
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrustConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblTrust>
    {
        public TblTrustConfiguration()
            : this("dbo")
        {
        }

        public TblTrustConfiguration(string schema)
        {
            ToTable("Tbl_Trust", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TrustType).HasColumnName(@"TrustType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TrustName).HasColumnName(@"TrustName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.TrustSetupDate).HasColumnName(@"TrustSetupDate").HasColumnType("date").IsOptional();
            Property(x => x.TrustState).HasColumnName(@"TrustState").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.OrdinaryPrice).HasColumnName(@"OrdinaryPrice").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TotalUnitHolders).HasColumnName(@"TotalUnitHolders").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.QuoteForTax).HasColumnName(@"QuoteForTax").HasColumnType("bit").IsOptional();
            Property(x => x.LegalAssessment).HasColumnName(@"LegalAssessment").HasColumnType("bit").IsOptional();
            Property(x => x.BorrowingReview).HasColumnName(@"BorrowingReview").HasColumnType("bit").IsOptional();
            Property(x => x.Agreement).HasColumnName(@"Agreement").HasColumnType("bit").IsOptional();
            Property(x => x.Smsf).HasColumnName(@"SMSF").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.Abn).HasColumnName(@"ABN").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.PropertyTrusteeName).HasColumnName(@"PropertyTrusteeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.PropertyTrusteeAcn).HasColumnName(@"PropertyTrusteeACN").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.PropertyAddress).HasColumnName(@"PropertyAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.LenderName).HasColumnName(@"LenderName").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.SmsfCompanyName).HasColumnName(@"SMSFCompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.Smsfacn).HasColumnName(@"SMSFACN").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.PropertyTrusteeSetupDate).HasColumnName(@"PropertyTrusteeSetupDate").HasColumnType("date").IsOptional();
            Property(x => x.SmsfTrusteeSetupDate).HasColumnName(@"SMSFTrusteeSetupDate").HasColumnType("date").IsOptional();
            Property(x => x.MeetingTime).HasColumnName(@"MeetingTime").HasColumnType("datetime").IsOptional();
            Property(x => x.ExistingSetupDate).HasColumnName(@"ExistingSetupDate").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.ClauseNumber).HasColumnName(@"ClauseNumber").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // Tbl_TrustAppointer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrustAppointerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblTrustAppointer>
    {
        public TblTrustAppointerConfiguration()
            : this("dbo")
        {
        }

        public TblTrustAppointerConfiguration(string schema)
        {
            ToTable("Tbl_TrustAppointer", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.HolderType).HasColumnName(@"HolderType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CompanyAcn).HasColumnName(@"CompanyACN").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CommanSeal).HasColumnName(@"CommanSeal").HasColumnType("bit").IsOptional();
            Property(x => x.UnitLevel).HasColumnName(@"UnitLevel").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.Street).HasColumnName(@"Street").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Suburb).HasColumnName(@"Suburb").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.IsTrustee).HasColumnName(@"IsTrustee").HasColumnType("bit").IsOptional();
            Property(x => x.UnitType).HasColumnName(@"UnitType").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.UnitNumber).HasColumnName(@"UnitNumber").HasColumnType("int").IsOptional();
            Property(x => x.UnitTotalAmount).HasColumnName(@"UnitTotalAmount").HasColumnType("float").IsOptional();
            Property(x => x.UnitAmountOwing).HasColumnName(@"UnitAmountOwing").HasColumnType("float").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("bigint").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.TrustId).HasColumnName(@"TrustId").HasColumnType("bigint").IsOptional();
            Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("datetime").IsOptional();
            Property(x => x.CompanyRegDate).HasColumnName(@"CompanyRegDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ContactPersonName).HasColumnName(@"ContactPersonName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // Tbl_TrustOption
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblTrustOptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblTrustOption>
    {
        public TblTrustOptionConfiguration()
            : this("dbo")
        {
        }

        public TblTrustOptionConfiguration(string schema)
        {
            ToTable("Tbl_TrustOption", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuoteForTax).HasColumnName(@"QuoteForTax").HasColumnType("bit").IsOptional();
            Property(x => x.LegalAssessment).HasColumnName(@"LegalAssessment").HasColumnType("bit").IsOptional();
            Property(x => x.BorrowingReview).HasColumnName(@"BorrowingReview").HasColumnType("bit").IsOptional();
            Property(x => x.Agreement).HasColumnName(@"Agreement").HasColumnType("bit").IsOptional();
            Property(x => x.TrustId).HasColumnName(@"TrustId").HasColumnType("bigint").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();
        }
    }

    // Tbl_User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblUser>
    {
        public TblUserConfiguration()
            : this("dbo")
        {
        }

        public TblUserConfiguration(string schema)
        {
            ToTable("Tbl_User", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ProfilePic).HasColumnName(@"ProfilePic").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.EmailVerified).HasColumnName(@"EmailVerified").HasColumnType("bit").IsOptional();
            Property(x => x.Role).HasColumnName(@"_Role").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastLogIn).HasColumnName(@"LastLogIn").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("int").IsOptional();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsOptional();
            Property(x => x.DeletedDate).HasColumnName(@"DeletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("int").IsOptional();
            Property(x => x.Del).HasColumnName(@"Del").HasColumnType("bit").IsOptional();
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Regid).HasColumnName(@"Regid").HasColumnType("bigint").IsOptional();
            Property(x => x.Tuser).HasColumnName(@"Tuser").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // Tbl_UserMeta
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TblUserMetaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblUserMeta>
    {
        public TblUserMetaConfiguration()
            : this("dbo")
        {
        }

        public TblUserMetaConfiguration(string schema)
        {
            ToTable("Tbl_UserMeta", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MetaName).HasColumnName(@"MetaName").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.MetaValue).HasColumnName(@"MetaValue").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsOptional();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("bigint").IsOptional();

            // Foreign keys
            HasOptional(a => a.TblUser).WithMany(b => b.TblUserMetas).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Tbl_UserMeta_Tbl_User
        }
    }

    // temp_csearch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class TempCsearchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TempCsearch>
    {
        public TempCsearchConfiguration()
            : this("dbo")
        {
        }

        public TempCsearchConfiguration(string schema)
        {
            ToTable("temp_csearch", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.SearchOn).HasColumnName(@"SearchOn").HasColumnType("datetime").IsOptional();
            Property(x => x.Userid).HasColumnName(@"userid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Status).HasColumnName(@"status").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Fullname).HasColumnName(@"FULLNAME").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(300);
            Property(x => x.AsicStatus).HasColumnName(@"Asic_status").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.AsicError).HasColumnName(@"Asic_Error").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AsicFile).HasColumnName(@"Asic_File").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AsicAcn).HasColumnName(@"Asic_ACN").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AsicDocNo).HasColumnName(@"Asic_DocNo").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AsicResType).HasColumnName(@"Asic_ResType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Isship).HasColumnName(@"isship").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FullAddress).HasColumnName(@"FullAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AddtrustReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class AdminloginAfterReturnModel
    {
        public System.Int64 id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String Email { get; set; }
        public System.String Password { get; set; }
        public System.String ProfilePic { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.String _Role { get; set; }
        public System.DateTime? LastLogIn { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int32? AddedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Int32? UpdatedBy { get; set; }
        public System.DateTime? DeletedDate { get; set; }
        public System.Int32? DeletedBy { get; set; }
        public System.Boolean? Del { get; set; }
        public System.String Phone { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Tuser { get; set; }
        public System.String Role { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class DelcompanyReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class DelContactsReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class DeleteDirectorsReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class DeltrustReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class DeluserReturnModel
    {
        public System.Int64 id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetCompanysearchByNameReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String CompanyName { get; set; }
        public System.DateTime? SearchOn { get; set; }
        public System.String userid { get; set; }
        public System.String status { get; set; }
        public System.String FULLNAME { get; set; }
        public System.String Asic_status { get; set; }
        public System.String Asic_Error { get; set; }
        public System.String Asic_File { get; set; }
        public System.String Asic_ACN { get; set; }
        public System.String Asic_DocNo { get; set; }
        public System.String Asic_ResType { get; set; }
        public System.String isship { get; set; }
        public System.String FullAddress { get; set; }
        public System.Int32? show_status { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Asic_OUT_File { get; set; }
        public System.String govofcomapany { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetLodgementReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String asic_registered_agentNo { get; set; }
        public System.String firm { get; set; }
        public System.String contactname { get; set; }
        public System.String telephone { get; set; }
        public System.String email { get; set; }
        public System.String postaladdress { get; set; }
        public System.String suburb { get; set; }
        public System.String stateterritory { get; set; }
        public System.String postcode { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetRegistrationReturnModel
    {
        public System.Int32 sno { get; set; }
        public System.String AgentSiteName { get; set; }
        public System.String GivenName { get; set; }
        public System.String FamilyName { get; set; }
        public System.String Email { get; set; }
        public System.String pass { get; set; }
        public System.String ProfileCategory { get; set; }
        public System.String Phone { get; set; }
        public System.String OrganizationName { get; set; }
        public System.String OrganizationABN { get; set; }
        public System.String UnitLevelSuits { get; set; }
        public System.String StreetNumberStreetName { get; set; }
        public System.String Suburb { get; set; }
        public System.String State { get; set; }
        public System.String Postcode { get; set; }
        public System.String Fax { get; set; }
        public System.DateTime? registrationdate { get; set; }
        public System.Int32? isactive { get; set; }
        public System.String Website { get; set; }
        public System.String Logopath { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetShareAllocationMainPdfReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String linkid { get; set; }
        public System.String sno { get; set; }
        public System.String companyid { get; set; }
        public System.String shareclass { get; set; }
        public System.Decimal? totalshares { get; set; }
        public System.Decimal? unitprice { get; set; }
        public System.Decimal? totalprice { get; set; }
        public System.Decimal? c_totalshares { get; set; }
        public System.Decimal? c_amountpaidpershare { get; set; }
        public System.Decimal? c_amountremaining_unpaidpershare { get; set; }
        public System.Decimal? c_totalamountpaidpershare { get; set; }
        public System.Decimal? c_totalamountunpaidpershare { get; set; }
        public System.String c_sharerange { get; set; }
        public System.String c_certificateno { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String individual_or_company { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetShareDistributegridReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String sno { get; set; }
        public System.Decimal? pre_nos { get; set; }
        public System.String shareclass_c { get; set; }
        public System.String linkid { get; set; }
        public System.Decimal? noofshares_c { get; set; }
        public System.Decimal? amountpaidpershare_c { get; set; }
        public System.Decimal? amountunpaidpershare_c { get; set; }
        public System.Decimal? totalamountpaidpershare_c { get; set; }
        public System.Decimal? totalamountunpaidpershare_c { get; set; }
        public System.String sharerange_c { get; set; }
        public System.String certificateno_c { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetShareDistributegrid1ReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String sno { get; set; }
        public System.Decimal? pre_nos { get; set; }
        public System.String shareclass_c { get; set; }
        public System.String linkid { get; set; }
        public System.Decimal? noofshares_c { get; set; }
        public System.Decimal? amountpaidpershare_c { get; set; }
        public System.Decimal? amountunpaidpershare_c { get; set; }
        public System.Decimal? totalamountpaidpershare_c { get; set; }
        public System.Decimal? totalamountunpaidpershare_c { get; set; }
        public System.String sharerange_c { get; set; }
        public System.String certificateno_c { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetShareDistributegrid12ReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String sno { get; set; }
        public System.Decimal? pre_nos { get; set; }
        public System.String shareclass_c { get; set; }
        public System.String linkid { get; set; }
        public System.Decimal? noofshares_c { get; set; }
        public System.Decimal? amountpaidpershare_c { get; set; }
        public System.Decimal? amountunpaidpershare_c { get; set; }
        public System.Decimal? totalamountpaidpershare_c { get; set; }
        public System.Decimal? totalamountunpaidpershare_c { get; set; }
        public System.String sharerange_c { get; set; }
        public System.String certificateno_c { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep1ReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String companyname { get; set; }
        public System.String companyname_ext { get; set; }
        public System.String stateterritorry { get; set; }
        public System.String isspecialpurpose { get; set; }
        public System.String isreservecompany410 { get; set; }
        public System.String reservecompany410_asicnamereservationnumber { get; set; }
        public System.String reservecompany410_fulllegalname { get; set; }
        public System.String isproposeidentical { get; set; }
        public System.String proposeidentical_before28may { get; set; }
        public System.String proposeidentical_after28may { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno1 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory1 { get; set; }
        public System.String proposeidentical_after28may_abnnumber { get; set; }
        public System.String isultimateholdingcompany { get; set; }
        public System.String ultimateholdingcompany_fulllegalname { get; set; }
        public System.String ultimateholdingcompany_country { get; set; }
        public System.String ultimateholdingcompany_ACN_ARBN { get; set; }
        public System.String ultimateholdingcompany_ABN { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String acn { get; set; }
        public System.String typeofcompany { get; set; }
        public System.String classofcompany { get; set; }
        public System.String specialpurpose_ifapplicable { get; set; }
        public System.String cash { get; set; }
        public System.String writtencontact { get; set; }
        public System.String Indivisual_Company_Asic_form401 { get; set; }
        public System.String CompanyName_Asic_from401 { get; set; }
        public System.String CompanyActingAsTrustee { get; set; }
        public System.String proposed_Name_Yes_No { get; set; }
        public System.Int32? proposeidentical_before28may_totalstate { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno2 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory2 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno3 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory3 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno4 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory4 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno5 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory5 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno6 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory6 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno7 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory7 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno8 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory8 { get; set; }
        public System.String Openingtime { get; set; }
        public System.String Closingtime { get; set; }
        public System.Boolean? standard_hours { get; set; }
        public System.String trustee_trustname { get; set; }
        public System.String trustee_abn { get; set; }
        public System.String trustee_tfn { get; set; }
        public System.String trustee_address { get; set; }
        public System.String trustee_country { get; set; }
        public System.String companyusedfor { get; set; }
        public System.String typeofuser { get; set; }
        public System.String ulimateHoldingCompany { get; set; }
        public System.String ucompanyname { get; set; }
        public System.String acnarbnabn { get; set; }
        public System.String countryIcor { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep3ReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String designation { get; set; }
        public System.String firstname { get; set; }
        public System.String middlename { get; set; }
        public System.String familyname { get; set; }
        public System.String anyformername { get; set; }
        public System.String firstname_former { get; set; }
        public System.String middlename_former { get; set; }
        public System.String familyname_former { get; set; }
        public System.String unit_level_suite_primary { get; set; }
        public System.String streetNoName_primary { get; set; }
        public System.String suburb_town_city_primary { get; set; }
        public System.String state_primary { get; set; }
        public System.String postcode_primary { get; set; }
        public System.String country { get; set; }
        public System.String dob { get; set; }
        public System.String placeofbirth { get; set; }
        public System.String countryofbirth { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String isdirector { get; set; }
        public System.String issecretary { get; set; }
        public System.String ispublicofficer { get; set; }
        public System.String fname { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep3ByDirIdReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String designation { get; set; }
        public System.String firstname { get; set; }
        public System.String middlename { get; set; }
        public System.String familyname { get; set; }
        public System.String anyformername { get; set; }
        public System.String firstname_former { get; set; }
        public System.String middlename_former { get; set; }
        public System.String familyname_former { get; set; }
        public System.String unit_level_suite_primary { get; set; }
        public System.String streetNoName_primary { get; set; }
        public System.String suburb_town_city_primary { get; set; }
        public System.String state_primary { get; set; }
        public System.String postcode_primary { get; set; }
        public System.String country { get; set; }
        public System.String dob { get; set; }
        public System.String placeofbirth { get; set; }
        public System.String countryofbirth { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String isdirector { get; set; }
        public System.String issecretary { get; set; }
        public System.String ispublicofficer { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep4AnothershareholderReturnModel
    {
        public System.Int32 id { get; set; }
        public System.Int32? step4ID { get; set; }
        public System.String companyid { get; set; }
        public System.String shareholderdetails { get; set; }
        public System.String shareclasstype_value { get; set; }
        public System.String shareclasstype_text { get; set; }
        public System.Int32? no_of_shares { get; set; }
        public System.Decimal? amountpaidpershare { get; set; }
        public System.Decimal? amountremainingunpaidpershare { get; set; }
        public System.String isheldanotherorg { get; set; }
        public System.String beneficialownername { get; set; }
        public System.String individual_or_company { get; set; }
        public System.String individual_or_company_name { get; set; }
        public System.String individual_or_company_address { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String individual_or_company_acn { get; set; }
        public System.String individual_or_company_dob { get; set; }
        public System.String individual_or_company_unit_level_suite { get; set; }
        public System.String individual_or_company_streetNoName { get; set; }
        public System.String individual_or_company_suburb_town_city { get; set; }
        public System.String individual_or_company_state { get; set; }
        public System.String individual_or_company_postcode { get; set; }
        public System.String individual_or_company_country { get; set; }
        public System.String ISJOINT { get; set; }
        public System.String JOINT_individual_or_company { get; set; }
        public System.String joint_individual_or_company_name { get; set; }
        public System.String joint_individual_or_company_acn { get; set; }
        public System.String joint_individual_or_company_dob { get; set; }
        public System.String joint_individual_or_company_unit_level_suite { get; set; }
        public System.String joint_individual_or_company_streetNoName { get; set; }
        public System.String joint_individual_or_company_suburb_town_city { get; set; }
        public System.String joint_individual_or_company_state { get; set; }
        public System.String joint_individual_or_company_postcode { get; set; }
        public System.String joint_individual_or_company_country { get; set; }
        public System.Int32? dirid { get; set; }
        public System.String placeofbirth { get; set; }
        public System.String shareoption { get; set; }
        public System.String sharedetailsnotheldanotherorg { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep4Anothershareholder1ReturnModel
    {
        public System.Int32 id { get; set; }
        public System.Int32? step4ID { get; set; }
        public System.String companyid { get; set; }
        public System.String shareholderdetails { get; set; }
        public System.String shareclasstype_value { get; set; }
        public System.String shareclasstype_text { get; set; }
        public System.Int32? no_of_shares { get; set; }
        public System.Decimal? amountpaidpershare { get; set; }
        public System.Decimal? amountremainingunpaidpershare { get; set; }
        public System.String isheldanotherorg { get; set; }
        public System.String beneficialownername { get; set; }
        public System.String individual_or_company { get; set; }
        public System.String individual_or_company_name { get; set; }
        public System.String individual_or_company_address { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String individual_or_company_acn { get; set; }
        public System.String individual_or_company_dob { get; set; }
        public System.String individual_or_company_unit_level_suite { get; set; }
        public System.String individual_or_company_streetNoName { get; set; }
        public System.String individual_or_company_suburb_town_city { get; set; }
        public System.String individual_or_company_state { get; set; }
        public System.String individual_or_company_postcode { get; set; }
        public System.String individual_or_company_country { get; set; }
        public System.String ISJOINT { get; set; }
        public System.String JOINT_individual_or_company { get; set; }
        public System.String joint_individual_or_company_name { get; set; }
        public System.String joint_individual_or_company_acn { get; set; }
        public System.String joint_individual_or_company_dob { get; set; }
        public System.String joint_individual_or_company_unit_level_suite { get; set; }
        public System.String joint_individual_or_company_streetNoName { get; set; }
        public System.String joint_individual_or_company_suburb_town_city { get; set; }
        public System.String joint_individual_or_company_state { get; set; }
        public System.String joint_individual_or_company_postcode { get; set; }
        public System.String joint_individual_or_company_country { get; set; }
        public System.Int32? dirid { get; set; }
        public System.String placeofbirth { get; set; }
        public System.String shareoption { get; set; }
        public System.String sharedetailsnotheldanotherorg { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep4AnothershareholderAllReturnModel
    {
        public System.Int32 id { get; set; }
        public System.Int32? step4ID { get; set; }
        public System.String companyid { get; set; }
        public System.String shareholderdetails { get; set; }
        public System.String shareclasstype_value { get; set; }
        public System.String shareclasstype_text { get; set; }
        public System.Int32? no_of_shares { get; set; }
        public System.Decimal? amountpaidpershare { get; set; }
        public System.Decimal? amountremainingunpaidpershare { get; set; }
        public System.String isheldanotherorg { get; set; }
        public System.String beneficialownername { get; set; }
        public System.String individual_or_company { get; set; }
        public System.String individual_or_company_name { get; set; }
        public System.String individual_or_company_address { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String individual_or_company_acn { get; set; }
        public System.String individual_or_company_dob { get; set; }
        public System.String individual_or_company_unit_level_suite { get; set; }
        public System.String individual_or_company_streetNoName { get; set; }
        public System.String individual_or_company_suburb_town_city { get; set; }
        public System.String individual_or_company_state { get; set; }
        public System.String individual_or_company_postcode { get; set; }
        public System.String individual_or_company_country { get; set; }
        public System.String ISJOINT { get; set; }
        public System.String JOINT_individual_or_company { get; set; }
        public System.String joint_individual_or_company_name { get; set; }
        public System.String joint_individual_or_company_acn { get; set; }
        public System.String joint_individual_or_company_dob { get; set; }
        public System.String joint_individual_or_company_unit_level_suite { get; set; }
        public System.String joint_individual_or_company_streetNoName { get; set; }
        public System.String joint_individual_or_company_suburb_town_city { get; set; }
        public System.String joint_individual_or_company_state { get; set; }
        public System.String joint_individual_or_company_postcode { get; set; }
        public System.String joint_individual_or_company_country { get; set; }
        public System.Int32? dirid { get; set; }
        public System.String placeofbirth { get; set; }
        public System.String shareoption { get; set; }
        public System.String sharedetailsnotheldanotherorg { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetUserdetailsByuidReturnModel
    {
        public System.Int64 id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String Email { get; set; }
        public System.String Password { get; set; }
        public System.String ProfilePic { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.String _Role { get; set; }
        public System.DateTime? LastLogIn { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int32? AddedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Int32? UpdatedBy { get; set; }
        public System.DateTime? DeletedDate { get; set; }
        public System.Int32? DeletedBy { get; set; }
        public System.Boolean? Del { get; set; }
        public System.String Phone { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Tuser { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetAdminCompanyListReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String CompanyName { get; set; }
        public System.String AddedDate { get; set; }
        public System.Int64? txnId { get; set; }
        public System.DateTime? createddate { get; set; }
        public System.Boolean? Paid { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetAdminTrustListReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.String TrustName { get; set; }
            public System.String TrustType { get; set; }
            public System.String SetupDate { get; set; }
            public System.String AddedDate { get; set; }
            public System.String TrustState { get; set; }
            public System.Int64? txnId { get; set; }
            public System.DateTime? createddate { get; set; }
            public System.DateTime? TrustSetupDate { get; set; }
            public System.Boolean? Paid { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64 Id { get; set; }
            public System.String TrustName { get; set; }
            public System.String TrustType { get; set; }
            public System.String SetupDate { get; set; }
            public System.String AddedDate { get; set; }
            public System.String TrustState { get; set; }
            public System.Int64? txnId { get; set; }
            public System.DateTime? createddate { get; set; }
            public System.DateTime? TrustSetupDate { get; set; }
            public System.Boolean? Paid { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetadminUsersListReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.String Email { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.DateTime? _date { get; set; }
        public System.String Phone { get; set; }
        public System.String _Role { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetBeneficiaryDetailsReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.String Name { get; set; }
            public System.String CompanyName { get; set; }
            public System.String CompanyACN { get; set; }
            public System.DateTime? RegDate { get; set; }
            public System.String ContactPerson { get; set; }
            public System.String HolderType { get; set; }
            public System.Boolean? istrustee { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetcompanysearchbyidReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String CompanyName { get; set; }
        public System.DateTime? SearchOn { get; set; }
        public System.String userid { get; set; }
        public System.String status { get; set; }
        public System.String FULLNAME { get; set; }
        public System.String Asic_status { get; set; }
        public System.String Asic_Error { get; set; }
        public System.String Asic_File { get; set; }
        public System.String Asic_ACN { get; set; }
        public System.String Asic_DocNo { get; set; }
        public System.String Asic_ResType { get; set; }
        public System.String isship { get; set; }
        public System.String FullAddress { get; set; }
        public System.Int32? show_status { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Asic_OUT_File { get; set; }
        public System.String govofcomapany { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetDashboardCountersReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64? id { get; set; }
            public System.String userrole { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64? Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int64? Id { get; set; }
            public System.String TrustType { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int64? Id { get; set; }
            public System.Boolean? Status { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel5
        {
            public System.Int64? id { get; set; }
            public System.String userrole { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel5> ResultSet5;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel6
        {
            public System.Int64? Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel6> ResultSet6;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel7
        {
            public System.Int64? Id { get; set; }
            public System.String TrustType { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel7> ResultSet7;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel8
        {
            public System.Int64? Id { get; set; }
            public System.Boolean? Status { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel8> ResultSet8;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetFullCompanyDetailReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.String CompanyName { get; set; }
            public System.Boolean? NameReserved { get; set; }
            public System.String ABN { get; set; }
            public System.String CompanyPurpose { get; set; }
            public System.String CompanyUseFor { get; set; }
            public System.String RegistrationState { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Boolean Registered { get; set; }
            public System.String Status { get; set; }
            public System.Boolean? SMSFdeclaration { get; set; }
            public System.Boolean? QuoteForTax { get; set; }
            public System.Boolean? LegalAssessment { get; set; }
            public System.Boolean? BorrowingReview { get; set; }
            public System.Boolean? Agreement { get; set; }
            public System.String CompanySecretary { get; set; }
            public System.String PublicOfficerOfCompany { get; set; }
            public System.String HowfstmeetingOfDirheld { get; set; }
            public System.String DateOfIncorporation { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64 Id { get; set; }
            public System.Int64? CompanyId { get; set; }
            public System.String TrustName { get; set; }
            public System.String TrustABN { get; set; }
            public System.String TrustTFN { get; set; }
            public System.String Country { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.String TrustAddress { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int64 Id { get; set; }
            public System.Int64? CompanyId { get; set; }
            public System.String UnitLevel { get; set; }
            public System.String Street { get; set; }
            public System.String State { get; set; }
            public System.String Suburb { get; set; }
            public System.String PostCode { get; set; }
            public System.Boolean? IsRegisteredAddress { get; set; }
            public System.Boolean? IsPrincipleAddress { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int64 Id { get; set; }
            public System.Int64? CompanyId { get; set; }
            public System.String FirstName { get; set; }
            public System.String LastName { get; set; }
            public System.Int32? DOBday { get; set; }
            public System.Int32? DOBmonth { get; set; }
            public System.Int32? DOByear { get; set; }
            public System.String DOBcountry { get; set; }
            public System.String DOBstate { get; set; }
            public System.String DOBcity { get; set; }
            public System.String DOBaddress { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel5
        {
            public System.Int64 Id { get; set; }
            public System.Int64? CompanyId { get; set; }
            public System.Int64? DirectorId { get; set; }
            public System.String ShareClass { get; set; }
            public System.Int32? NoOfShare { get; set; }
            public System.Double? ShareAmount { get; set; }
            public System.Boolean ShareBehalf { get; set; }
            public System.String OwnerName { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel5> ResultSet5;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel6
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel6> ResultSet6;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel7
        {
            public System.Int64 Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
            public System.Double? Amount { get; set; }
            public System.Int64? TrustCompanyId { get; set; }
            public System.String FormType { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.String TxnId { get; set; }
            public System.String FormName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel7> ResultSet7;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetFullTrustDetailReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.String FirstName { get; set; }
            public System.String LastName { get; set; }
            public System.String Email { get; set; }
            public System.String Phone { get; set; }
            public System.String TrustType { get; set; }
            public System.String TrustName { get; set; }
            public System.DateTime? TrustSetupDate { get; set; }
            public System.String TrustState { get; set; }
            public System.String OrdinaryPrice { get; set; }
            public System.String TotalUnitHolders { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Boolean? QuoteForTax { get; set; }
            public System.Boolean? LegalAssessment { get; set; }
            public System.Boolean? BorrowingReview { get; set; }
            public System.Boolean? Agreement { get; set; }
            public System.String SMSF { get; set; }
            public System.String ABN { get; set; }
            public System.String PropertyTrusteeName { get; set; }
            public System.String PropertyTrusteeACN { get; set; }
            public System.String PropertyAddress { get; set; }
            public System.String LenderName { get; set; }
            public System.String SMSFCompanyName { get; set; }
            public System.String SMSFACN { get; set; }
            public System.DateTime? PropertyTrusteeSetupDate { get; set; }
            public System.DateTime? SMSFTrusteeSetupDate { get; set; }
            public System.DateTime? MeetingTime { get; set; }
            public System.String ExistingSetupDate { get; set; }
            public System.String ClauseNumber { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64 Id { get; set; }
            public System.String HolderType { get; set; }
            public System.String FirstName { get; set; }
            public System.String MiddleName { get; set; }
            public System.String LastName { get; set; }
            public System.String CompanyName { get; set; }
            public System.String CompanyACN { get; set; }
            public System.Boolean? CommanSeal { get; set; }
            public System.String UnitLevel { get; set; }
            public System.String Street { get; set; }
            public System.String State { get; set; }
            public System.String Suburb { get; set; }
            public System.String PostCode { get; set; }
            public System.String Country { get; set; }
            public System.Boolean? IsTrustee { get; set; }
            public System.String UnitType { get; set; }
            public System.Int32? UnitNumber { get; set; }
            public System.Double? UnitTotalAmount { get; set; }
            public System.Double? UnitAmountOwing { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int64? TrustId { get; set; }
            public System.DateTime? DOB { get; set; }
            public System.DateTime? CompanyRegDate { get; set; }
            public System.String ContactPersonName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int64 Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
            public System.Double? Amount { get; set; }
            public System.Int64? TrustCompanyId { get; set; }
            public System.String FormType { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.String TxnId { get; set; }
            public System.String FormName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetPaymentDetailReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.String Name { get; set; }
            public System.String TrustType { get; set; }
            public System.String Email { get; set; }
            public System.String CustomerName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int64 Id { get; set; }
            public System.String Name { get; set; }
            public System.String Email { get; set; }
            public System.String CustomerName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetPaymentListReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
            public System.Double? Amount { get; set; }
            public System.Int64? TrustCompanyId { get; set; }
            public System.String FormType { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.String AddedBy { get; set; }
            public System.String TxnId { get; set; }
            public System.String FormName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64 Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
            public System.Double? Amount { get; set; }
            public System.Int64? TrustCompanyId { get; set; }
            public System.String FormType { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.String AddedBy { get; set; }
            public System.String TxnId { get; set; }
            public System.String FormName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetReportReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel5
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel5> ResultSet5;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel6
        {
            public System.Int32? Id { get; set; }
            public System.String dates { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel6> ResultSet6;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetShortCompanyDetailReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int32? Id { get; set; }
            public System.String CompanyACN { get; set; }
            public System.String userEmail { get; set; }
            public System.String BillStatus { get; set; }
            public System.String ASICStatus { get; set; }
            public System.String Regid { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int32 sno { get; set; }
            public System.String AgentSiteName { get; set; }
            public System.String GivenName { get; set; }
            public System.String FamilyName { get; set; }
            public System.String Email { get; set; }
            public System.String pass { get; set; }
            public System.String ProfileCategory { get; set; }
            public System.String Phone { get; set; }
            public System.String OrganizationName { get; set; }
            public System.String OrganizationABN { get; set; }
            public System.String UnitLevelSuits { get; set; }
            public System.String StreetNumberStreetName { get; set; }
            public System.String Suburb { get; set; }
            public System.String State { get; set; }
            public System.String Postcode { get; set; }
            public System.String Fax { get; set; }
            public System.DateTime? registrationdate { get; set; }
            public System.Int32? isactive { get; set; }
            public System.String Website { get; set; }
            public System.String Logopath { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int32 Id { get; set; }
            public System.String OptionName { get; set; }
            public System.String OptionValue { get; set; }
            public System.String _Type { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int32? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int32? UpdatedBy { get; set; }
            public System.DateTime? DeletedDate { get; set; }
            public System.Int32? DeletedBy { get; set; }
            public System.Boolean? Del { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel4
        {
            public System.Int64 Id { get; set; }
            public System.Boolean? TransactionStatus { get; set; }
            public System.Double? Amount { get; set; }
            public System.Int64? TrustCompanyId { get; set; }
            public System.String FormType { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.String TxnId { get; set; }
            public System.String FormName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel5
        {
            public System.Int64 Id { get; set; }
            public System.String CompanyName { get; set; }
            public System.Boolean? NameReserved { get; set; }
            public System.String ABN { get; set; }
            public System.String CompanyPurpose { get; set; }
            public System.String CompanyUseFor { get; set; }
            public System.String RegistrationState { get; set; }
            public System.DateTime? AddedDate { get; set; }
            public System.Int64? AddedBy { get; set; }
            public System.Int64? UpdatedBy { get; set; }
            public System.DateTime? UpdatedDate { get; set; }
            public System.Boolean Registered { get; set; }
            public System.String Status { get; set; }
            public System.Boolean? SMSFdeclaration { get; set; }
            public System.Boolean? QuoteForTax { get; set; }
            public System.Boolean? LegalAssessment { get; set; }
            public System.Boolean? BorrowingReview { get; set; }
            public System.Boolean? Agreement { get; set; }
            public System.String CompanySecretary { get; set; }
            public System.String PublicOfficerOfCompany { get; set; }
            public System.String HowfstmeetingOfDirheld { get; set; }
            public System.String DateOfIncorporation { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel5> ResultSet5;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel6
        {
            public System.Int32 id { get; set; }
            public System.String CompanyName { get; set; }
            public System.DateTime? SearchOn { get; set; }
            public System.String userid { get; set; }
            public System.String status { get; set; }
            public System.String FULLNAME { get; set; }
            public System.String Asic_status { get; set; }
            public System.String Asic_Error { get; set; }
            public System.String Asic_File { get; set; }
            public System.String Asic_ACN { get; set; }
            public System.String Asic_DocNo { get; set; }
            public System.String Asic_ResType { get; set; }
            public System.String isship { get; set; }
            public System.String FullAddress { get; set; }
            public System.Int32? show_status { get; set; }
            public System.Int64? Regid { get; set; }
            public System.String Asic_OUT_File { get; set; }
            public System.String govofcomapany { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel6> ResultSet6;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep1BycidReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String companyname { get; set; }
        public System.String companyname_ext { get; set; }
        public System.String stateterritorry { get; set; }
        public System.String isspecialpurpose { get; set; }
        public System.String isreservecompany410 { get; set; }
        public System.String reservecompany410_asicnamereservationnumber { get; set; }
        public System.String reservecompany410_fulllegalname { get; set; }
        public System.String isproposeidentical { get; set; }
        public System.String proposeidentical_before28may { get; set; }
        public System.String proposeidentical_after28may { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno1 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory1 { get; set; }
        public System.String proposeidentical_after28may_abnnumber { get; set; }
        public System.String isultimateholdingcompany { get; set; }
        public System.String ultimateholdingcompany_fulllegalname { get; set; }
        public System.String ultimateholdingcompany_country { get; set; }
        public System.String ultimateholdingcompany_ACN_ARBN { get; set; }
        public System.String ultimateholdingcompany_ABN { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String acn { get; set; }
        public System.String typeofcompany { get; set; }
        public System.String classofcompany { get; set; }
        public System.String specialpurpose_ifapplicable { get; set; }
        public System.String cash { get; set; }
        public System.String writtencontact { get; set; }
        public System.String Indivisual_Company_Asic_form401 { get; set; }
        public System.String CompanyName_Asic_from401 { get; set; }
        public System.String CompanyActingAsTrustee { get; set; }
        public System.String proposed_Name_Yes_No { get; set; }
        public System.Int32? proposeidentical_before28may_totalstate { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno2 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory2 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno3 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory3 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno4 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory4 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno5 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory5 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno6 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory6 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno7 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory7 { get; set; }
        public System.String proposeidentical_before28may_previousbusinessno8 { get; set; }
        public System.String proposeidentical_before28may_previousstateteritory8 { get; set; }
        public System.String Openingtime { get; set; }
        public System.String Closingtime { get; set; }
        public System.Boolean? standard_hours { get; set; }
        public System.String trustee_trustname { get; set; }
        public System.String trustee_abn { get; set; }
        public System.String trustee_tfn { get; set; }
        public System.String trustee_address { get; set; }
        public System.String trustee_country { get; set; }
        public System.String companyusedfor { get; set; }
        public System.String typeofuser { get; set; }
        public System.String ulimateHoldingCompany { get; set; }
        public System.String ucompanyname { get; set; }
        public System.String acnarbnabn { get; set; }
        public System.String countryIcor { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetStep2BycidReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String companyid { get; set; }
        public System.String contactperson { get; set; }
        public System.String unit_level_suite { get; set; }
        public System.String streetNoName { get; set; }
        public System.String suburb_town_city { get; set; }
        public System.String state { get; set; }
        public System.String postcode { get; set; }
        public System.String iscompanylocatedaboveaddress { get; set; }
        public System.String isprimaryaddress { get; set; }
        public System.String contactperson_primary { get; set; }
        public System.String unit_level_suite_primary { get; set; }
        public System.String streetNoName_primary { get; set; }
        public System.String suburb_town_city_primary { get; set; }
        public System.String state_primary { get; set; }
        public System.String postcode_primary { get; set; }
        public System.DateTime? entrydate { get; set; }
        public System.String occupiername { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetTrustAppointerReturnModel
    {
        public System.String OrdinaryPrice { get; set; }
        public System.String TotalUnitHolders { get; set; }
        public System.Int64? Id { get; set; }
        public System.String HolderType { get; set; }
        public System.String FirstName { get; set; }
        public System.String MiddleName { get; set; }
        public System.String LastName { get; set; }
        public System.String CompanyName { get; set; }
        public System.String CompanyACN { get; set; }
        public System.Boolean? CommanSeal { get; set; }
        public System.String UnitLevel { get; set; }
        public System.String Street { get; set; }
        public System.String State { get; set; }
        public System.String Suburb { get; set; }
        public System.String PostCode { get; set; }
        public System.String Country { get; set; }
        public System.Boolean? IsTrustee { get; set; }
        public System.String UnitType { get; set; }
        public System.Int32? UnitNumber { get; set; }
        public System.Double? UnitTotalAmount { get; set; }
        public System.Double? UnitAmountOwing { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int64? AddedBy { get; set; }
        public System.Int64? UpdatedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Int64? TrustId { get; set; }
        public System.DateTime? DOB { get; set; }
        public System.DateTime? CompanyRegDate { get; set; }
        public System.String ContactPersonName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetTrustDetailReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String Email { get; set; }
        public System.String Phone { get; set; }
        public System.String TrustType { get; set; }
        public System.String TrustName { get; set; }
        public System.DateTime? TrustSetupDate { get; set; }
        public System.String TrustState { get; set; }
        public System.String OrdinaryPrice { get; set; }
        public System.String TotalUnitHolders { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int64? AddedBy { get; set; }
        public System.Int64? UpdatedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Boolean? QuoteForTax { get; set; }
        public System.Boolean? LegalAssessment { get; set; }
        public System.Boolean? BorrowingReview { get; set; }
        public System.Boolean? Agreement { get; set; }
        public System.String SMSF { get; set; }
        public System.String ABN { get; set; }
        public System.String PropertyTrusteeName { get; set; }
        public System.String PropertyTrusteeACN { get; set; }
        public System.String PropertyAddress { get; set; }
        public System.String LenderName { get; set; }
        public System.String SMSFCompanyName { get; set; }
        public System.String SMSFACN { get; set; }
        public System.DateTime? PropertyTrusteeSetupDate { get; set; }
        public System.DateTime? SMSFTrusteeSetupDate { get; set; }
        public System.DateTime? MeetingTime { get; set; }
        public System.String ExistingSetupDate { get; set; }
        public System.String ClauseNumber { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetUserCompanyListReturnModel
    {
        public System.Int32 id { get; set; }
        public System.String CompanyName { get; set; }
        public System.String AddedDate { get; set; }
        public System.Int32 txnId { get; set; }
        public System.DateTime? createddate { get; set; }
        public System.String Paid { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetUserCompanyList1ReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String CompanyName { get; set; }
        public System.String AddedDate { get; set; }
        public System.Int64? txnId { get; set; }
        public System.DateTime? createddate { get; set; }
        public System.Boolean? Paid { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetUsersListReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.String Email { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.DateTime? _date { get; set; }
        public System.String Phone { get; set; }
        public System.String _Role { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class GetUserTrustListReturnModel
    {
        public System.Int64 Id { get; set; }
        public System.String TrustName { get; set; }
        public System.String TrustType { get; set; }
        public System.String SetupDate { get; set; }
        public System.String AddedDate { get; set; }
        public System.String TrustState { get; set; }
        public System.Int64? txnId { get; set; }
        public System.DateTime? createddate { get; set; }
        public System.DateTime? TrustSetupDate { get; set; }
        public System.Boolean? Paid { get; set; }
        public System.Int64? rn { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class InsertStep4AnothershareholderReturnModel
    {
        public System.Int32 id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class SaveOptionsReturnModel
    {
        public System.Int32 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class SpGetProfileReturnModel
    {
        public System.String GivenName { get; set; }
        public System.String FamilyName { get; set; }
        public System.String Email { get; set; }
        public System.String OrganizationName { get; set; }
        public System.String OrganizationABN { get; set; }
        public System.String UnitLevelSuits { get; set; }
        public System.String StreetNumberStreetName { get; set; }
        public System.String Suburb { get; set; }
        public System.String State { get; set; }
        public System.String Postcode { get; set; }
        public System.String Phone { get; set; }
        public System.String Fax { get; set; }
        public System.String Website { get; set; }
        public System.String Logopath { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class SpInsertCompanysearchReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int32 id { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int32 id { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UnreadContactReturnModel
    {
        public System.Int64? Column1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdateBeneficiariesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel1
        {
            public System.Int64 Id { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel2
        {
            public System.Int64 Id { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
        public class ResultSetModel3
        {
            public System.Int64 Id { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdatecompanyOptionReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdateContactstatusReturnModel
    {
        public System.Int64 id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdatetrustReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdateTrustAppointerReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UpdateTrustOptionReturnModel
    {
        public System.Int64 Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UserloginReturnModel
    {
        public System.Int64 id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String Email { get; set; }
        public System.String Password { get; set; }
        public System.String ProfilePic { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.String _Role { get; set; }
        public System.DateTime? LastLogIn { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int32? AddedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Int32? UpdatedBy { get; set; }
        public System.DateTime? DeletedDate { get; set; }
        public System.Int32? DeletedBy { get; set; }
        public System.Boolean? Del { get; set; }
        public System.String Phone { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Tuser { get; set; }
        public System.String Role { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UserloginNewReturnModel
    {
        public System.Int64 id { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String Email { get; set; }
        public System.String Password { get; set; }
        public System.String ProfilePic { get; set; }
        public System.Boolean? EmailVerified { get; set; }
        public System.String _Role { get; set; }
        public System.DateTime? LastLogIn { get; set; }
        public System.DateTime? AddedDate { get; set; }
        public System.Int32? AddedBy { get; set; }
        public System.DateTime? UpdatedDate { get; set; }
        public System.Int32? UpdatedBy { get; set; }
        public System.DateTime? DeletedDate { get; set; }
        public System.Int32? DeletedBy { get; set; }
        public System.Boolean? Del { get; set; }
        public System.String Phone { get; set; }
        public System.Int64? Regid { get; set; }
        public System.String Tuser { get; set; }
        public System.String Role { get; set; }
    }

    #endregion

}
// </auto-generated>

